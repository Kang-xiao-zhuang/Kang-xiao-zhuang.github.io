<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello-World</title>
    <url>/2021/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>刷题笔记(数组)-03</title>
    <url>/2021/05/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84-03/</url>
    <content><![CDATA[<p><strong>题目地址:<a href="https://leetcode-cn.com/problems/rotate-matrix-lcci/">面试题 01.07. 旋转矩阵 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7409a77f783689c106067cf9bbaa6e1e.png"></p>
<blockquote>
<p>思路：</p>
<ul>
<li><p>翻转后的元素的规律是 假如元素是第二列第一个，翻转后会是第二行最后一个！</p>
<pre><code>               1 2 3          7 4 1
            4 5 6   --&gt;    8 5 2
            7 8 9          9 6 3
</code></pre>
</li>
<li><p>以 2 为例</p>
<pre><code>         翻转前 位置 【0】【1】
         翻转后 位置  【1】【2】
</code></pre>
</li>
<li><p> 遍历完成之后，再将matrix_new中的结果复制到原数组中即可</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取数组长度</span></span><br><span class="line">        <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">        <span class="comment">//定义新的数组</span></span><br><span class="line">        <span class="keyword">int</span> [][] matrix_new=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="comment">//两次循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               matrix_new[j][n-i-<span class="number">1</span>]= matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                matrix[i][j]=matrix_new[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>题目地址:<a href="https://leetcode-cn.com/problems/zero-matrix-lcci/">面试题 01.08. 零矩阵 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bd550f89bad70cbc9f7217df2b541531.png">)</p>
<p>思路</p>
<ul>
<li>用2个标记数组 记录每一行和每一列是否有0出现 出现就标记数组的位置为true</li>
<li>最后更新原数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[] row=<span class="keyword">new</span> <span class="keyword">boolean</span>[m];</span><br><span class="line">        <span class="keyword">boolean</span>[] col=<span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(matrix[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                   row[i]=col[j]=<span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(row[i]||col[j])&#123;</span><br><span class="line">                   matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码均由力扣编译器，提交通过，描述编写不当地方还请大家评论区指出！</p>
]]></content>
      <categories>
        <category>力扣刷题</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题笔记(链表)-02</title>
    <url>/2021/05/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%93%BE%E8%A1%A8-02/</url>
    <content><![CDATA[<p><strong>题目地址:<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237. 删除链表中的节点 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/153998322821110e4e864638b0a26419.png"></p>
<p>思路：只需要将node节点的next的val赋值给node节点的val，然后将node节点的next的next赋值node的next</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val=node.next.val;</span><br><span class="line">        node.next=node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>题目地址:<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2e19a6f0a969e90c35f3d997366b6657.png"></p>
<p>思路：</p>
<ul>
<li>首先判断头节点是否为空，空直接返回头节点</li>
<li>定义一个ptr接受头节点，while循环，条件：<strong>ptr.next!=null</strong> 如果ptr的next的val等于ptr的val，那么<strong>ptr.next=ptr.next.next;</strong></li>
<li>否则<strong>ptr=ptr.next</strong>,最后返回头节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode ptr=head;</span><br><span class="line">            <span class="keyword">while</span>(ptr.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ptr.val==ptr.next.val)&#123;</span><br><span class="line">                    ptr.next=ptr.next.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ptr=ptr.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>题目地址:<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d7f1dfc302968de9b8e7e9e06aa5d942.png"></p>
<p>思路</p>
<ul>
<li>首先判断头节点和头节点的next是否为空，二者一个为空，直接返回头节点</li>
<li>定义空的newhead</li>
<li>while循环 当头节点不为空</li>
<li>先定义一个临时变量 temp 接受head的next  <strong>ListNode temp=head.next;</strong></li>
<li><strong>head.next=newhead;</strong> 先把head的next为null</li>
<li><strong>newhead=head;</strong> 再将head赋值给newhead</li>
<li><strong>head=temp;</strong> 相当于交换头节点和头节点下一个节点的位置</li>
<li>最后返回newhead</li>
</ul>
<blockquote>
<p>1 2 3 4 5</p>
<p>举例</p>
<ul>
<li>head=1,head.next=2,temp=null</li>
<li>先把2的值给temp，将2的位置变为null,</li>
<li>再将1的值赋值给newhead，这样1反转过来就是最后一个元素</li>
<li>最后将temp的值赋值给head，也就是头节点现在是2 ，继续循环下去得到结果 5 4 3 2 1</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newhead=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode temp=head.next;</span><br><span class="line">            head.next=newhead;</span><br><span class="line">            newhead=head;</span><br><span class="line">            head=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码均由力扣编译器，提交通过，描述编写不当地方还请大家评论区指出！</p>
]]></content>
      <categories>
        <category>力扣刷题</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣刷题(数组)-01</title>
    <url>/2021/05/14/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84-01/</url>
    <content><![CDATA[<p><strong>题目地址：<a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零 - 力扣（LeetCode） (leetcode-cn.com)</a></strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E5%9B%BE%E7%89%87/Snipaste_2021-05-14_21-25-09.png"></p>
<p><strong>思路：</strong>双指针，定义一个变量j，遍历数组中的元素，如果碰到元素不为0，且i！=j，索引i的值赋给j，索引i的元素初始化为0，j最后自增1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">                    nums[j]=nums[i];</span><br><span class="line">                    nums[i]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另个方法：遍历数组，如果元素不为0，定义一个临时变量，交换索引i和索引j的值，最后j自增1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=nums[j];</span><br><span class="line">                nums[j]=nums[i];</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码均由力扣编译器，提交通过</p>
]]></content>
      <categories>
        <category>力扣刷题</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件之BroadCast</title>
    <url>/2021/05/08/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BBroadCast/</url>
    <content><![CDATA[<p>写在前面</p>
<ul>
<li> 记录学习BroadCast的使用</li>
<li><code>IDE：Android-Studio SDK版本：API30</code></li>
</ul>
<ul>
<li>关于什么是<code>BroadCast</code>请参考下这篇文章<a href="https://blog.csdn.net/weixin_39460667/article/details/82413819?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162443856116780255296656%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162443856116780255296656&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~baidu_landing_v2~default-5-82413819.nonecase&utm_term=broadcast&spm=1018.2226.3001.4450">Android 之 超详细 Broadcast</a></li>
<li>关于<code>Service</code>参考这篇文章<a href="https://blog.csdn.net/qq_51495235/article/details/118089323?spm=1001.2014.3001.5501">Android四大组件之Service</a></li>
</ul>
<p>本文主要用<code>Service</code>和<code>BroadCast</code>来实现一个秒表具有<strong>开始</strong>，<strong>暂停</strong>，<strong>归零</strong>三个功能</p>
<p>话不多说开始上代码</p>
<p><strong>activity_receive.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.ReceiveActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textSize=&quot;35sp&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;200dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;100dp&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn1&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;开始&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn2&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;暂停&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn3&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;归零&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/timeView&quot;</span><br><span class="line">        android:layout_marginTop=&quot;50dp&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>预览下界面，比较简单</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/7a480969c8cb606e1fe14a488e329a4f.png"></p>
<h2 id="1-定义广播发送器BroadCastSender"><a href="#1-定义广播发送器BroadCastSender" class="headerlink" title="1.定义广播发送器BroadCastSender"></a>1.定义广播发送器BroadCastSender</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广播发送器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadCastSender</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROADACTION = <span class="string">&quot;CZIE&quot;</span>;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加主题</span></span><br><span class="line">        intent.setAction(BROADACTION);</span><br><span class="line">        intent.putExtra(name, value);</span><br><span class="line">        <span class="comment">//发送广播</span></span><br><span class="line">        MyApplication.getContext().sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加主题</span></span><br><span class="line">        intent.setAction(BROADACTION);</span><br><span class="line">        intent.putExtra(name, value);</span><br><span class="line">        MyApplication.getContext().sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name, Long value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加主题</span></span><br><span class="line">        intent.setAction(BROADACTION);</span><br><span class="line">        intent.putExtra(name, value);</span><br><span class="line">        MyApplication.getContext().sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name, Byte value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加主题</span></span><br><span class="line">        intent.setAction(BROADACTION);</span><br><span class="line">        intent.putExtra(name, value);</span><br><span class="line">        MyApplication.getContext().sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-定义Service发送消息"><a href="#2-定义Service发送消息" class="headerlink" title="2.定义Service发送消息"></a>2.定义Service发送消息</h2><p>通过<code>while</code>循环来不停的发送消息</p>
<p><strong>TestService3</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.IntentService;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.czie.service.ReceiveActivity.istime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService3</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line">    BroadCastSender sender = <span class="keyword">new</span> BroadCastSender();</span><br><span class="line">    <span class="comment">//必须实现父类的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestService3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;TestService3&quot;</span>);</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须重写的核心方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (istime == <span class="number">0</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (istime == <span class="number">1</span>) &#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sender.send(<span class="string">&quot;HelloWorld&quot;</span>,i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-应用类MyApplication"><a href="#3-应用类MyApplication" class="headerlink" title="3.应用类MyApplication"></a>3.应用类MyApplication</h2><p>该类用来获取上下文</p>
<p><strong>MyApplication</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        context=<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-主界面ReceiveActivity"><a href="#4-主界面ReceiveActivity" class="headerlink" title="4.主界面ReceiveActivity"></a>4.主界面ReceiveActivity</h2><ul>
<li>设置按钮监听事件</li>
<li>广播接收</li>
<li>创建广播接收器</li>
</ul>
<p><strong>ReceiveActivity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.IntentFilter;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> istime;</span><br><span class="line">    MyBroadReceiver myBroadReceiver;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> TextView timeView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_receive);</span><br><span class="line">        Button btn1 = findViewById(R.id.btn1);</span><br><span class="line">        Button btn2 = findViewById(R.id.btn2);</span><br><span class="line">        Button btn3 = findViewById(R.id.btn3);</span><br><span class="line">        textView = findViewById(R.id.text1);</span><br><span class="line">        timeView=findViewById(R.id.timeView);</span><br><span class="line">        btn1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//广播接受</span></span><br><span class="line">        myBroadReceiver=<span class="keyword">new</span> MyBroadReceiver();</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(BroadCastSender.BROADACTION);</span><br><span class="line">        registerReceiver(myBroadReceiver,intentFilter);</span><br><span class="line">      <span class="comment">//  startService(new Intent(ReceiveActivity.this,TestService3.class));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn1:</span><br><span class="line">                istime=<span class="number">0</span>;</span><br><span class="line">                startService(<span class="keyword">new</span> Intent(ReceiveActivity.<span class="keyword">this</span>,TestService3.class));</span><br><span class="line">              <span class="comment">//  startService(Intent.makeMainActivity(startService(new Intent(ReceiveActivity.this, TestService3.class))));</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn2:</span><br><span class="line">                istime=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn3:</span><br><span class="line">                istime=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建广播接收器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBroadReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取参数</span></span><br><span class="line">            <span class="keyword">int</span> time = intent.getIntExtra(<span class="string">&quot;HelloWorld&quot;</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//分钟</span></span><br><span class="line">            <span class="keyword">int</span> min =time/<span class="number">60</span>;</span><br><span class="line">            <span class="comment">//秒钟</span></span><br><span class="line">            <span class="keyword">int</span> second=time%<span class="number">60</span>;</span><br><span class="line">            String times=String.format(<span class="string">&quot;%02d&quot;</span>,min)+<span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>,second);</span><br><span class="line"></span><br><span class="line">            textView.setText(String.valueOf(times));</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">            String clockTime = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">            timeView.setText(clockTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>预览下成果</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/963c6f8139b6dde2b15ded45a50e1a82.gif"></p>
<p>写在最后</p>
<ul>
<li>掌握BroadCast基本知识点和如何发送和接收消息，并实现功能👍</li>
<li>继续探索BroadCast其他功能💪</li>
<li>本篇文章对你有用的话，记得点个赞👍</li>
<li>对本篇文章有任何问题，欢迎评论区指出❤️</li>
</ul>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>Android笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件之Service</title>
    <url>/2021/05/05/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/</url>
    <content><![CDATA[<p>写在前面</p>
<ul>
<li> 记录学习Service的使用</li>
<li> <code>IDE：Android-Studio SDK版本：API30</code><h1 id="1-Service基础知识点"><a href="#1-Service基础知识点" class="headerlink" title="1. Service基础知识点"></a>1. Service基础知识点</h1><h2 id="1-1线程的相关概念："><a href="#1-1线程的相关概念：" class="headerlink" title="1.1线程的相关概念："></a>1.1线程的相关概念：</h2>首先在了解Service前先来了解下线程。</li>
<li>程序：为了完成特定任务，用某种语言编写的一组指令集合(一组静态代码)。</li>
<li>进程：运行中的程序，系统调度与资源分配的一个独立单位，操作系统会 为每个进程分配一段内存空间。程序的依次动态执行，经历代码的加载，执行， 执行完毕的完整过程。</li>
<li>线程：比进程更小的执行单元，每个进程可能有多条线程，线程需要放在一个 进程中才能执行，线程由程序负责管理，而进程则由系统进行调度。</li>
<li>多线程的理解：并行执行多个条指令，将CPU时间片按照调度算法分配给各个 线程，实际上是分时执行的，只是这个切换的时间很短，用户感觉到”同时”而已。</li>
</ul>
<h2 id="1-2-线程的生命周期"><a href="#1-2-线程的生命周期" class="headerlink" title="1.2 线程的生命周期"></a>1.2 线程的生命周期</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/245d0b52c641f46bf4311403edafe1ea.png"></p>
<h2 id="1-3-创建线程的三种方式"><a href="#1-3-创建线程的三种方式" class="headerlink" title="1.3 创建线程的三种方式"></a>1.3 创建线程的三种方式</h2><ol>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
<li>实现Callabl接口</li>
</ol>
<h2 id="1-4-Service与Thread线程的区别"><a href="#1-4-Service与Thread线程的区别" class="headerlink" title="1.4 Service与Thread线程的区别"></a>1.4 Service与Thread线程的区别</h2><p>其实他们两者并没有太大的关系，不过有很多人经常把这两个混淆了。 Thread是线程，程序执行的最小单元，分配CPU的基本单位。 而Service则是Android提供一个允许长时间留驻后台的一个组件，最常见的 用法就是做<code>轮询操作</code>。或者想在后台做一些事情，比如后台下载更新。 记得别把这两个概念混淆。</p>
<h2 id="1-5-Service的生命周期图"><a href="#1-5-Service的生命周期图" class="headerlink" title="1.5 Service的生命周期图"></a>1.5 Service的生命周期图</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/70d128b3ffc8398a6bf869c2168589bc.png"></p>
<h2 id="1-6-Service的生命周期解析"><a href="#1-6-Service的生命周期解析" class="headerlink" title="1.6 Service的生命周期解析"></a>1.6 Service的生命周期解析</h2><ul>
<li>StartService()启动Service。</li>
<li><pre><code>BindService()启动Service。
</code></pre>
</li>
<li>还有一种，就是启动Service后，绑定Service</li>
</ul>
<h2 id="1-7-相关方法详解"><a href="#1-7-相关方法详解" class="headerlink" title="1.7 相关方法详解"></a>1.7 相关方法详解</h2><ul>
<li>onCreate()：当Service第一次被创建后立即回调该方法，该方法在整个生命周期 中只会调用一次。</li>
<li>  onDestory()：当Service被关闭时会回调该方法，该方法只会回调一次。</li>
<li>onStartCommand(intent,flag,startId)：早期版本是onStart(intent,startId), 当客户端调用startService(Intent)方法时会回调，可多次调用StartService方法， 但不会再创建新的Service对象，而是继续复用前面产生的Service对象，但会继续回调 onStartCommand()方法。</li>
<li>IBinder onOnbind(intent)：该方法是Service都必须实现的方法，该方法会返回一个 IBinder对象，app通过该对象与Service组件进行通信。</li>
<li>onUnbind(intent)：当该Service上绑定的所有客户端都断开时会回调该方法。</li>
</ul>
<h1 id="2-Service生命周期的验证"><a href="#2-Service生命周期的验证" class="headerlink" title="2. Service生命周期的验证"></a>2. Service生命周期的验证</h1><h2 id="2-1-自定义一个Service-重写相关的方法-用户在logcat上打印验证"><a href="#2-1-自定义一个Service-重写相关的方法-用户在logcat上打印验证" class="headerlink" title="2.1 自定义一个Service,重写相关的方法,用户在logcat上打印验证:"></a>2.1 自定义一个Service,重写相关的方法,用户在logcat上打印验证:</h2><p>编写布局文件，添加两个Button组件，Id分别设置为<code>startButton</code>、<code>stopButton</code></p>
<p><strong>activity_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TableRow</span><br><span class="line">        android:id=&quot;@+id/tableRow1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentStart=&quot;true&quot;</span><br><span class="line">        android:layout_alignParentLeft=&quot;true&quot;</span><br><span class="line">        android:layout_alignParentTop=&quot;true&quot;</span><br><span class="line">        android:layout_marginTop=&quot;100dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/startButton&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;100dp&quot;</span><br><span class="line">            android:text=&quot;Start&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/stopButton&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;122dp&quot;</span><br><span class="line">            android:text=&quot;Stop&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>预览下样式</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/7917fc22b16c1ef138a42d5016d6b94f.png"><br>在src/main/java/包名 目录中创建一个名为<code>TestService1</code>的类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService1</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//必须要实现的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;onBind方法被调用！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Service被创建时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;onCreate方法被调用！&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Service被启动时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;onStartCommand被调用！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Service被关闭之前回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;onDestroy被调用！&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写完毕后打开项目中的<code>AndroidManifest.xml</code>文件进行配置。 在&lt;activity  ……&gt;   /activity&gt;节点后添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.TestService1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.czie.service.testservice1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MainActivity中编写代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button start, stop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        start = (Button) findViewById(R.id.startButton);</span><br><span class="line">        stop = (Button) findViewById(R.id.stopButton);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建启动Service的Intent,以及Intent属性</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,TestService1.class);</span><br><span class="line">        intent.setAction(<span class="string">&quot;com.czie.service.testservice1&quot;</span>);</span><br><span class="line">        <span class="comment">//为两个按钮设置点击事件,分别是启动与停止service</span></span><br><span class="line">        start.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        stop.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                stopService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目，点击按钮同时查看<code>Log</code>输出<br><img src="https://img-blog.csdnimg.cn/img_convert/a7dba2caa4d5c265e4ac987041237dd6.png"></p>
<h2 id="2-2-IntentService的用法"><a href="#2-2-IntentService的用法" class="headerlink" title="2.2 IntentService的用法"></a>2.2 IntentService的用法</h2><p>在项目中的src/main/java/com.czie.service下创建一个名为<code>TestService3</code>的类</p>
<p><strong>TestService3</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.IntentService;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService3</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须实现父类的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestService3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;TestService3&quot;</span>);</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须重写的核心方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2021/6/21</span></span><br><span class="line">        <span class="comment">// Intent是从Activity发过来的，携带识别参数，根据参数执行不同的任务</span></span><br><span class="line">        String action = intent.getExtras().getString(<span class="string">&quot;param&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (action.equals(<span class="string">&quot;s1&quot;</span>)) Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;启动service1&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(<span class="string">&quot;s2&quot;</span>)) Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;启动service2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(<span class="string">&quot;s3&quot;</span>)) Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;启动service3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务休眠2秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写其他方法，用于查看方法的调用顺序</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;onBind方法被调用了！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onBind(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntentRedelivery</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;setIntentRedelivery被调用了！&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.setIntentRedelivery(enabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;onDestroy被调用了！&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写完毕后打开项目中的<code>AndroidManifest.xml</code>文件进行配置。 在&lt;activity  ……&gt;   /activity&gt;节点后添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.TestService3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.czie.service.testservice3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>MainActivity</code>中添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button start, stop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        start = (Button) findViewById(R.id.startButton);</span><br><span class="line">        stop = (Button) findViewById(R.id.stopButton);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Intent it1 = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService3.class);</span><br><span class="line">        Bundle b1 = <span class="keyword">new</span> Bundle();</span><br><span class="line">        b1.putString(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;s1&quot;</span>);</span><br><span class="line">        it1.putExtras(b1);</span><br><span class="line"></span><br><span class="line">        Intent it2 = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService3.class);</span><br><span class="line">        Bundle b2 = <span class="keyword">new</span> Bundle();</span><br><span class="line">        b2.putString(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;s2&quot;</span>);</span><br><span class="line">        it2.putExtras(b2);</span><br><span class="line"></span><br><span class="line">        Intent it3 = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService3.class);</span><br><span class="line">        Bundle b3 = <span class="keyword">new</span> Bundle();</span><br><span class="line">        b3.putString(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;s3&quot;</span>);</span><br><span class="line">        it3.putExtras(b3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接着启动多次IntentService</span></span><br><span class="line">        startService(it1);</span><br><span class="line">        startService(it2);</span><br><span class="line">        startService(it3);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建启动Service的Intent,以及Intent属性</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService1.class);</span><br><span class="line">        intent.setAction(<span class="string">&quot;com.czie.service.testservice1&quot;</span>);</span><br><span class="line">        <span class="comment">//为两个按钮设置点击事件,分别是启动与停止service</span></span><br><span class="line">        start.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        stop.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                stopService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目，查看<code>Log</code>的输出<br><code>IntentService</code>每次启动，都会新建一个工作线程，但是始终只有一个<code>IntentService</code>的实例<br><img src="https://img-blog.csdnimg.cn/img_convert/96541771928df7750cc6cb645a88ca5b.png"><br>写在最后</p>
<ul>
<li>掌握Service基本知识点和使用😀</li>
<li>继续探索Service其他功能💪</li>
<li>本篇文章对你有用的话，记得点个赞👍</li>
<li>对本篇文章有任何问题，欢迎评论区指出💖</li>
</ul>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>Android笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Handler实现自动添加HelloCharts数据和自动跳转Fragment</title>
    <url>/2021/05/03/%E9%80%9A%E8%BF%87Handler%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0HelloCharts%E6%95%B0%E6%8D%AE%E5%92%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%ACFragment/</url>
    <content><![CDATA[<p>写在前面</p>
<p><strong>由于本人初学阶段，写这篇博客是总结所学的知识点，为后面的进阶打好基础</strong></p>
<p><strong>有任何关于代码和表述问题，欢迎评论区指出</strong></p>
<p>楼主最近老师要求做三个<code>Fragment</code>在一个<code>MainActivity</code>中实现自动跳转，每个<code>Fragment</code>中使用流行的图表开源API<code>HelloCharts</code>，每个<code>HelloCharts</code>都要自动添加数据，并显示当前的温度，湿度或PM值！</p>
<p>三个<code>Fragment</code>分别是</p>
<ul>
<li>温度曲线图</li>
<li>湿度曲线图</li>
<li>PM值曲线图</li>
</ul>
<p><strong>注意：楼主所用IDE是<code>Eclipse</code> ,<code>API21</code> ，虚拟机屏幕大小为<code>1280dp*720dp</code></strong></p>
<p><strong><code>HelloCharts需要导入jar包</code>，下载途径大家自己可以去找</strong></p>
<p><strong>所用到的颜色都可以在<a href="https://bbs.bianzhirensheng.com/color01.html?qq-pf-to=pcqq.group">颜色对照表</a>中参考到</strong></p>
<p>话不多说开始上代码</p>
<h2 id="1-界面布局"><a href="#1-界面布局" class="headerlink" title="1. 界面布局"></a>1. 界面布局</h2><p><strong>activity_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.zhuang.hellocharts.MainActivity&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;FrameLayout</span><br><span class="line">            android:id=&quot;@+id/frameLayout&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot; &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_humidity.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#90d7ec&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.zhuang.hellocharts.HumidityFragment&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView2&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;35dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">            android:drawableLeft=&quot;@drawable/humidity_off&quot;</span><br><span class="line">            android:text=&quot;Humidity实时湿度数据曲线图&quot;</span><br><span class="line">            android:textColor=&quot;#ed1941&quot;</span><br><span class="line">            android:textSize=&quot;25sp&quot;</span><br><span class="line">            android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;lecho.lib.hellocharts.view.LineChartView</span><br><span class="line">        android:id=&quot;@+id/humLineChartView&quot;</span><br><span class="line">        android:layout_width=&quot;900dp&quot;</span><br><span class="line">        android:layout_height=&quot;500dp&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:layout_marginTop=&quot;50dp&quot;</span><br><span class="line">        android:background=&quot;#fab27b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/textViewhum&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignBottom=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;272dp&quot;</span><br><span class="line">        android:layout_toRightOf=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:text=&quot;TextView&quot;</span><br><span class="line">        android:textColor=&quot;#ed1941&quot;</span><br><span class="line">        android:textSize=&quot;16sp&quot;</span><br><span class="line">        android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_pm.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ffe600&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.zhuang.hellocharts.PMFragment&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView2&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;35dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">            android:drawableLeft=&quot;@drawable/pm_off&quot;</span><br><span class="line">            android:text=&quot;PM2.5实时PM数据曲线图&quot;</span><br><span class="line">            android:textColor=&quot;#ed1941&quot;</span><br><span class="line">            android:textSize=&quot;20sp&quot;</span><br><span class="line">            android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;lecho.lib.hellocharts.view.LineChartView</span><br><span class="line">        android:id=&quot;@+id/pmLineChartView&quot;</span><br><span class="line">        android:layout_width=&quot;900dp&quot;</span><br><span class="line">        android:layout_height=&quot;500dp&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:layout_marginTop=&quot;50dp&quot;</span><br><span class="line">        android:background=&quot;#411445&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/textViewpm&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignBottom=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;272dp&quot;</span><br><span class="line">        android:layout_toRightOf=&quot;@+id/linearLayout1&quot;</span><br><span class="line">        android:text=&quot;TextView&quot;</span><br><span class="line">        android:textColor=&quot;#ed1941&quot;</span><br><span class="line">        android:textSize=&quot;16sp&quot;</span><br><span class="line">        android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_temperature.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#444693&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.zhuang.hellocharts.TemperatureFragment&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView2&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;35dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:drawableLeft=&quot;@drawable/temp_off&quot;</span><br><span class="line">            android:text=&quot;Temperature实时温度数据曲线图&quot;</span><br><span class="line">            android:textColor=&quot;#ed1941&quot;</span><br><span class="line">            android:textSize=&quot;18sp&quot;</span><br><span class="line">            android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView3&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;310dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:text=&quot;温度&quot;</span><br><span class="line">            android:textColor=&quot;#ed1941&quot;</span><br><span class="line">            android:textSize=&quot;16sp&quot;</span><br><span class="line">            android:textStyle=&quot;bold&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;lecho.lib.hellocharts.view.LineChartView</span><br><span class="line">        android:id=&quot;@+id/tempLineChartView&quot;</span><br><span class="line">        android:layout_width=&quot;900dp&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:layout_marginTop=&quot;50dp&quot;</span><br><span class="line">        android:background=&quot;#b4532a&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-Activity实现功能"><a href="#2-Activity实现功能" class="headerlink" title="2. Activity实现功能"></a>2. Activity实现功能</h2><p><strong>MainActivity</strong></p>
<ul>
<li><p>初始化<code>Fragment</code></p>
</li>
<li><p>这个界面将<code>Fragment</code>添加到<code>FrameLayout</code>中</p>
</li>
<li><p>实现通过<code>Handler</code>和<code>Thread</code>实现界面的自动切换，加几个if判断即可，想要自动，<code>Handler</code>可不能少</p>
</li>
<li><p><code>Handler</code>发消息，根据接收到的消息显示指定的<code>Fragment</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.hellocharts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czie.assessment.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	TextView tempTextView, humTextView, pmTextView;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	TemperatureFragment temperatureFragment;</span><br><span class="line">	HumidityFragment humidityFragment;</span><br><span class="line">	PMFragment pmFragment;</span><br><span class="line">	FragmentManager fragmentManager = getFragmentManager();</span><br><span class="line">	Fragment curFragment;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line">		initFragment();</span><br><span class="line">		showDifferentCharts();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将Fragment添加到指定布局</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		temperatureFragment = <span class="keyword">new</span> TemperatureFragment();</span><br><span class="line">		humidityFragment = <span class="keyword">new</span> HumidityFragment();</span><br><span class="line">		pmFragment = <span class="keyword">new</span> PMFragment();</span><br><span class="line"></span><br><span class="line">		FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">		transaction.add(R.id.frameLayout, temperatureFragment);</span><br><span class="line">		transaction.add(R.id.frameLayout, humidityFragment);</span><br><span class="line">		transaction.add(R.id.frameLayout, pmFragment);</span><br><span class="line">		showFragment(temperatureFragment);</span><br><span class="line">		transaction.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFragment</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (curFragment == fragment) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">		transaction.hide(temperatureFragment);</span><br><span class="line">		transaction.hide(humidityFragment);</span><br><span class="line">		transaction.hide(pmFragment);</span><br><span class="line">		transaction.show(fragment);</span><br><span class="line">		transaction.commit();</span><br><span class="line">		curFragment = fragment;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				showFragment(temperatureFragment);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				showFragment(humidityFragment);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				showFragment(pmFragment);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 来回切换</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDifferentCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span> (count == <span class="number">4</span>) &#123;</span><br><span class="line">						count = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						sleep(<span class="number">5000</span>);</span><br><span class="line">						handler.sendEmptyMessage(count);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-实现图表自动添加数据"><a href="#3-实现图表自动添加数据" class="headerlink" title="3. 实现图表自动添加数据"></a>3. 实现图表自动添加数据</h2><ul>
<li><p><code>HelloCharts</code>有关方法参考下列代码注释，很详细</p>
</li>
<li><p>首先肯定不用想，肯定用<code>Handler</code>和<code>Thread</code>来实现自动添加数据</p>
</li>
<li><p>用到集合和数组用来存放数据</p>
</li>
</ul>
<p><strong>分析下关键代码 以一个Fragment为例，其余都一样参考即可</strong></p>
<ul>
<li><strong>该方法就可以是X轴上的数据是以时间通过处理显示，不会重复</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] getXData(<span class="keyword">int</span> historysecond) &#123;</span><br><span class="line">		String historyDates[] = <span class="keyword">new</span> String[historysecond];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; historysecond; i++) &#123;</span><br><span class="line">			<span class="comment">// 获取时间</span></span><br><span class="line">			Calendar calendar = Calendar.getInstance();</span><br><span class="line">			<span class="comment">// 获取秒数</span></span><br><span class="line">			<span class="keyword">int</span> second = calendar.get(calendar.SECOND);</span><br><span class="line">			<span class="comment">// 获取分钟</span></span><br><span class="line">			<span class="keyword">int</span> mins = calendar.get(calendar.MINUTE);</span><br><span class="line">			historyDates[i] = String.format(<span class="string">&quot;%02d&quot;</span>, mins) + <span class="string">&quot;:&quot;</span></span><br><span class="line">					+ String.format(<span class="string">&quot;%02d&quot;</span>, second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> historyDates;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>该方法就是可以一直显示当前的温度，和保证集合的个数不会超过7</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readSensorData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">super</span>.run();</span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valus.length; i++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125;</span><br><span class="line">						axisTimeValues = getXData(<span class="number">8</span>);</span><br><span class="line">						sensorPointValuesList.add(valus[i]);</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (sensorPointValuesList.size() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">							sensorPointValuesList.remove(<span class="number">0</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// sensorPointValuesList.add(valus[i]);</span></span><br><span class="line">						handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在<code>Handler</code>里调用该方法，每次显示完数据后，就要清空一次X轴和Y轴的数据，不断往集合里添加数据</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mAxisValues.clear();</span><br><span class="line">		mPointValues.clear();</span><br><span class="line">		getAxisPoints();</span><br><span class="line">		getAxisXLables();</span><br><span class="line">		initLineChart(<span class="string">&quot;时间&quot;</span>, <span class="string">&quot;湿度&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HumidityFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.hellocharts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czie.assessment.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ContainerScrollType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ZoomType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Axis;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.AxisValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Line;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.LineChartData;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.PointValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.ValueShape;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Viewport;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.view.LineChartView;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HumidityFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> LineChartView lineChart;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x轴</span></span><br><span class="line">	String axisTimeValues[] = <span class="keyword">new</span> String[<span class="number">7</span>];</span><br><span class="line">	<span class="comment">// y轴</span></span><br><span class="line">	List&lt;Integer&gt; sensorPointValuesList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">int</span>[] valus = &#123; <span class="number">10</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> TextView textViewhum;</span><br><span class="line">	<span class="keyword">private</span> List&lt;PointValue&gt; mPointValues = <span class="keyword">new</span> ArrayList&lt;PointValue&gt;();</span><br><span class="line">	<span class="comment">// 存放x坐标轴上的数据的集合</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;AxisValue&gt; mAxisValues = <span class="keyword">new</span> ArrayList&lt;AxisValue&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">			Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> inflater.inflate(R.layout.fragment_humidity, container, <span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">		lineChart = (LineChartView) getActivity().findViewById(</span><br><span class="line">				R.id.humLineChartView);</span><br><span class="line">		textViewhum = (TextView) getActivity().findViewById(R.id.textViewhum);</span><br><span class="line">		readSensorData();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readSensorData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">super</span>.run();</span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valus.length; i++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125;</span><br><span class="line">						axisTimeValues = getXData(<span class="number">8</span>);</span><br><span class="line">						sensorPointValuesList.add(valus[i]);</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (sensorPointValuesList.size() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">							sensorPointValuesList.remove(<span class="number">0</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// sensorPointValuesList.add(valus[i]);</span></span><br><span class="line">						handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x数据的获取</span></span><br><span class="line">	<span class="keyword">public</span> String[] getXData(<span class="keyword">int</span> historysecond) &#123;</span><br><span class="line">		String historyDates[] = <span class="keyword">new</span> String[historysecond];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; historysecond; i++) &#123;</span><br><span class="line">			<span class="comment">// 获取时间</span></span><br><span class="line">			Calendar calendar = Calendar.getInstance();</span><br><span class="line">			<span class="comment">// 获取秒数</span></span><br><span class="line">			<span class="keyword">int</span> second = calendar.get(calendar.SECOND);</span><br><span class="line">			<span class="comment">// 获取分钟</span></span><br><span class="line">			<span class="keyword">int</span> mins = calendar.get(calendar.MINUTE);</span><br><span class="line">			historyDates[i] = String.format(<span class="string">&quot;%02d&quot;</span>, mins) + <span class="string">&quot;:&quot;</span></span><br><span class="line">					+ String.format(<span class="string">&quot;%02d&quot;</span>, second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> historyDates;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">			showCharts();</span><br><span class="line">			textViewhum.setText(<span class="string">&quot;当前湿度:&quot;</span> + flag + <span class="string">&quot;RH%&quot;</span>);</span><br><span class="line"></span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mAxisValues.clear();</span><br><span class="line">		mPointValues.clear();</span><br><span class="line">		getAxisPoints();</span><br><span class="line">		getAxisXLables();</span><br><span class="line">		initLineChart(<span class="string">&quot;时间&quot;</span>, <span class="string">&quot;湿度&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLineChart</span><span class="params">(String xName, String yName)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Line line = <span class="keyword">new</span> Line(mPointValues)</span><br><span class="line">				.setColor(Color.parseColor(<span class="string">&quot;#ef5b9c&quot;</span>)); <span class="comment">// 折线的颜色（橙色）</span></span><br><span class="line">		List&lt;Line&gt; lines = <span class="keyword">new</span> ArrayList&lt;Line&gt;();</span><br><span class="line">		line.setShape(ValueShape.DIAMOND); <span class="comment">// 折线图上每个数据的形状</span></span><br><span class="line">		line.setCubic(<span class="keyword">true</span>); <span class="comment">// 曲线是否平滑，即是曲线还是折线</span></span><br><span class="line">		line.setFilled(<span class="keyword">false</span>); <span class="comment">// 是否填充曲线的面积</span></span><br><span class="line">		line.setHasLabels(<span class="keyword">true</span>); <span class="comment">// 曲线的数据坐标是否加上备注</span></span><br><span class="line">		line.setHasLines(<span class="keyword">true</span>); <span class="comment">// 是否用线显示</span></span><br><span class="line">		line.setHasPoints(<span class="keyword">true</span>); <span class="comment">// 是否显示圆点</span></span><br><span class="line">		lines.add(line);</span><br><span class="line">		LineChartData data = <span class="keyword">new</span> LineChartData();</span><br><span class="line">		data.setLines(lines);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 坐标轴</span></span><br><span class="line">		Axis axisX = <span class="keyword">new</span> Axis(); <span class="comment">// x轴</span></span><br><span class="line">		axisX.setName(xName);</span><br><span class="line">		axisX.setHasTiltedLabels(<span class="keyword">true</span>); <span class="comment">// x轴字体是斜还是直</span></span><br><span class="line">		axisX.setTextColor(Color.WHITE); <span class="comment">// 字体颜色</span></span><br><span class="line">		axisX.setTextSize(<span class="number">10</span>); <span class="comment">// 字体大小</span></span><br><span class="line">		axisX.setMaxLabelChars(<span class="number">10</span>); <span class="comment">// 最多几个x轴坐标</span></span><br><span class="line">		axisX.setValues(mAxisValues); <span class="comment">// 填充x轴的坐标名称</span></span><br><span class="line">		data.setAxisXBottom(axisX); <span class="comment">// x轴在底部</span></span><br><span class="line">		axisX.setHasLines(<span class="keyword">true</span>); <span class="comment">// x轴分割线</span></span><br><span class="line"></span><br><span class="line">		Axis axisY = <span class="keyword">new</span> Axis(); <span class="comment">// y轴</span></span><br><span class="line">		axisY.setName(yName); <span class="comment">// y轴标注</span></span><br><span class="line">		axisY.setTextSize(<span class="number">10</span>);</span><br><span class="line">		data.setAxisYLeft(axisY); <span class="comment">// y轴在左边</span></span><br><span class="line">		<span class="comment">// 设置行为属性，支持缩放、滑动和平移</span></span><br><span class="line">		lineChart.setInteractive(<span class="keyword">true</span>);</span><br><span class="line">		lineChart.setZoomType(ZoomType.HORIZONTAL);</span><br><span class="line">		lineChart.setMaxZoom((<span class="keyword">float</span>) <span class="number">2</span>); <span class="comment">// 最大方法比例</span></span><br><span class="line">		lineChart.setContainerScrollEnabled(<span class="keyword">true</span>,</span><br><span class="line">				ContainerScrollType.HORIZONTAL);</span><br><span class="line">		lineChart.setLineChartData(data);</span><br><span class="line">		lineChart.setVisibility(View.VISIBLE);</span><br><span class="line">		Viewport v = <span class="keyword">new</span> Viewport(lineChart.getMaximumViewport());</span><br><span class="line">		<span class="comment">// y轴最高值</span></span><br><span class="line">		v.top = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">// y轴最低值</span></span><br><span class="line">		v.bottom = <span class="number">0</span>;</span><br><span class="line">		lineChart.setMaximumViewport(v);</span><br><span class="line">		v.left = <span class="number">0</span>;</span><br><span class="line">		v.right = <span class="number">7</span>;</span><br><span class="line">		lineChart.setCurrentViewport(v);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisXLables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axisTimeValues.length; i++) &#123;</span><br><span class="line">			mAxisValues.add(<span class="keyword">new</span> AxisValue(i).setLabel(axisTimeValues[i]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sensorPointValuesList.size(); i++) &#123;</span><br><span class="line">			mPointValues.add(<span class="keyword">new</span> PointValue(i, sensorPointValuesList.get(i)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>PMFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.hellocharts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czie.assessment.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ContainerScrollType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ZoomType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Axis;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.AxisValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Line;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.LineChartData;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.PointValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.ValueShape;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Viewport;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.view.LineChartView;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PMFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> LineChartView lineChart;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x轴</span></span><br><span class="line">	String axisTimeValues[] = <span class="keyword">new</span> String[<span class="number">7</span>];</span><br><span class="line">	<span class="comment">// y轴</span></span><br><span class="line">	List&lt;Integer&gt; sensorPointValuesList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">int</span>[] valus = &#123; <span class="number">20</span>, <span class="number">45</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">24</span>, <span class="number">36</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> TextView textViewpm;</span><br><span class="line">	<span class="keyword">private</span> List&lt;PointValue&gt; mPointValues = <span class="keyword">new</span> ArrayList&lt;PointValue&gt;();</span><br><span class="line">	<span class="comment">// 存放x坐标轴上的数据的集合</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;AxisValue&gt; mAxisValues = <span class="keyword">new</span> ArrayList&lt;AxisValue&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">			Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> inflater.inflate(R.layout.fragment_pm, container, <span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">		lineChart = (LineChartView) getActivity().findViewById(</span><br><span class="line">				R.id.pmLineChartView);</span><br><span class="line">		textViewpm = (TextView) getActivity().findViewById(R.id.textViewpm);</span><br><span class="line">		readSensorData();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readSensorData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">super</span>.run();</span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valus.length; i++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125;</span><br><span class="line">						axisTimeValues = getXData(<span class="number">8</span>);</span><br><span class="line">						sensorPointValuesList.add(valus[i]);</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (sensorPointValuesList.size() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">							sensorPointValuesList.remove(<span class="number">0</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// sensorPointValuesList.add(valus[i]);</span></span><br><span class="line">						handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x数据的获取</span></span><br><span class="line">	<span class="keyword">public</span> String[] getXData(<span class="keyword">int</span> historysecond) &#123;</span><br><span class="line">		String historyDates[] = <span class="keyword">new</span> String[historysecond];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; historysecond; i++) &#123;</span><br><span class="line">			<span class="comment">// 获取时间</span></span><br><span class="line">			Calendar calendar = Calendar.getInstance();</span><br><span class="line">			<span class="comment">// 获取秒数</span></span><br><span class="line">			<span class="keyword">int</span> second = calendar.get(calendar.SECOND);</span><br><span class="line">			<span class="comment">// 获取分钟</span></span><br><span class="line">			<span class="keyword">int</span> mins = calendar.get(calendar.MINUTE);</span><br><span class="line">			historyDates[i] = String.format(<span class="string">&quot;%02d&quot;</span>, mins) + <span class="string">&quot;:&quot;</span></span><br><span class="line">					+ String.format(<span class="string">&quot;%02d&quot;</span>, second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> historyDates;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">			showCharts();</span><br><span class="line">			textViewpm.setText(<span class="string">&quot;当前PM值:&quot;</span> + flag + <span class="string">&quot;ug/m3&quot;</span>);</span><br><span class="line"></span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mAxisValues.clear();</span><br><span class="line">		mPointValues.clear();</span><br><span class="line">		getAxisPoints();</span><br><span class="line">		getAxisXLables();</span><br><span class="line">		initLineChart(<span class="string">&quot;时间&quot;</span>, <span class="string">&quot;PM&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLineChart</span><span class="params">(String xName, String yName)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Line line = <span class="keyword">new</span> Line(mPointValues)</span><br><span class="line">				.setColor(Color.parseColor(<span class="string">&quot;#6d8346&quot;</span>)); <span class="comment">// 折线的颜色（橙色）</span></span><br><span class="line">		List&lt;Line&gt; lines = <span class="keyword">new</span> ArrayList&lt;Line&gt;();</span><br><span class="line">		line.setShape(ValueShape.CIRCLE); <span class="comment">// 折线图上每个数据的形状</span></span><br><span class="line">		line.setCubic(<span class="keyword">true</span>); <span class="comment">// 曲线是否平滑，即是曲线还是折线</span></span><br><span class="line">		line.setFilled(<span class="keyword">false</span>); <span class="comment">// 是否填充曲线的面积</span></span><br><span class="line">		line.setHasLabels(<span class="keyword">true</span>); <span class="comment">// 曲线的数据坐标是否加上备注</span></span><br><span class="line">		line.setHasLines(<span class="keyword">true</span>); <span class="comment">// 是否用线显示</span></span><br><span class="line">		line.setHasPoints(<span class="keyword">true</span>); <span class="comment">// 是否显示圆点</span></span><br><span class="line">		lines.add(line);</span><br><span class="line">		LineChartData data = <span class="keyword">new</span> LineChartData();</span><br><span class="line">		data.setLines(lines);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 坐标轴</span></span><br><span class="line">		Axis axisX = <span class="keyword">new</span> Axis(); <span class="comment">// x轴</span></span><br><span class="line">		axisX.setName(xName);</span><br><span class="line">		axisX.setHasTiltedLabels(<span class="keyword">true</span>); <span class="comment">// x轴字体是斜还是直</span></span><br><span class="line">		axisX.setTextColor(Color.WHITE); <span class="comment">// 字体颜色</span></span><br><span class="line">		axisX.setTextSize(<span class="number">10</span>); <span class="comment">// 字体大小</span></span><br><span class="line">		axisX.setMaxLabelChars(<span class="number">10</span>); <span class="comment">// 最多几个x轴坐标</span></span><br><span class="line">		axisX.setValues(mAxisValues); <span class="comment">// 填充x轴的坐标名称</span></span><br><span class="line">		data.setAxisXBottom(axisX); <span class="comment">// x轴在底部</span></span><br><span class="line">		axisX.setHasLines(<span class="keyword">true</span>); <span class="comment">// x轴分割线</span></span><br><span class="line"></span><br><span class="line">		Axis axisY = <span class="keyword">new</span> Axis(); <span class="comment">// y轴</span></span><br><span class="line">		axisY.setName(yName); <span class="comment">// y轴标注</span></span><br><span class="line">		axisY.setTextSize(<span class="number">10</span>);</span><br><span class="line">		data.setAxisYLeft(axisY); <span class="comment">// y轴在左边</span></span><br><span class="line">		<span class="comment">// 设置行为属性，支持缩放、滑动和平移</span></span><br><span class="line">		lineChart.setInteractive(<span class="keyword">true</span>);</span><br><span class="line">		lineChart.setZoomType(ZoomType.HORIZONTAL);</span><br><span class="line">		lineChart.setMaxZoom((<span class="keyword">float</span>) <span class="number">2</span>); <span class="comment">// 最大方法比例</span></span><br><span class="line">		lineChart.setContainerScrollEnabled(<span class="keyword">true</span>,</span><br><span class="line">				ContainerScrollType.HORIZONTAL);</span><br><span class="line">		lineChart.setLineChartData(data);</span><br><span class="line">		lineChart.setVisibility(View.VISIBLE);</span><br><span class="line">		Viewport v = <span class="keyword">new</span> Viewport(lineChart.getMaximumViewport());</span><br><span class="line">		<span class="comment">// y轴最高值</span></span><br><span class="line">		v.top = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">// y轴最低值</span></span><br><span class="line">		v.bottom = <span class="number">0</span>;</span><br><span class="line">		lineChart.setMaximumViewport(v);</span><br><span class="line">		v.left = <span class="number">0</span>;</span><br><span class="line">		v.right = <span class="number">7</span>;</span><br><span class="line">		lineChart.setCurrentViewport(v);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisXLables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axisTimeValues.length; i++) &#123;</span><br><span class="line">			mAxisValues.add(<span class="keyword">new</span> AxisValue(i).setLabel(axisTimeValues[i]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sensorPointValuesList.size(); i++) &#123;</span><br><span class="line">			mPointValues.add(<span class="keyword">new</span> PointValue(i, sensorPointValuesList.get(i)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TemperatureFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.hellocharts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czie.assessment.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ContainerScrollType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.gesture.ZoomType;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Axis;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.AxisValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Line;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.LineChartData;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.PointValue;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.ValueShape;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.model.Viewport;</span><br><span class="line"><span class="keyword">import</span> lecho.lib.hellocharts.view.LineChartView;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemperatureFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> LineChartView lineChart;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x轴</span></span><br><span class="line">	String axisTimeValues[] = <span class="keyword">new</span> String[<span class="number">7</span>];</span><br><span class="line">	<span class="comment">// y轴</span></span><br><span class="line">	List&lt;Integer&gt; sensorPointValuesList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">int</span>[] valus = &#123; <span class="number">50</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">45</span>, <span class="number">78</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;PointValue&gt; mPointValues = <span class="keyword">new</span> ArrayList&lt;PointValue&gt;();</span><br><span class="line">	<span class="comment">// 存放x坐标轴上的数据的集合</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;AxisValue&gt; mAxisValues = <span class="keyword">new</span> ArrayList&lt;AxisValue&gt;();</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> TextView textView3;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">			Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> inflater</span><br><span class="line">				.inflate(R.layout.fragment_temperature, container, <span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">		lineChart = (LineChartView) getActivity().findViewById(</span><br><span class="line">				R.id.tempLineChartView);</span><br><span class="line">		textView3 = (TextView) getActivity().findViewById(R.id.textView3);</span><br><span class="line">		readSensorData();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readSensorData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">super</span>.run();</span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valus.length; i++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							flag = valus[i];</span><br><span class="line">						&#125;</span><br><span class="line">						axisTimeValues = getXData(<span class="number">8</span>);</span><br><span class="line">						sensorPointValuesList.add(valus[i]);</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (sensorPointValuesList.size() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">							sensorPointValuesList.remove(<span class="number">0</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// sensorPointValuesList.add(valus[i]);</span></span><br><span class="line"></span><br><span class="line">						handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// x数据的获取</span></span><br><span class="line">	<span class="keyword">public</span> String[] getXData(<span class="keyword">int</span> historysecond) &#123;</span><br><span class="line">		String historyDates[] = <span class="keyword">new</span> String[historysecond];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; historysecond; i++) &#123;</span><br><span class="line">			<span class="comment">// 获取时间</span></span><br><span class="line">			Calendar calendar = Calendar.getInstance();</span><br><span class="line">			<span class="comment">// 获取秒数</span></span><br><span class="line">			<span class="keyword">int</span> second = calendar.get(calendar.SECOND);</span><br><span class="line">			<span class="comment">// 获取分钟</span></span><br><span class="line">			<span class="keyword">int</span> mins = calendar.get(calendar.MINUTE);</span><br><span class="line">			historyDates[i] = String.format(<span class="string">&quot;%02d&quot;</span>, mins) + <span class="string">&quot;:&quot;</span></span><br><span class="line">					+ String.format(<span class="string">&quot;%02d&quot;</span>, second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> historyDates;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">			showCharts();</span><br><span class="line">			textView3.setText(<span class="string">&quot;当前温度:&quot;</span> + flag + <span class="string">&quot;℃&quot;</span>);</span><br><span class="line"></span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mAxisValues.clear();</span><br><span class="line">		mPointValues.clear();</span><br><span class="line">		getAxisPoints();</span><br><span class="line">		getAxisXLables();</span><br><span class="line">		initLineChart(<span class="string">&quot;时间&quot;</span>, <span class="string">&quot;温度&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLineChart</span><span class="params">(String xName, String yName)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Line line = <span class="keyword">new</span> Line(mPointValues)</span><br><span class="line">				.setColor(Color.parseColor(<span class="string">&quot;#d71345&quot;</span>)); <span class="comment">// 折线的颜色（红色）</span></span><br><span class="line">		List&lt;Line&gt; lines = <span class="keyword">new</span> ArrayList&lt;Line&gt;();</span><br><span class="line">		line.setShape(ValueShape.SQUARE); <span class="comment">// 折线图上每个数据的形状</span></span><br><span class="line">		line.setCubic(<span class="keyword">true</span>); <span class="comment">// 曲线是否平滑，即是曲线还是折线</span></span><br><span class="line">		line.setFilled(<span class="keyword">false</span>); <span class="comment">// 是否填充曲线的面积</span></span><br><span class="line">		line.setHasLabels(<span class="keyword">true</span>); <span class="comment">// 曲线的数据坐标是否加上备注</span></span><br><span class="line">		line.setHasLines(<span class="keyword">true</span>); <span class="comment">// 是否用线显示</span></span><br><span class="line">		line.setHasPoints(<span class="keyword">true</span>); <span class="comment">// 是否显示圆点</span></span><br><span class="line">		lines.add(line);</span><br><span class="line">		LineChartData data = <span class="keyword">new</span> LineChartData();</span><br><span class="line">		data.setLines(lines);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 坐标轴</span></span><br><span class="line">		Axis axisX = <span class="keyword">new</span> Axis(); <span class="comment">// x轴</span></span><br><span class="line">		axisX.setName(xName);</span><br><span class="line">		axisX.setHasTiltedLabels(<span class="keyword">true</span>); <span class="comment">// x轴字体是斜还是直</span></span><br><span class="line">		axisX.setTextColor(Color.WHITE); <span class="comment">// 字体颜色</span></span><br><span class="line">		axisX.setTextSize(<span class="number">10</span>); <span class="comment">// 字体大小</span></span><br><span class="line">		axisX.setMaxLabelChars(<span class="number">10</span>); <span class="comment">// 最多几个x轴坐标</span></span><br><span class="line">		axisX.setValues(mAxisValues); <span class="comment">// 填充x轴的坐标名称</span></span><br><span class="line">		data.setAxisXBottom(axisX); <span class="comment">// x轴在底部</span></span><br><span class="line">		axisX.setHasLines(<span class="keyword">true</span>); <span class="comment">// x轴分割线</span></span><br><span class="line"></span><br><span class="line">		Axis axisY = <span class="keyword">new</span> Axis(); <span class="comment">// y轴</span></span><br><span class="line">		axisY.setName(yName); <span class="comment">// y轴标注</span></span><br><span class="line">		axisY.setTextSize(<span class="number">10</span>);</span><br><span class="line">		data.setAxisYLeft(axisY); <span class="comment">// y轴在左边</span></span><br><span class="line">		<span class="comment">// 设置行为属性，支持缩放、滑动和平移</span></span><br><span class="line">		lineChart.setInteractive(<span class="keyword">true</span>);</span><br><span class="line">		lineChart.setZoomType(ZoomType.HORIZONTAL);</span><br><span class="line">		lineChart.setMaxZoom((<span class="keyword">float</span>) <span class="number">2</span>); <span class="comment">// 最大方法比例</span></span><br><span class="line">		lineChart.setContainerScrollEnabled(<span class="keyword">true</span>,</span><br><span class="line">				ContainerScrollType.HORIZONTAL);</span><br><span class="line">		lineChart.setLineChartData(data);</span><br><span class="line">		lineChart.setVisibility(View.VISIBLE);</span><br><span class="line">		Viewport v = <span class="keyword">new</span> Viewport(lineChart.getMaximumViewport());</span><br><span class="line">		<span class="comment">// y轴最高值</span></span><br><span class="line">		v.top = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">// y轴最低值</span></span><br><span class="line">		v.bottom = <span class="number">0</span>;</span><br><span class="line">		lineChart.setMaximumViewport(v);</span><br><span class="line">		v.left = <span class="number">0</span>;</span><br><span class="line">		v.right = <span class="number">7</span>;</span><br><span class="line">		lineChart.setCurrentViewport(v);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisXLables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; axisTimeValues.length; i++) &#123;</span><br><span class="line">			mAxisValues.add(<span class="keyword">new</span> AxisValue(i).setLabel(axisTimeValues[i]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAxisPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sensorPointValuesList.size(); i++) &#123;</span><br><span class="line">			mPointValues.add(<span class="keyword">new</span> PointValue(i, sensorPointValuesList.get(i)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后通过简单动图来看下效果</strong><br><a href="https://imgtu.com/i/2Ja8eS"><img src="https://img-blog.csdnimg.cn/img_convert/c1e6888749fba3a1e4bd8d0803584273.gif" alt="2Ja8eS.gif"></a><br><strong>总结</strong></p>
<ul>
<li>布局做的有点简单😊,在实现功能的基础上再美化就更好了</li>
<li>还有许多不足的地方仍需努力💪，比如代码优化，对<code>Hellocharts</code>熟练运用</li>
</ul>
<p><strong>写在最后</strong></p>
<ul>
<li>有任何错误欢迎评论区指出，及时改正！</li>
</ul>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>Android笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio仿QQ界面实现简单的功能</title>
    <url>/2021/05/01/Android%20Studio%E4%BB%BFQQ%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>写在前面</p>
<p><strong>由于本人初学阶段，写这篇博客是总结所学的知识点，为后面的进阶打好基础</strong></p>
<p><strong>有任何关于代码和表述问题，欢迎评论区指出</strong></p>
<p>楼主近期在学习关于安卓中<code>Fragment</code>和<code>ListView</code>中的知识，按照老师的要求模仿一下QQ界面 要求功能</p>
<ul>
<li>有登录界面<ul>
<li>密码不对提示密码不对</li>
<li>账号密码任一为空提示用户不能为空</li>
<li>登录成功提示登录成功</li>
<li>可以实现账号密码记住功能</li>
</ul>
</li>
<li>有三个界面可以点击底部按钮实现页面的切换<ul>
<li>实现按钮选中状态和未选中状态不一样</li>
<li>联系人界面</li>
<li>信息界面</li>
<li>状态界面</li>
</ul>
</li>
<li>发送信息功能<ul>
<li>点击信息界面中的任意消息可以进入发消息界面</li>
<li>可以实现点击发送按钮将所输入的文字显示在屏幕中</li>
</ul>
</li>
</ul>
<p><strong>提示：</strong>本人用的<strong>IDE开发环境</strong>是<code>Android Studio</code> <strong>API</strong>是<code>30</code></p>
<p><strong>目录结构一览</strong></p>
<p><img src="https://pic.imgdb.cn/item/60d5321c844ef46bb21d7ed7.png"></p>
<p><strong>res中的文件</strong></p>
<p><img src="https://pic.imgdb.cn/item/60d5325f844ef46bb21f06f8.png"></p>
<h2 id="1-登录界面"><a href="#1-登录界面" class="headerlink" title="1. 登录界面"></a>1. 登录界面</h2><ul>
<li>登录界面的布局文件</li>
</ul>
<p><strong>activity_main.xml</strong></p>
<p>所用图标都可以在阿里巴巴图标网找到<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">        android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        tools:ignore=&quot;UselessParent&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:drawableLeft=&quot;@drawable/qq&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginTop=&quot;50dp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;120dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;QQ&quot;</span><br><span class="line">            android:textColor=&quot;#000000&quot;</span><br><span class="line">            android:textSize=&quot;35sp&quot;</span><br><span class="line">            app:drawableStartCompat=&quot;@drawable/qq&quot;</span><br><span class="line">            android:drawableStart=&quot;@drawable/qq&quot;</span><br><span class="line">            tools:ignore=&quot;UseCompatTextViewDrawableXml&quot;</span><br><span class="line">            android:layout_marginStart=&quot;120dp&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/userNameEditText&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginTop=&quot;100dp&quot;</span><br><span class="line">            android:hint=&quot;请输入用户名/账号/手机号&quot;</span><br><span class="line">            android:inputType=&quot;text&quot;</span><br><span class="line">            android:padding=&quot;5dp&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/passwordEditText&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginTop=&quot;40dp&quot;</span><br><span class="line">            android:hint=&quot;请输入密码&quot;</span><br><span class="line">            android:inputType=&quot;textPassword&quot;</span><br><span class="line">            android:padding=&quot;5dp&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line">        &lt;ImageButton</span><br><span class="line">            android:id=&quot;@+id/loginButton&quot;</span><br><span class="line">            android:layout_marginTop=&quot;60dp&quot;</span><br><span class="line">            android:layout_gravity=&quot;center&quot;</span><br><span class="line">            android:layout_width=&quot;60dp&quot;</span><br><span class="line">            android:layout_height=&quot;60dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/login&quot;</span><br><span class="line">            android:background=&quot;#fff&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ImageButton</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所对应的<code>MainActivity</code></p>
<ul>
<li>其中的判断通过if语句判断用户是否输入和输入正确</li>
<li>提示 通过<code>Toast</code>的方式提示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> EditText userNameEditText, passwordEditText;</span><br><span class="line">    <span class="keyword">private</span> ImageButton loginButton;</span><br><span class="line">    <span class="keyword">private</span> ShareHelper shareHelper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        context=<span class="keyword">this</span>;</span><br><span class="line">        shareHelper=<span class="keyword">new</span> ShareHelper(context);</span><br><span class="line">        initview();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initview</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userNameEditText = findViewById(R.id.userNameEditText);</span><br><span class="line">        passwordEditText = findViewById(R.id.passwordEditText);</span><br><span class="line">        loginButton = findViewById(R.id.loginButton);</span><br><span class="line">        loginButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//进行登录页面的处理</span></span><br><span class="line">                String username = userNameEditText.getText().toString();</span><br><span class="line">                String password = passwordEditText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (username.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (username.equals(<span class="string">&quot;zk&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (password.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (password.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">                                <span class="comment">// 对账号和密码进行保存</span></span><br><span class="line">                                shareHelper.save(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">                                shareHelper.save(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">                                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, HomeActivity.class));</span><br><span class="line">                                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;登录成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;密码不正确&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;请填写密码&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;用户名不正确&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;请填写用户名&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        userNameEditText.setText(shareHelper.read(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        passwordEditText.setText(shareHelper.read(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-记住密码功能"><a href="#2-记住密码功能" class="headerlink" title="2. 记住密码功能"></a>2. 记住密码功能</h2><ul>
<li>实现第一次登录成功后，再次登录会记住账号和密码的功能</li>
</ul>
<p>这个功能我们用<code>SharedPreferences</code></p>
<p>简单了解下什么是SharedPreferences</p>
<ul>
<li>SharedPreferences是Android平台上一个轻量级的存储辅助类，用来保存应用的一些常用配置，它提供了string，set，int，long，float，boolean六种数据类型。最终数据是以xml形式进行存储。在应用中通常做一些简单数据的持久化缓存。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//两个功能 保存，读取</span></span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShareHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShareHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">&quot;iot1921&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//创建一个输入值</span></span><br><span class="line">        SharedPreferences.Editor editor = sharedPreferences.edit();</span><br><span class="line">        editor.putString(key, value);</span><br><span class="line">        editor.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">&quot;iot1921&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getString(key, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>输入值记得提交，editor.commit();</li>
<li>在<code>MainACtivity</code>中记得在OnStart方法中使用ShareHelper.read传入需要记住的值！</li>
</ul>
<p>预览一下成果！</p>
<p><img src="https://pic.imgdb.cn/item/60d53291844ef46bb2202f2b.gif"></p>
<h2 id="3-Fragment界面跳转"><a href="#3-Fragment界面跳转" class="headerlink" title="3. Fragment界面跳转"></a>3. Fragment界面跳转</h2><p>这里有三个Fragment，所对应需要三个fragment布局界面</p>
<ul>
<li>首先要创建3个按钮的切换xml</li>
</ul>
<p><strong>message.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/message_on&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/message_off&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>people.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/people_on&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/people_off&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>statue.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/statue_on&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/statue_off&quot;</span> <span class="attr">android:state_selected</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在布局界面中使用</p>
<p><strong>activity_home.xml</strong></p>
<p>这个界面的布局可以随意发挥，本人做的比较简单，见谅</p>
<ul>
<li>3个<code>ImageView</code>和1个<code>FrameLayout</code></li>
<li><code>ImageView</code>分别绑定点击事件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:layout_width=&quot;50dp&quot;</span><br><span class="line">            android:layout_height=&quot;50dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/basketball&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;Upcoming&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;50dp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;250dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:text=&quot;+  -&quot;</span><br><span class="line">            android:textSize=&quot;25sp&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;FrameLayout</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:id=&quot;@+id/frameLayout&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;550dp&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/messageImageView&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;60dp&quot;</span><br><span class="line">        android:background=&quot;@drawable/message&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:layout_marginStart=&quot;0dp&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/peopleImageView&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;150dp&quot;</span><br><span class="line">        android:background=&quot;@drawable/people&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:layout_marginStart=&quot;150dp&quot;</span><br><span class="line">        tools:ignore=&quot;ContentDescription&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/statueImageView&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;170dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/statue&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:layout_marginStart=&quot;170dp&quot;</span><br><span class="line">            tools:ignore=&quot;ContentDescription&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-Fragement的界面编写"><a href="#3-1-Fragement的界面编写" class="headerlink" title="3.1 Fragement的界面编写"></a>3.1 Fragement的界面编写</h3><p><strong>item_listview.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/backgrounds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ListView</span><br><span class="line">        android:id=&quot;@+id/messagelistView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_message.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/backgrounds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ListView</span><br><span class="line">        android:id=&quot;@+id/messagelistView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_people.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textSize=&quot;30sp&quot;</span><br><span class="line">        android:textColor=&quot;#000000&quot;</span><br><span class="line">        android:text=&quot;这是联系人页面&quot;</span><br><span class="line">        tools:ignore=&quot;MissingConstraints&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fragment_statue.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textSize=&quot;30sp&quot;</span><br><span class="line">        android:textColor=&quot;#000000&quot;</span><br><span class="line">        android:text=&quot;这是动态页面&quot;</span><br><span class="line">        tools:ignore=&quot;MissingConstraints&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Fragment布局写完就是重点如何在<code>FrameLayout</code>中加载</p>
<p>我们还需要创建布局所对应的Fragment</p>
<p><strong>每个Fragment要指定加载的布局和调用的方法</strong></p>
<blockquote>
<p>**onCreateView()**：每次创建、绘制该Fragment的View组件时回调该方法，Fragment将会显示该方法返回的View组件。<br>**onActivityCreated()**：当Fragment所在的Activity被启动完成后回调该方法。</p>
</blockquote>
<p>在这个文件中需要实现</p>
<ul>
<li>点击进入聊天界面</li>
<li>可以发送消息显示在屏幕上</li>
</ul>
<p>我们通过<code>List</code>集合中存放<code>Map</code></p>
<p><code>Map</code>中所存放的Key就是所创建的<code>Names</code>数组，Value就是<code>Images</code>数组</p>
<p>通过创建SimpleAdapter对象来加载<code>fragment_message</code></p>
<p><strong>讲下这三行关键的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载在哪个布局界面</span></span><br><span class="line">messagelistView= getActivity().findViewById(R.id.messagelistView);</span><br><span class="line"><span class="comment">//适配器中的参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">context 上下文</span></span><br><span class="line"><span class="comment">dataList 集合中存放的值</span></span><br><span class="line"><span class="comment">R.layout.item_listview 加载的布局界面</span></span><br><span class="line"><span class="comment">new String[]&#123;&quot;Name&quot;,&quot;Image&quot;&#125; String数组 </span></span><br><span class="line"><span class="comment">new int[]&#123;R.id.NameTextView,R.id.ImageView&#125; int数组 获取id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        simpleAdapter=<span class="keyword">new</span> SimpleAdapter(context,dataList,R.layout.item_listview,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;Image&quot;</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.id.NameTextView,R.id.ImageView&#125;);</span><br><span class="line"><span class="comment">//加载适配器</span></span><br><span class="line">        messagelistView.setAdapter(simpleAdapter);</span><br></pre></td></tr></table></figure>

<p>一个获取数据的方法<code>getData()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list获取数据</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//遍历数组中的数据 添加到list中</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Names.length; i++) &#123;</span><br><span class="line">           <span class="comment">//新建map 存放数组中的数据 最后存放在list中</span></span><br><span class="line">           HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">           map.put(<span class="string">&quot;Name&quot;</span>,Names[i]);</span><br><span class="line">           map.put(<span class="string">&quot;Image&quot;</span>,Images[i]);</span><br><span class="line">           dataList.add(map);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>MessageFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.SimpleAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> ListView messagelistView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; dataList=<span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">    String [] Names=&#123;<span class="string">&quot;一号&quot;</span>,<span class="string">&quot;二号&quot;</span>,<span class="string">&quot;三号&quot;</span>,<span class="string">&quot;四号&quot;</span>,<span class="string">&quot;五号&quot;</span>,<span class="string">&quot;六号&quot;</span>,<span class="string">&quot;七号&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> [] Images=&#123;R.mipmap.kaochang,R.mipmap.kaojitui,R.mipmap.kaojichi,R.mipmap.kaoqiezi,R.mipmap.kaolajiao,R.mipmap.kaojinzhengu ,R.mipmap.kaonanguabing&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建SimpleAdapter对象</span></span><br><span class="line">    <span class="keyword">private</span> SimpleAdapter simpleAdapter;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_message,container,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        context=getActivity();</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        messagelistView= getActivity().findViewById(R.id.messagelistView);</span><br><span class="line">        getData();</span><br><span class="line">        simpleAdapter=<span class="keyword">new</span> SimpleAdapter(context,dataList,R.layout.item_listview,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;Image&quot;</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.id.NameTextView,R.id.ImageView&#125;);</span><br><span class="line">        messagelistView.setAdapter(simpleAdapter);</span><br><span class="line">        <span class="comment">//listView的项点击监听事件</span></span><br><span class="line">        messagelistView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> i, <span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取当前项的数据</span></span><br><span class="line">                String name=dataList.get(i).get(<span class="string">&quot;Name&quot;</span>).toString();</span><br><span class="line">                Intent intent=<span class="keyword">new</span> Intent(getActivity(),TalkActivity.class);</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(getActivity(), TalkActivity.class));</span><br><span class="line">                intent.putExtra(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">                Toast.makeText(context,<span class="string">&quot;当前点击的选项名称是&quot;</span>+name,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历数组中的数据 添加到list中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Names.length; i++) &#123;</span><br><span class="line">            <span class="comment">//新建map 存放数组中的数据 最后存放在list中</span></span><br><span class="line">            HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;Name&quot;</span>,Names[i]);</span><br><span class="line">            map.put(<span class="string">&quot;Image&quot;</span>,Images[i]);</span><br><span class="line">            dataList.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PeopleFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_people,container,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StatueFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatueFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_statue,container,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在<code>HomeActivity</code>中使用</p>
<p>了解什么是<code>FragmentTransaction</code></p>
<blockquote>
<p>使用Fragment时，可以通过用户交互来执行一些动作，比如增加、移除、替换等。</p>
<p>所有这些改变构成一个集合，这个集合被叫做一个transaction</p>
</blockquote>
<p><strong>HomeActivity</strong></p>
<ul>
<li>监听<code>ImgaeView</code>的点击事件</li>
<li>初始化<code>ImageView</code>的选中状态为false 通过方法传入参数从而判断哪个<code>ImageView</code>被点击 将被点击的状态设为false</li>
<li><code>showFragment(Fragment fragment)</code>中通过隐藏<code>Fragment</code>，点击<code>ImageView</code>时再判断显示哪个<code>Fragment</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImageView messageImageView, peopleImageView, statueImageView;</span><br><span class="line">    <span class="keyword">private</span> MessageFragment messageFragment;</span><br><span class="line">    <span class="keyword">private</span> PeopleFragment peopleFragment;</span><br><span class="line">    <span class="keyword">private</span> StatueFragment statueFragment;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FragmentManager fragmentManager = getFragmentManager();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_home);</span><br><span class="line">        initView();</span><br><span class="line">        initFragment();</span><br><span class="line">        showFragment(statueFragment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        messageImageView = findViewById(R.id.messageImageView);</span><br><span class="line">        peopleImageView = findViewById(R.id.peopleImageView);</span><br><span class="line">        statueImageView = findViewById(R.id.statueImageView);</span><br><span class="line">        messageImageView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        peopleImageView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        statueImageView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        messageFragment = <span class="keyword">new</span> MessageFragment();</span><br><span class="line">        peopleFragment = <span class="keyword">new</span> PeopleFragment();</span><br><span class="line">        statueFragment = <span class="keyword">new</span> StatueFragment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//展示</span></span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        transaction.add(R.id.frameLayout, messageFragment);</span><br><span class="line">        transaction.add(R.id.frameLayout, peopleFragment);</span><br><span class="line">        transaction.add(R.id.frameLayout, statueFragment);</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.id.messageImageView:</span><br><span class="line">                init(messageImageView);</span><br><span class="line">                showFragment(messageFragment);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.peopleImageView:</span><br><span class="line">                init(peopleImageView);</span><br><span class="line">                showFragment(peopleFragment);</span><br><span class="line">                <span class="comment">//startActivity(new Intent(HomeActivity.this, ListViewActivity.class));</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.statueImageView:</span><br><span class="line">                init(statueImageView);</span><br><span class="line">                showFragment(statueFragment);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ImageView imageView)</span> </span>&#123;</span><br><span class="line">        messageImageView.setSelected(<span class="keyword">false</span>);</span><br><span class="line">        peopleImageView.setSelected(<span class="keyword">false</span>);</span><br><span class="line">        statueImageView.setSelected(<span class="keyword">false</span>);</span><br><span class="line">        imageView.setSelected(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示指定的Fragment</span></span><br><span class="line">    <span class="comment">//定义当前页面</span></span><br><span class="line">    <span class="keyword">private</span> Fragment curFragment = <span class="keyword">new</span> Fragment();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFragment</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果当前的fragment与传入的fragment是同一个，呢么将返回</span></span><br><span class="line">        <span class="keyword">if</span> (curFragment.equals(fragment)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        transaction.hide(messageFragment);</span><br><span class="line">        transaction.hide(peopleFragment);</span><br><span class="line">        transaction.hide(statueFragment);</span><br><span class="line">        transaction.show(fragment);</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ul>
<li>记得 <code>transaction</code>要commit</li>
</ul>
<p>预览一下成果!</p>
<p><img src="https://pic.imgdb.cn/item/60d532be844ef46bb221409f.gif"></p>
<h2 id="4-聊天界面"><a href="#4-聊天界面" class="headerlink" title="4. 聊天界面"></a>4. 聊天界面</h2><p><strong>item_talking.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/talkTextView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;300dp&quot;</span><br><span class="line">        android:text=&quot;烤肠&quot;</span><br><span class="line">        android:textSize=&quot;25sp&quot;</span><br><span class="line">        android:textColor=&quot;#000000&quot;</span><br><span class="line">        android:background=&quot;#cef&quot;</span><br><span class="line">        android:layout_marginStart=&quot;300dp&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/ImageView&quot;</span><br><span class="line">        android:layout_width=&quot;50dp&quot;</span><br><span class="line">        android:layout_height=&quot;50dp&quot;</span><br><span class="line">        android:background=&quot;@mipmap/kaochang&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>activity_talk.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:textColor=&quot;#000000&quot;</span><br><span class="line">            android:text=&quot;康小庄&quot;</span><br><span class="line">            android:id=&quot;@+id/NameTextView&quot;</span><br><span class="line">            android:background=&quot;#44cef6&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">    &lt;ListView</span><br><span class="line">        android:id=&quot;@+id/listView2&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;600dp&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:orientation=&quot;horizontal&quot;</span><br><span class="line">            android:layout_gravity=&quot;bottom&quot;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:id=&quot;@+id/inputEditText&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;match_parent&quot;</span><br><span class="line">                android:layout_weight=&quot;1&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/sendButton&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;match_parent&quot;</span><br><span class="line">                android:layout_weight=&quot;3&quot;</span><br><span class="line">                android:text=&quot;发送&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>TalkActivity</strong></p>
<ul>
<li>通过<code>Handler</code>来实现消息发出去之后 对话框置为<code>null</code></li>
<li>通过<code>simpleAdapter</code>实现加载到哪个布局界面的id</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czie.qq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.SimpleAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText inputEditText;</span><br><span class="line">    <span class="keyword">private</span> SimpleAdapter simpleAdapter;</span><br><span class="line">    List&lt;Map&lt;String,String&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;Map&lt;String,String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_talk);</span><br><span class="line">        Context context = <span class="keyword">this</span>;</span><br><span class="line">        initView();</span><br><span class="line">        TextView nameTextView = findViewById(R.id.NameTextView);</span><br><span class="line">        Intent intent=getIntent();</span><br><span class="line">        String name=intent.getStringExtra(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameTextView.setText(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inputEditText=findViewById(R.id.inputEditText);</span><br><span class="line">        Button sendButton = findViewById(R.id.sendButton);</span><br><span class="line">        ListView listView2 = findViewById(R.id.listView2);</span><br><span class="line">        listView2.setDivider(<span class="keyword">null</span>);</span><br><span class="line">        simpleAdapter=<span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,list,R.layout.item_talking,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;message&quot;</span>&#125;,<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.id.talkTextView&#125;);</span><br><span class="line">        listView2.setAdapter(simpleAdapter);</span><br><span class="line">        sendButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        sendMessage();</span><br><span class="line">        handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String message=inputEditText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (message.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line">            list.add(map);</span><br><span class="line">            inputEditText.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Handler handler=<span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            simpleAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://pic.imgdb.cn/item/60d532d1844ef46bb221b0c4.gif"></p>
<p><strong>总结：</strong></p>
<ul>
<li>学会了简单的页面跳转功能，提高思考的能力，学会如何用较少代码实现功能</li>
<li>还有许多不足仍需努力</li>
</ul>
<p><strong>写在最后：</strong></p>
<ul>
<li>有任何错误欢迎评论区指出，及时改正！</li>
</ul>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>Android笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/2021/04/29/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>学习地址：<a href="https://www.bilibili.com/video/BV17j411f74d">2019年coderwhy vue-vuejs从入门到精通教程_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></strong></p>
<p><strong>写在前面：学习的版本不同，有些语法在新版本已经废弃，具体详解参考官方文档！</strong></p>
<p><strong>官方文档：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></strong></p>
<p><strong>最后感谢coderwhy老师的讲解视频！十分感谢！</strong></p>
<h1 id="1，什么是Vue"><a href="#1，什么是Vue" class="headerlink" title="1，什么是Vue"></a>1，什么是Vue</h1><ul>
<li><p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。</p>
</li>
<li><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p>
</li>
<li><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
</li>
</ul>
<p><strong>学习前需要有前端三大件的基础 html，css，JavaScript</strong></p>
<h2 id="1-1-Vue第一个程序"><a href="#1-1-Vue第一个程序" class="headerlink" title="1.1 Vue第一个程序"></a>1.1 Vue第一个程序</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// let(变量）/const（常量）</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 编程范式：声明式编程</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建Vue对象的时候，传入了一些option:&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#123;&#125;中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 很明显，这里是挂载到了id为app的元素上</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#123;&#125;中包含了data属性：该属性中通常会存储一些数据</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 这些数据可以是我们直接定义出来的，比如像上面这样</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 也可能是来自网络，从服务器加载的</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,<span class="comment">//用于挂载管理的元素</span></span></span><br><span class="line"><span class="javascript">    data:&#123;<span class="comment">//定义数据</span></span></span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">//传统js的做法（编程范式：命令式编程）</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//1.创建div元素，设置id属性</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//2.定义一个变量叫message</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//3.message变量放在前面的div元素中显示</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-33-57.png"></p>
<h2 id="1-2-列表的案例"><a href="#1-2-列表的案例" class="headerlink" title="1.2 列表的案例"></a>1.2 列表的案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      movies:[<span class="string">&quot;速度与激情&quot;</span>,<span class="string">&quot;海贼王&quot;</span>,<span class="string">&quot;盗墓笔记&quot;</span>,<span class="string">&quot;成龙历险记&quot;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-34-24.png"></p>
<h2 id="1-3-计算器案例"><a href="#1-3-计算器案例" class="headerlink" title="1.3 计算器案例"></a>1.3 计算器案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">      counter:0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      add:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;add被执行&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter++</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//减法</span></span></span><br><span class="line"><span class="javascript">      sub:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;sub被执行&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter--</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-34-47.png"></p>
<h2 id="1-5-Vue中MVMM"><a href="#1-5-Vue中MVMM" class="headerlink" title="1.5 Vue中MVMM"></a>1.5 Vue中MVMM</h2><p>计数器的MVVM</p>
<ul>
<li><p>我们的计数器中就有严格的MVVM思想</p>
</li>
<li><p>View依然是我们的DOM</p>
</li>
<li><p>Model就是我们我们抽离出来的obj</p>
</li>
<li><p>ViewModel就是我们创建的Vue对象实例</p>
</li>
</ul>
<p>它们之间如何工作呢？</p>
<ul>
<li><p>首先ViewModel通过Data Binding让obj中的数据实时的在DOM中显示。</p>
</li>
<li><p>其次ViewModel通过DOM Listener来监听DOM事件，并且通过methods中的操作，来改变obj中的数据。</p>
</li>
<li><p>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</p>
</li>
</ul>
<p><strong>创建Vue实例传入的options</strong></p>
<p>创建vue实例的时候，传入一个对象options</p>
<p><strong>el:</strong> </p>
<ul>
<li><p>类型：string | HTMLElement</p>
</li>
<li><p>作用：决定之后Vue实例会管理哪一个DOM。</p>
</li>
</ul>
<p><strong>data:</strong> </p>
<ul>
<li><p>类型：Object | Function （组件当中data必须是一个函数）</p>
</li>
<li><p>作用：Vue实例对应的数据对象。</p>
</li>
</ul>
<p><strong>methods:</strong> </p>
<ul>
<li><p>类型：{ [key: string]: Function }</p>
</li>
<li><p>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p>
</li>
</ul>
<h2 id="1-6-Vue的生命周期"><a href="#1-6-Vue的生命周期" class="headerlink" title="1.6 Vue的生命周期"></a>1.6 Vue的生命周期</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%871.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%873.png" alt="图片3"></p>
<h1 id="2，插值的操作"><a href="#2，插值的操作" class="headerlink" title="2，插值的操作"></a>2，插值的操作</h1><h2 id="2-1-Mustache语法"><a href="#2-1-Mustache语法" class="headerlink" title="2.1 Mustache语法"></a>2.1 Mustache语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125;&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age+&quot;--&quot;+pet&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      firstName:<span class="string">&quot;zhuang&quot;</span>,</span></span><br><span class="line"><span class="javascript">      lastName:<span class="string">&quot;kang&quot;</span>,</span></span><br><span class="line"><span class="javascript">      age:<span class="string">&quot;20&quot;</span>,</span></span><br><span class="line"><span class="javascript">      pet:<span class="string">&quot;dog&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-35-33.png"></p>
<h2 id="2-2-V-once指令"><a href="#2-2-V-once指令" class="headerlink" title="2.2 V-once指令"></a>2.2 V-once指令</h2><ul>
<li>该指令后面不需要跟任何表达式</li>
<li>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该指令后面不需要跟任何表达式</span></span><br><span class="line"><span class="comment">该指令表示元素和组件只渲染一次，不会随着数据的改变而改变--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>\&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-36-58.png"></p>
<h2 id="2-3-V-html指令"><a href="#2-3-V-html指令" class="headerlink" title="2.3 V-html指令"></a>2.3 V-html指令</h2><ul>
<li>1.某些情况下，我们从服务器请求到的数据本身就是一个HTML代码<ul>
<li>如果我们直接通过&lt;!–swig￼163–&gt; </li>
</ul>
</li>
</ul>
<p>3.我们可以将上面代码换成计算属性</p>
<p>计算属性是写在实例的computed选项中的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&quot; &quot;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      firstName: <span class="string">&#x27;zhuang&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      lastName: <span class="string">&#x27;kang&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&quot; &quot;</span>+<span class="built_in">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getFullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&quot; &quot;</span>+<span class="built_in">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_12-49-23.png"></p>
<h2 id="3-6-计算属性的高级操作"><a href="#3-6-计算属性的高级操作" class="headerlink" title="3.6 计算属性的高级操作"></a>3.6 计算属性的高级操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line">      books:[</span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>: <span class="string">&#x27;书1&#x27;</span>,<span class="attr">price</span>:<span class="number">10</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>: <span class="string">&#x27;书2&#x27;</span>,<span class="attr">price</span>:<span class="number">15</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>: <span class="string">&#x27;书3&#x27;</span>,<span class="attr">price</span>:<span class="number">20</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>: <span class="string">&#x27;书4&#x27;</span>,<span class="attr">price</span>:<span class="number">30</span>&#125;,</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//高级用法 filter/map/reduce</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> result=<span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.books.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">          result+=<span class="built_in">this</span>.books[i].price</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> result</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-04-06.png"></p>
<h2 id="3-7-计算属性中的getter和setter方法"><a href="#3-7-计算属性中的getter和setter方法" class="headerlink" title="3.7 计算属性中的getter和setter方法"></a>3.7 计算属性中的getter和setter方法</h2><ul>
<li>每个计算属性都包括一个getter和一个setter</li>
<li>语法糖情况下，表示getter，取数据</li>
<li>setter一般不用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      firstName:<span class="string">&#x27;zhuang&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      lastName:<span class="string">&#x27;kang&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//不加动词，计算属性，以属性命名</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//语法糖，简写</span></span></span><br><span class="line">      /*fullName() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&quot; &quot;</span>+<span class="built_in">this</span>.lastName;</span></span><br><span class="line">      &#125;*/</span><br><span class="line">      fullName:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//属性中get方法不适用，只是一个只读属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;--&gt;&#x27;</span>,newValue);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> names=newValue.split(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.firstName=names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.firstName=names[<span class="number">1</span>];</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&quot; &quot;</span>+<span class="built_in">this</span>.lastName</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-13-11.png"></p>
<h2 id="3-8-计算属性和methods方法对比"><a href="#3-8-计算属性和methods方法对比" class="headerlink" title="3.8 计算属性和methods方法对比"></a>3.8 计算属性和methods方法对比</h2><p>包含一个知识点</p>
<ul>
<li><p>计算属性的缓存</p>
</li>
<li><p>methods和computed看起来都可以实现我们的功能</p>
</li>
<li><p>那么为什么还要多一个计算属性这个东西呢？</p>
</li>
<li><p>原因：计算属性会进行缓存，如果多次使用,计算属性只会调用一次，极大提高了性能</p>
</li>
<li><p>除非原属性发生改变，才会重新调用计算属性，更改属性值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  1.直接拼接:语法过于繁琐--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  2.通过定义methods--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  3.通过computed--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      firstName:<span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      lastName:<span class="string">&#x27;James&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getFullName</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;getFullName&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&quot; &quot;</span>+<span class="built_in">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;fullName&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&#x27; &#x27;</span>+<span class="built_in">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-21-42.png"></p>
<h2 id="3-9-ES6补充"><a href="#3-9-ES6补充" class="headerlink" title="3.9 ES6补充"></a>3.9 ES6补充</h2><p>这里不做笔记，后续学习ES6知识点！</p>
<h2 id="3-10-V-on指令"><a href="#3-10-V-on指令" class="headerlink" title="3.10 V-on指令"></a>3.10 V-on指令</h2><p><strong>事件监听</strong></p>
<ul>
<li>作用：绑定事件监听器</li>
<li>缩写：@</li>
<li>预期：Function | Inline Statement | Object</li>
<li>参数：event</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数器是:&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  简便写法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line">      counter:0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter++</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter--</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-30-56.png"></p>
<h2 id="3-11-V-on参数传递问题"><a href="#3-11-V-on参数传递问题" class="headerlink" title="3.11 V-on参数传递问题"></a>3.11 V-on参数传递问题</h2><p><strong>参数</strong></p>
<p>当通过methods中定义方法，以供@click调用时，需要注意参数问题：</p>
<ul>
<li>情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</li>
<li>情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  事件调用的方法没有参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click()&quot;</span>&gt;</span>按钮1-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click&quot;</span>&gt;</span>按钮1-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  在事件定义时，写函数省略了小括号，凡是方法本身是需要小括号的--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  这个时候，Vue会默认将浏览器生产的event事件对象作为参数传入到方法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  如果函数需要参数，但是没有传入，如果有括号的话，那么函数的形参为underfined--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click()&quot;</span>&gt;</span>按钮2-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click(123)&quot;</span>&gt;</span>按钮2-3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  定义方法时，我们需要event对象，同时又需要其他参数--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  在调用方式，如何手动的获取到浏览器参数的event对象:  $event--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn3Click(123,$event)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk! &quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btn1Click</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;btn1Click&quot;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btn2Click</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;------------------&quot;</span>,event);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btn3Click</span>(<span class="params">abc,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;++++++++++++++++++&quot;</span>,abc, event);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-35-40.png"></p>
<h2 id="3-12-v-on修饰符"><a href="#3-12-v-on修饰符" class="headerlink" title="3.12 v-on修饰符"></a>3.12 v-on修饰符</h2><p><strong>（一）在某些情况下，我们拿到event的目的可能是进行一些事件处理</strong><br><strong>（二）Vue提供了修饰符来帮助我们方便的处理一些事件：</strong></p>
<ul>
<li><p>.stop-调用event.stopPropagation()</p>
</li>
<li><p>.prevent-调用event.preventDefault()</p>
</li>
<li><p>.{keyCode | keyAlias}-只当事件是从特定键触发时才触发回调</p>
</li>
<li><p>.once-只触发一次回调</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    stop修饰符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btn1Click&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    prevent修饰符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submitClick&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  监听keyup.enter--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  once修饰符--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line">      counter:0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btn1Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;btn1Click&quot;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">divClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;divClock&#x27;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">submitClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;submitClick&#x27;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">keyUp</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;keyUp&#x27;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btn2Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;btn2Click&#x27;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-47-34.png"></p>
<h2 id="3-13-v-if-v-else-v-if-else指令"><a href="#3-13-v-if-v-else-v-if-else指令" class="headerlink" title="3.13 v-if v-else v-if-else指令"></a>3.13 v-if v-else v-if-else指令</h2><p><strong>v-if,v-else-if,v-else</strong></p>
<ul>
<li><p>这三个指令与JavaScript的条件语句if,else,else if类似</p>
</li>
<li><p>Vue的条件指令可以根据表达式的值在DM中渲染或销毁元素或组件</p>
</li>
</ul>
<p><strong>v-if原理</strong></p>
<ul>
<li><p>v-if后面的条件为flase时，对应的元素以及其子元素不会渲染</p>
</li>
<li><p>也就是根本没有不会有对应的标签出现在DOM中</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  多重分支，不建议直接用标签，建议用计算属性去做--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk !&quot;</span>,</span></span><br><span class="line">      score:95,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">result</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> showMessage = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">this</span>.score&gt;=<span class="number">90</span>)&#123;</span></span><br><span class="line"><span class="javascript">          showMessage = <span class="string">&#x27;优秀&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.score&gt;=<span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="javascript">          showMessage = <span class="string">&#x27;良好&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.score&gt;=<span class="number">60</span>)&#123;</span></span><br><span class="line"><span class="javascript">          showMessage = <span class="string">&#x27;及格&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          showMessage = <span class="string">&#x27;不及格&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> showMessage;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_13-52-47.png"></p>
<h2 id="3-14-切换登录小案例"><a href="#3-14-切换登录小案例" class="headerlink" title="3.14 切换登录小案例"></a>3.14 切换登录小案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUserClick()&quot;</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      isUser:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">isUserClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isUser=!<span class="built_in">this</span>.isUser;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_20-08-29.png"></p>
<p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字一仍然显示之前的输入的内容<br>但是按道理讲，我们应该切换到另一个input的元素中<br>在另一个input元素中，我们并没有输入内容<br>为什么会出现这个问题呢？</p>
<ul>
<li><p>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素<br>在案例中，Vue内部会发现原来的input元素不再使用，直接作为else中input来使用</p>
</li>
<li><p>如果我们不考虑Vue出现类似重复利用的问题，可以给对应的input添加key<br>并且保证key不相同</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUserClick()&quot;</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-15-v-show指令"><a href="#3-15-v-show指令" class="headerlink" title="3.15 v-show指令"></a>3.15 v-show指令</h2><p><strong>（一）v-show的用法和v-if非常相似，也用于决定一个元素是否渲染</strong><br><strong>（二）v-if和v-show都可以决定一个元素是否渲染，那么开发中我们如何选择呢？</strong></p>
<ul>
<li>v-if当条件为false时，压根不会有对应的元素在DOM中</li>
<li>v-show当条件为false，仅仅是将元素的display属性设置为none而已</li>
</ul>
<p><strong>（三）开发种如何选择呢？</strong></p>
<ul>
<li>当需要在显示与隐藏之间切片很频繁时，使用v-show</li>
<li>当只有一次切换时，通过使用v-if</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  v-if :当条件为false时，包含v-if指令的元素。根本就不会存在dom中--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  v-show: 当条件为false时，v-show只是给我们的元素添加一个行内样式：display:none--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      isShow:<span class="literal">true</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-16-v-for数组遍历"><a href="#3-16-v-for数组遍历" class="headerlink" title="3.16 v-for数组遍历"></a>3.16 v-for数组遍历</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      movies:[<span class="string">&quot;速度与激情&quot;</span>,<span class="string">&quot;海贼王&quot;</span>,<span class="string">&quot;盗墓笔记&quot;</span>,<span class="string">&quot;成龙历险记&quot;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-20_21-34-24.png"></p>
<h2 id="3-17-v-for对象遍历"><a href="#3-17-v-for对象遍历" class="headerlink" title="3.17 v-for对象遍历"></a>3.17 v-for对象遍历</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  直接输出--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;info.height&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;info.weight&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  1.在遍历对象的过程中，如果只是获取一个值，那么获取到的是value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  2.获取key和value         前面为value，后面为key   格式(value,key)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in info&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  3.获取key和value，index  格式：(value,key,index)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in info&quot;</span>&gt;</span>[&#123;&#123;index&#125;&#125;]&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk!&quot;</span>,</span></span><br><span class="line">      info :&#123;</span><br><span class="line"><span class="javascript">        name:<span class="string">&#x27;zk&#x27;</span>,</span></span><br><span class="line">        age:20,</span><br><span class="line">        height:1.88,</span><br><span class="line">        weight:68.5,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-21_20-54-14.png"></p>
<h2 id="3-18-v-model指令"><a href="#3-18-v-model指令" class="headerlink" title="3.18 v-model指令"></a>3.18 v-model指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  双向绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  input 有个监听事件，用于监听用户输入，反向绑定message的值，实现双向绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;message=$event.target.value&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">valueChange</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//一旦在界面中产生一个事件，浏览器会自动生成一个event对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//enent对象中，有我们需要value,在event中的target中</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//在调用函数中，如果省略的实参，而定义函数时，有形参，会自动将event当做实参传入</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.message = event.target.value</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Snipaste_2021-05-18_21-36-05.png" alt="Snipaste_2021-05-18_21-36-05.png"></p>
<p>结合radio使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  如果不加name，会导致可以同时勾选男女，加上name，那么提交给数据库的时候，key是唯一的sex，所以只能选一个--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;input type=&quot;radio&quot; id=&quot;male&quot; name=&quot;sex&quot;&gt;男--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  当然了，如果我们加上v-model，并且绑定同一个元素的话，name就可以不添加了，因为也是互斥的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      sex: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Snipaste_2021-05-18_21-36-20.png" alt="Snipaste_2021-05-18_21-36-20.png"></p>
<h1 id="4，购物车小案例"><a href="#4，购物车小案例" class="headerlink" title="4，购物车小案例"></a>4，购物车小案例</h1><p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;books.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(book,index) in books&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--      &lt;td v-for=&quot;value in book&quot;&gt;&#123;&#123;value&#125;&#125;&lt;/td&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(index)&quot;</span><span class="attr">:disabled</span>=<span class="string">&quot;book.count&lt;=1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;&#123;book.count&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeHandle(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    books:[</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        name:<span class="string">&#x27;代码重构&#x27;</span>,</span><br><span class="line">        date:<span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">        price:<span class="number">85.00</span>,</span><br><span class="line">        count:<span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">2</span>,</span><br><span class="line">        name:<span class="string">&#x27;Linux大全&#x27;</span>,</span><br><span class="line">        date:<span class="string">&#x27;2006-2&#x27;</span>,</span><br><span class="line">        price:<span class="number">59.00</span>,</span><br><span class="line">        count:<span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">3</span>,</span><br><span class="line">        name:<span class="string">&#x27;编程之美&#x27;</span>,</span><br><span class="line">        date:<span class="string">&#x27;2008-10&#x27;</span>,</span><br><span class="line">        price:<span class="number">39.00</span>,</span><br><span class="line">        count:<span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">4</span>,</span><br><span class="line">        name:<span class="string">&#x27;代码大全&#x27;</span>,</span><br><span class="line">        date:<span class="string">&#x27;2006-3&#x27;</span>,</span><br><span class="line">        price:<span class="number">128.00</span>,</span><br><span class="line">        count:<span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">getFinalPrice</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.books[index].count--</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.books[index].count++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">removeHandle</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.books.splice(index,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    <span class="function"><span class="title">showPrice</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> totalPrice = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="built_in">this</span>.books.length; i++)&#123;</span><br><span class="line">        totalPrice += <span class="built_in">this</span>.books[i].price*<span class="built_in">this</span>.books[i].count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>style.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5c6b77</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果展示</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-22_21-09-46.png"></p>
<h1 id="5，JavaScript高阶函数讲解"><a href="#5，JavaScript高阶函数讲解" class="headerlink" title="5，JavaScript高阶函数讲解"></a>5，JavaScript高阶函数讲解</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  原来的数组--&gt;&#123;&#123;nums&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  小于100后过滤的数组--&gt;&#123;&#123;useFilter()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  乘以2的数组--&gt;&#123;&#123;useMap()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  乘以2以后的各元素的和的数组--&gt;&#123;&#123;useReduce()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  三种函数连用--&gt;&#123;&#123;useOnceCount()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  一行代码--&gt;&#123;&#123;useOnceRowCount()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line">      nums:[10, 20, 30, 40, 50, 60, 70]</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//filter map reduce 讲解</span></span></span><br><span class="line">    /*</span><br><span class="line">    filter</span><br><span class="line">    返回一个布尔值 必须</span><br><span class="line"><span class="javascript">    返回<span class="literal">true</span> 函数内部添加回调的值加入数组中</span></span><br><span class="line"><span class="javascript">    返回<span class="literal">false</span> 不加入</span></span><br><span class="line">     */</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">useFilter</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> newNums = <span class="built_in">this</span>.nums.filter(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//当n小于100是加入数组中</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> n &lt; <span class="number">100</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> newNums</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">useMap</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将newNums中每个数字×2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> new2Nums = <span class="built_in">this</span>.useFilter().map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> n * <span class="number">2</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> new2Nums</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//作用：对数组中所有的内容进行汇总(相加，相乘等等)</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">useReduce</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> total = <span class="built_in">this</span>.useMap().reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> preValue + n</span></span><br><span class="line">        &#125;, 0)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> total</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">useOnceCount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> total = <span class="built_in">this</span>.nums.filter(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> n &lt; <span class="number">100</span></span></span><br><span class="line"><span class="javascript">        &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> n * <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> preValue + n</span></span><br><span class="line">        &#125;, 0)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> total</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">useOnceRowCount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> total = <span class="built_in">this</span>.nums.filter(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">100</span>).map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).reduce(<span class="function">(<span class="params">preValue, n</span>) =&gt;</span> preValue + n)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> total</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-22_22-00-11.png"></p>
<h1 id="6，组件化开发"><a href="#6，组件化开发" class="headerlink" title="6，组件化开发"></a>6，组件化开发</h1><h2 id="6-1-组件化的基本使用"><a href="#6-1-组件化的基本使用" class="headerlink" title="6.1 组件化的基本使用"></a>6.1 组件化的基本使用</h2><p><strong>什么是组件化？</strong></p>
<ul>
<li>人面对复杂问题的处理方式：</li>
</ul>
<p>任何一个人处理信息的逻辑能力都是有限的</p>
<p>所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。</p>
<p>但是，我们人有一种天生的能力，就是将问题进行拆解。</p>
<p>如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解</p>
<ul>
<li>组件化也是类似的思想：</li>
</ul>
<p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</p>
<p>但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-10-15.png"></p>
<blockquote>
<p>我们将一个完整的页面分成很多个组件。</p>
<p>每个组件都用于实现页面的一个功能块。</p>
<p>而每一个组件又可以进行细分。</p>
</blockquote>
<p><strong>Vue组件化思想</strong></p>
<p>组件化是Vue.js中的重要思想</p>
<p><strong>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。</strong></p>
<p><strong>任何的应用都会被抽象成一颗组件树</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-13-10.png"></p>
<ul>
<li>组件化思想的应用：<ul>
<li>有了组件化的思想，我们在之后的开发中就要充分的利用它。</li>
<li>尽可能的将页面拆分成一个个小的、可复用的组件。</li>
<li>这样让我们的代码更加方便组织和管理，并且扩展性也更强</li>
</ul>
</li>
</ul>
<p><strong>组件的使用分成三个步骤：</strong></p>
<ul>
<li><p>创建组件构造器</p>
</li>
<li><p>注册组件</p>
</li>
<li><p>使用组件</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-21-26.png"></p>
<p><strong>Vue.extend()：</strong></p>
<ul>
<li><p>调用Vue.extend()创建的是一个组件构造器。 </p>
</li>
<li><p>通常在创建组件构造器时，传入template代表我们自定义组件的模板。</p>
</li>
<li><p>该模板就是在使用到组件的地方，要显示的HTML代码</p>
</li>
</ul>
<p><strong>Vue.component()：</strong></p>
<ul>
<li><p>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</p>
</li>
<li><p>所以需要传递两个参数：1、注册组件的标签名 2、组件构造器</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my_cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&gt;`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//component 使用组件的名字，组件构造器名</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my_cpn&#x27;</span>, cpnC)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-31-46.png"></p>
<h2 id="6-2-全局变量和局部变量"><a href="#6-2-全局变量和局部变量" class="headerlink" title="6.2 全局变量和局部变量"></a>6.2 全局变量和局部变量</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my_cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&gt;`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//component 使用组件的名字，组件构造器名</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my_cpn&#x27;</span>, cpnC)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//局部注册，只有APP实例用此组件</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//定义标签 cpn</span></span></span><br><span class="line">      cpn: cpnC</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-33-35.png"></p>
<h2 id="6-3-父组件和子组件"><a href="#6-3-父组件和子组件" class="headerlink" title="6.3 父组件和子组件"></a>6.3 父组件和子组件</h2><p>组件和组件之间存在层级关系<br>而其中一种非常重要的关系就是父子组件的关系</p>
<p><strong>父子组件错误用法：以子标签的形式在Vue实例中使用</strong></p>
<ul>
<li><p>因为当子组件注册到父组件的components时，Vue会编译好父组件的模块</p>
</li>
<li><p>该模块的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中内容了）</p>
</li>
<li><p>是只能在父组件中被识别的</p>
</li>
<li><p>类似这种用法，是会被浏览器忽略的</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC1 = Vue.extend(&#123;</span></span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpnC1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 2.创建第二个组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnC2 = Vue.extend(&#123;</span></span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpnC2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn1: cpnC1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">//可以看成根组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn2: cpnC2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-24_16-04-47.png"></p>
<h2 id="6-4-注册组件的语法糖写法"><a href="#6-4-注册组件的语法糖写法" class="headerlink" title="6.4 注册组件的语法糖写法"></a>6.4 注册组件的语法糖写法</h2><p>在上面注册组件的方式，可能会有些繁琐。</p>
<ul>
<li><p>Vue为了简化这个过程，提供了注册的语法糖。</p>
</li>
<li><p>主要是省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>全局变量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my_cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>局部变量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">my_cpn1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">  全局组件注册的语法糖</span><br><span class="line">  创建组件构造器</span><br><span class="line">  注册组件</span><br><span class="line">  内部调用extend</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my_cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>语法糖写法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      my_cpn1: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>my_cpn1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-24_16-33-27.png"></p>
<h2 id="6-5-组件模板分离写法"><a href="#6-5-组件模板分离写法" class="headerlink" title="6.5 组件模板分离写法"></a>6.5 组件模板分离写法</h2><p>通过语法糖简化了Vue组件的注册过程，另外还有一个地方的写法比较麻烦，就是template模块写法。</p>
<p>如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。</p>
<p>Vue提供了两种方案来定义HTML模块内容：</p>
<p><strong>p使用<script>标签</strong></p>
<p><strong>p使用<template>标签</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;cpn&gt;&lt;/cpn&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">srcipt</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是cpn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>script标签抽离 注意类型type=&quot;text/x-template&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">srcipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是cpn1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//注册一个全局组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#cpn&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;cpn1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#cpn1&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-24_16-43-55.png"></p>
<h2 id="6-6-组件的数据"><a href="#6-6-组件的数据" class="headerlink" title="6.6 组件的数据"></a>6.6 组件的数据</h2><p><strong>一丶组件可以访问Vue实例数据吗？</strong></p>
<ul>
<li>组件是一个单独功能模块的封装：</li>
<li>这个模块有属于自己的HTML模板，也应该有属性自己的数据data</li>
<li>组件中的数据是保存在哪里呢？顶层的Vue实例中吗？</li>
<li>组件中不能直接访问Vue实例中的data</li>
<li>Vue组件应该有自己保存数据的地方</li>
</ul>
<p><strong>二丶组件数据的存放</strong></p>
<ul>
<li>组件自己的数据存放在哪里呢？</li>
<li>组件对象也有一个data属性（也可以有methods等属性）</li>
<li>只是这个data属性必须是一个函数</li>
<li>而且这个函数的返回一个对象，对象内部保存着数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_count</span>&gt;</span><span class="tag">&lt;/<span class="name">my_count</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_count</span>&gt;</span><span class="tag">&lt;/<span class="name">my_count</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_count</span>&gt;</span><span class="tag">&lt;/<span class="name">my_count</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my_count&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        counter: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter++;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.counter--;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_13-15-53.png"></p>
<p><strong>为什么data在组件中必须是一个函数呢?</strong></p>
<ul>
<li><p>首先，如果不是一个函数，Vue直接就会报错。</p>
</li>
<li><p>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</p>
</li>
</ul>
<h2 id="6-7-父子通信—父传子"><a href="#6-7-父子通信—父传子" class="headerlink" title="6.7 父子通信—父传子"></a>6.7 父子通信—父传子</h2><p><strong>一丶父子组件的通信</strong></p>
<ul>
<li>子组件是不能是不能引用父组件或者Vue实例的数据的</li>
<li>在开发中，往往一些数据确实需要从上层传递到下层</li>
<li>比如在一个页面中，我们从服务器请求到了很多数据其中一些数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示这个时候，并不会让子组件再次发送一个一次网络请求，而是直接让大组件（父组件）将数据传递给小组件（子组件）<br><strong>如何进行父子组件间的通信呢？Vue官方提到</strong><ul>
<li>通过props向子组件传递数据</li>
<li>通过自定义事件向父组件发送消息</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_18-47-25.png"></p>
<p><strong>二丶props数据验证</strong><br>props可以是一个数组，也可以是对象<br>当需要对props进行类型验证时，就需要对象写法了<br>对象写法支持类型：</p>
<blockquote>
<p>String<br>Number<br>Boolean<br>Array<br><code>Object</code><br>Date<br>Function<br>Symbol</p>
<p>当我们有自定义构造函数时，验证也支持自定义类型</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my_cpn</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my_cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my_cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;movie in cmovies&quot;</span>&gt;</span>&#123;&#123;movie&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> my_cpn = &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#my_cpn&#x27;</span>,</span></span><br><span class="line">    /*</span><br><span class="line">    传递数组</span><br><span class="line">    传递对象 控制传递类的限制</span><br><span class="line">    传递对象，提供默认值</span><br><span class="line">     */</span><br><span class="line">    props: &#123;</span><br><span class="line">      cmessage: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&#x27;full&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="built_in">require</span>: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      cmovies: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line"><span class="javascript">      movies: [<span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      my_cpn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_13-40-48.png"></p>
<ul>
<li>如果props使用的驼峰标识，在动态绑定的时候，不能直接绑定，在每个大写字母前面需要加一个-</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:c-Info</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cInfo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn =&#123;</span></span><br><span class="line"><span class="javascript">    template:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">    props:&#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//驼峰标识</span></span></span><br><span class="line">      cInfo:&#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">default</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span>,</span></span><br><span class="line">      info:&#123;</span><br><span class="line"><span class="javascript">        name:<span class="string">&#x27;zk&#x27;</span>,</span></span><br><span class="line">        age:20,</span><br><span class="line">        height:1.90</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_13-48-24.png"></p>
<h2 id="6-8-父传子-自定义事件"><a href="#6-8-父传子-自定义事件" class="headerlink" title="6.8 父传子-自定义事件"></a>6.8 父传子-自定义事件</h2><p><strong>一丶子级向父级传递</strong><br>props用于父组件向子组件传递数据，还有一种比较常见的事子组件传递数据或事件到父组件中<br>我们需要用自定义事件来完成<br>什么时候需要自定义事件呢？<br>当子组件需要向父组件传递数据时，就要用到自定义事件<br>v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件<br>自定义事件的流程：<br><strong>在子组件中，通过$emit()来监听事件</strong><br><strong>在父组件中，通过v-on来监听子组件事件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">itclick</span>=<span class="string">&quot;cpnclick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;itemClick(item)&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpn=&#123;</span></span><br><span class="line"><span class="javascript">    template:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        categories:[</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="string">&#x27;100&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="string">&#x27;101&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="string">&#x27;102&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;家用电器&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="string">&#x27;103&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">itemClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(item)</span></span><br><span class="line">        /*</span><br><span class="line">        将item传给父组件，自定义</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;itemClick&#x27;</span>,item)</span></span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;itemClick&#x27;</span>,item)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">cpnclick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;cpnclick&#x27;</span>,item);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_13-58-09.png"></p>
<h2 id="6-9-父传子-双向绑定"><a href="#6-9-父传子-双向绑定" class="headerlink" title="6.9 父传子-双向绑定"></a>6.9 父传子-双向绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&quot;num1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:number2</span>=<span class="string">&quot;num2&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num1change</span>=<span class="string">&quot;num1change&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num2change</span>=<span class="string">&quot;num2change&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    使用data中的计算属性进程改动数据，双向绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    单向绑定，只绑定子组件的数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber1&quot;</span>&gt;</span> 单向绑定，只绑定子组件的数据</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type=&quot;text&quot; v-bind:value=&quot;dnumber1&quot; v-on:input=&quot;dnumber1=$event.target.value&quot;&gt; 双向绑定--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    @input后面太长了 可以写成函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnumber1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num1Input&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type=&quot;text&quot; :value=&quot;dnumber1&quot; @input=&quot;num1Input&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber2&quot;</span>&gt;</span> 单向绑定，只绑定子组件的数据</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnumber2&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num2Input&quot;</span>&gt;</span>双向绑定</span><br><span class="line">    <span class="comment">&lt;!--    单向绑定，只绑定子组件的数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type=&quot;text&quot; v-model=&quot;dnumber2&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    直接绑定，Vue不支持--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;h2&gt;&#123;&#123;number1&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type=&quot;text&quot; v-model=&quot;number1&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    直接绑定，Vue不支持--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;h2&gt;&#123;&#123;number2&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type=&quot;text&quot; v-model=&quot;number2&quot;&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      num1: 1,</span><br><span class="line">      num2: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num1change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num1 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num2change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num2 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//如果只是想直接展示的话，就可以直接用</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//如果要改数据的话，最好是放在data中用计算属性更改</span></span></span><br><span class="line"><span class="javascript">          number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">          number2: <span class="built_in">Number</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            dnumber1: <span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">            dnumber2: <span class="built_in">this</span>.number2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">num1Input</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dnumber1 = event.target.value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num1change&#x27;</span>, <span class="built_in">this</span>.dnumber1)</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">num2Input</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dnumber2 = event.target.value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num2change&#x27;</span>, <span class="built_in">this</span>.dnumber2)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_15-20-09.png"></p>
<h2 id="6-10-父子组件的访问方式：-children-refs"><a href="#6-10-父子组件的访问方式：-children-refs" class="headerlink" title="6.10 父子组件的访问方式：$children $refs"></a>6.10 父子组件的访问方式：$children $refs</h2><ul>
<li>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件</li>
<li>父组件访问子组件：使用$ children或者$ refs</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;reference属性&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="javascript">        template:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            name:<span class="string">&#x27;我是子组件的name&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;showMessage&quot;</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_15-28-23.png"></p>
<h2 id="6-11-子访问父-parent-root"><a href="#6-11-子访问父-parent-root" class="headerlink" title="6.11 子访问父-parent-root"></a>6.11 子访问父-parent-root</h2><ul>
<li>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件</li>
<li>子组件访问父组件：使用$ parent</li>
<li>子组件访问根组件：使用$ root</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是ccpn<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="javascript">        template:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            name:<span class="string">&#x27;我是cpn组件的name&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          ccpn:&#123;</span><br><span class="line"><span class="javascript">            template: <span class="string">&#x27;#ccpn&#x27;</span>,</span></span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.name);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.message);</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_15-43-50.png"></p>
<h2 id="6-12-slot-插槽的基本使用"><a href="#6-12-slot-插槽的基本使用" class="headerlink" title="6.12 slot-插槽的基本使用"></a>6.12 slot-插槽的基本使用</h2><p><strong>一丶为什么使用slot</strong></p>
<p><strong>（一）slot翻译为插槽</strong></p>
<p>在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽<br>插槽的目的是让我们原来的设备具有更多的扩展性<br>比如电脑的USB我们可以插入U盘，硬盘，手机，音响，键盘，鼠标等<br><strong>（二）组件的插槽</strong></p>
<p>组件的插槽也是为了让我们封装的组件更具有扩展性<br>让使用者可以决定组件内部的一些内容到底展示什么<br><strong>（三）例子：移动网站中的导航栏</strong></p>
<p>移动开发中，几乎每个页面都有导航栏<br>导航栏我们必然会封装成一个插件，比如nav-bar组件<br>一旦有了这个组件，我们就可以在多个页面中复用<br><strong>二丶如何封装这类插件呢？slot</strong></p>
<p><strong>（一）如何去封装这类的组件呢？</strong></p>
<p>它们也很多区别，但是也有很多共性<br>如果，我们每一个单独去封装一个组件，显然不合适<br>比如每个页面都返回，这部分内容我们就要重复去封装<br>但是，如果我们封装成一个，好像也不合理<br>有些左侧是菜单，有些是返回，有些中间是搜索，有些事文字等等<br><strong>（二）如何封装合适呢？抽取共性，保留不同</strong></p>
<p>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽<br>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容<br>是搜索框，还是文字，还是菜单，由调用者自己来决定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是h2标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&quot;Hello zk I am Vue !&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="javascript">        template:<span class="string">&#x27;#cpn&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_19-23-52.png"></p>
<h2 id="6-13-slot-具名插槽的使用"><a href="#6-13-slot-具名插槽的使用" class="headerlink" title="6.13 slot-具名插槽的使用"></a>6.13 slot-具名插槽的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    取名name 调用slot--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;right&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    slot中间均是默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_19-28-07.png"></p>
<h2 id="6-14-编译作用域"><a href="#6-14-编译作用域" class="headerlink" title="6.14 编译作用域"></a>6.14 编译作用域</h2><p><strong>在真正学习插槽之间，我们需要首先理解一个概念：编译作用域</strong></p>
<ul>
<li><p>官方对于编译的作用域解析比较简单，我们自己来通过一个例子来理解这个概念</p>
</li>
<li><p>我们来考虑下面的代码是否最终是可以渲染出来的</p>
</li>
<li><p><my-cpn v-show="isShow"></my-cpn>中，我们使用了isShow属性 isShow属性包含在组件中，也包含在Vue实例中</p>
</li>
<li><p>我们可以从下面的案例代码运行结果得出：都只作用于当前作用域</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容，zk<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      message:<span class="string">&#x27;hello,zk &#x27;</span>,</span></span><br><span class="line"><span class="javascript">      isShow:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="javascript">        template:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            isShow:<span class="literal">false</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-15-作用域插槽的使用"><a href="#6-15-作用域插槽的使用" class="headerlink" title="6.15 作用域插槽的使用"></a>6.15 作用域插槽的使用</h2><p>子组件中包含一组数据，比如：pLanguages：[‘JavaScript’,‘Python’,‘Swift’,‘Go’,‘C++’]</p>
<blockquote>
<p>（一）在父组件使用我们子组件时，从子组件中拿到数据需要在多个页面进行展示<br>某些页面是以水平方向一一展示的<br>某些界面是以列表形式展示的<br>某些界面直接展开一个数组<br>内容在子组件，希望父组件告诉我们如何展示，怎么办呢？<br>利用slot作用域插槽就可以了</p>
</blockquote>
<p>我们通过<template slot-scope="slot">获取到slot的属性<br>在通过slot.data就可以获取到我们传入的data了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  列表形式展示--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  水平形式展示--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    目的是获得子组件中的pLanguages--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    Vue2.5.x以下必须使用template模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in slot.data&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;——<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.data.join(&#x27;——&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguages&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguages&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            pLanguages: [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Solidity&#x27;</span>]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-25_19-31-01.png"></p>
<h1 id="7，前端模块化"><a href="#7，前端模块化" class="headerlink" title="7，前端模块化"></a>7，前端模块化</h1><h2 id="7-1-JavaScript原始功能"><a href="#7-1-JavaScript原始功能" class="headerlink" title="7.1 JavaScript原始功能"></a>7.1 JavaScript原始功能</h2><p><strong>随着ajax异步请求的出现，慢慢形成了前后端的分离</strong></p>
<ul>
<li><p>客户端需要完成的事情越来越多，代码量也是与日俱增。</p>
</li>
<li><p>为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。</p>
</li>
<li><p>但是这种维护方式，依然不能避免一些灾难性的问题。</p>
</li>
</ul>
<blockquote>
<p>全局变量同名问题</p>
</blockquote>
<p><strong>匿名函数来解决方面的重名问题</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-28_17-09-20.png"></p>
<p><strong>在aaa.js文件中，我们使用匿名函数</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428171002122.png" alt="image-20210428171002122"></p>
<p><strong>使用模块作为出口</strong></p>
<blockquote>
<p>在匿名函数内部，定义一个对象。</p>
<p>给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。</p>
<p>最后将这个对象返回，并且在外面使用了一个MoudleA接受</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428171118528.png" alt="image-20210428171118528"></p>
<p><strong>常见的模块化规范</strong>：</p>
<ul>
<li>CommonJS、AMD、CMD，也有ES6的Modules</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-28_17-12-19.png"></p>
<h2 id="7-2-export基本使用"><a href="#7-2-export基本使用" class="headerlink" title="7.2 export基本使用"></a>7.2 <strong>export</strong>基本使用</h2><p><strong>export</strong>指令用于导出变量</p>
<p>两种写法</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428171329647.png" alt="image-20210428171329647"></p>
<h2 id="7-3-export-default"><a href="#7-3-export-default" class="headerlink" title="7.3 export default"></a>7.3 export default</h2><p><strong>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名</strong></p>
<p><strong>这个时候就可以使用export default</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428171451032.png" alt="image-20210428171451032"></p>
<p><font color=red><strong>需要注意</strong>：export default在同一个模块中，不允许同时存在多个</font></p>
<h1 id="8，Wbepack使用"><a href="#8，Wbepack使用" class="headerlink" title="8，Wbepack使用"></a>8，Wbepack使用</h1><h2 id="8-1-什么是Webpack"><a href="#8-1-什么是Webpack" class="headerlink" title="8.1 什么是Webpack?"></a>8.1 什么是Webpack?</h2><p>At its core, <strong>webpack</strong> is a <em>static module bundler</em> for modern JavaScript applications. </p>
<p>从本质上来讲，webpack是一个现代的JavaScript应用的静态<strong>模块打包</strong>工具。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428171748396.png" alt="image-20210428171748396"></p>
<p><strong>打包如何理解</strong></p>
<blockquote>
<p>理解了webpack可以帮助我们进行模块化，并且处理模块间的各种复杂关系后，打包的概念就非常好理解了。</p>
<p>就是将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle)。</p>
<p>并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</p>
</blockquote>
<h3 id="8-1-1-安装Webpack"><a href="#8-1-1-安装Webpack" class="headerlink" title="8.1.1 安装Webpack"></a>8.1.1 安装Webpack</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先要安装node.js 安装步骤不赘述，node.js自带npm包管理工具<span class="comment">#查看node版本$ node -v#全局安装webpack$ npm install webpack -g# cd 对应目录 局部安装webpack$ npm install webpack --save--dev</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么全局安装后，还需要局部安装呢？</p>
<ul>
<li><p>在终端直接执行webpack命令，使用的全局安装的webpack</p>
</li>
<li><p>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</p>
</li>
</ul>
</blockquote>
<h2 id="8-1-2-打包文件"><a href="#8-1-2-打包文件" class="headerlink" title="8.1.2 打包文件"></a>8.1.2 打包文件</h2><blockquote>
<p>webpack只是一个工具 后续都是有vue-cli脚手架，这里不再赘述打包的步骤！</p>
</blockquote>
<h2 id="8-2-Webpack打包css样式"><a href="#8-2-Webpack打包css样式" class="headerlink" title="8.2 Webpack打包css样式"></a>8.2 Webpack打包css样式</h2><p><strong>参考官网：<a href="https://www.webpackjs.com/concepts/loaders/">loader | webpack 中文网 (webpackjs.com)</a></strong></p>
<p>在src下新建一个目录css 写一个css文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;  <span class="attribute">background-color</span>: aquamarine;&#125;</span><br></pre></td></tr></table></figure>

<p>在main.js文件中导入</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-26_13-59-05.png"></p>
<p>几个命令搞定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev css-loader$ npm install --save-dev style-loader$ webpack</span></span><br></pre></td></tr></table></figure>

<p><strong>参考生成文件如下！</strong></p>
<p><strong>webpack.config.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">&#x27;./src/main.js&#x27;</span>),<span class="comment">// 入口，表示，要使用 webpack 打包哪个文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 输出文件相关的配置</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">// 指定 打包好的文件，输出到哪个目录中去</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">// 这是指定 输出的文件的名称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack_test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在页面导入生成的bundle.js文件即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./03-webpack的loader/dist/bundle.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="8-3-Webpack打包图片样式"><a href="#8-3-Webpack打包图片样式" class="headerlink" title="8.3 Webpack打包图片样式"></a>8.3 Webpack打包图片样式</h2><p><strong>参考官网：<a href="https://www.webpackjs.com/loaders/url-loader/">url-loader | webpack 中文网 (webpackjs.com)</a></strong></p>
<p>在src目录下新建img目录 随便放进图片</p>
<p>在css文件中当背景使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;  <span class="comment">/*background-color: aquamarine;*/</span>  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/minibus.jpg&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev url-loader</span></span><br></pre></td></tr></table></figure>

<p><strong>配置webpack.config.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">&#x27;./src/main.js&#x27;</span>),<span class="comment">// 入口，表示，要使用 webpack 打包哪个文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 输出文件相关的配置</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">// 指定 打包好的文件，输出到哪个目录中去</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>, <span class="comment">// 这是指定 输出的文件的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">20</span>,</span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>limit参数详解</strong></p>
<blockquote>
<p>当加载的图片小于limit，会将图片编译为base64字符串形式</p>
<p>大于limit，需要使用file-loader 安装依赖！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev file-loader</span></span><br></pre></td></tr></table></figure>

<p><strong>再次打包运行会在dist目录中多出一个很长的文件</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-26_15-20-20.png"></p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack_test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^5.2.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.6.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.13.16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.26.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.0.0-beta.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-env&quot;</span>: <span class="string">&quot;^1.7.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^8.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.35.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在webpack.config.js文件中可以指定图片生成的名字，这样就不会那么长了</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">20</span>,</span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-26_15-23-15.png"></p>
<h2 id="8-4-Webpack-ES6转为ES5"><a href="#8-4-Webpack-ES6转为ES5" class="headerlink" title="8.4 Webpack ES6转为ES5"></a>8.4 Webpack ES6转为ES5</h2><p><strong>参考地址：<a href="https://www.webpackjs.com/loaders/babel-loader/">babel-loader | webpack 中文网 (webpackjs.com)</a></strong></p>
<p>几个命令搞定，有些浏览器不兼容ES6语法 所以转为ES5语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack</span></span><br></pre></td></tr></table></figure>

<p><strong>在配置文件中添加rule</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-5-Webpack添加插件"><a href="#8-5-Webpack添加插件" class="headerlink" title="8.5 Webpack添加插件"></a>8.5 Webpack添加插件</h2><p>插件 plugin</p>
<p><strong>plugin是什么？</strong></p>
<ul>
<li><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</p>
</li>
<li><p>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</p>
</li>
</ul>
<p><strong>loader和plugin区别</strong></p>
<ul>
<li><p>loader主要用于转换某些类型的模块，它是一个转换器。</p>
</li>
<li><p>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p>
</li>
</ul>
<p><strong>plugin的使用过程：</strong></p>
<ul>
<li><p>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</p>
</li>
<li><p>步骤二：在webpack.config.js中的plugins中配置插件</p>
</li>
</ul>
<h3 id="8-5-1-添加版权的Plugin"><a href="#8-5-1-添加版权的Plugin" class="headerlink" title="8.5.1 添加版权的Plugin"></a>8.5.1 <strong>添加版权的</strong>Plugin</h3><p>该插件名字叫BannerPlugin，属于webpack自带的插件</p>
<p><strong>修改webpack.config.js的文件</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428172746941.png" alt="image-20210428172746941"></p>
<p>重新打包程序：查看bundle.js文件的头部，看到如下信息</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428172808322.png" alt="image-20210428172808322"></p>
<h3 id="8-5-2-打包html的plugin"><a href="#8-5-2-打包html的plugin" class="headerlink" title="8.5.2 打包html的plugin"></a>8.5.2 打包html的plugin</h3><p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自动生成一个index.html文件(可以指定模板来生成)</p>
<p>将打包的js文件，自动通过script标签插入到body中</p>
</blockquote>
<p><strong>修改webpack.config.js的文件</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428172941733.png" alt="image-20210428172941733"></p>
<h3 id="8-5-3-搭建本地服务器"><a href="#8-5-3-搭建本地服务器" class="headerlink" title="8.5.3 搭建本地服务器"></a>8.5.3 搭建本地服务器</h3><p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev webpack-dev-server@2.9.1</span></span><br></pre></td></tr></table></figure>

<p>提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果</p>
<p>webpack.config.js文件配置修改</p>
<p>是否实时更新，立即打开浏览器</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428173609655.png" alt="image-20210428173609655"></p>
<h1 id="9，Vue-CLI"><a href="#9，Vue-CLI" class="headerlink" title="9，Vue-CLI"></a>9，Vue-CLI</h1><p><strong>参考地址：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">创建一个项目 | Vue CLI (vuejs.org)</a></strong></p>
<p><strong>类似于SpingBoot 开箱即用</strong></p>
<p><strong>如果你只是简单写几个Vue的Demo程序, 那么你不需要Vue CLI.</strong></p>
<p><strong>如果你在开发大型项目, 那么你需要, 并且必然需要使用Vue CLI</strong></p>
<blockquote>
<p>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。</p>
<p>如果每个项目都要手动完成这些工作，那无以效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</p>
</blockquote>
<p><strong>CLI</strong> <strong>是什么意思</strong></p>
<blockquote>
<p>CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架.</p>
<p>Vue CLI是一个官方发布 vue.js 项目脚手架</p>
<p>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</p>
</blockquote>
<p><strong>准备工作</strong></p>
<blockquote>
<p>cnpm安装</p>
<p>由于国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p>
<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
<p>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<p>这样就可以使用 cnpm 命令来安装模块了：</p>
<p>$ cnpm install [name]</p>
</blockquote>
<p><strong>什么是NPM?</strong></p>
<ul>
<li><p>NPM的全称是Node Package Manager</p>
</li>
<li><p>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
</li>
<li><p>我们会经常使用NPM来安装一些开发过程中依赖包.</p>
</li>
</ul>
<p><strong>Vue.js官方脚手架工具就使用了webpack模板</strong></p>
<ul>
<li><p>对所有的资源会压缩等优化操作</p>
</li>
<li><p>它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效</p>
</li>
</ul>
<p>先全局安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install webpack -g</span></span><br></pre></td></tr></table></figure>

<p>这里以CLI2版本讲解 后续都是用CLI4版本！</p>
<h2 id="9-1-CLI2详解"><a href="#9-1-CLI2详解" class="headerlink" title="9.1 CLI2详解"></a>9.1 CLI2详解</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428174409473.png" alt="image-20210428174409473"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428174425424.png" alt="image-20210428174425424"></p>
<p><strong>Runtime-Compiler和Runtime-only的区别</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428174548295.png" alt="image-20210428174548295"></p>
<p><strong>Vue程序运行过程</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428174809941.png" alt="image-20210428174809941"></p>
<h2 id="9-2-Render函数使用"><a href="#9-2-Render函数使用" class="headerlink" title="9.2 Render函数使用"></a>9.2 Render函数使用</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428174949810.png" alt="image-20210428174949810"></p>
<p><strong>npm run build 命令</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428175012473.png" alt="image-20210428175012473"></p>
<p><strong>npm run dev 命令</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428175136301.png" alt="image-20210428175136301"></p>
<h2 id="9-3-CLI3详解"><a href="#9-3-CLI3详解" class="headerlink" title="9.3 CLI3详解"></a>9.3 CLI3详解</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428175219668.png" alt="image-20210428175219668"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210428175229649.png" alt="image-20210428175229649"></p>
<p>启动可视化界面 管理配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue ui</span></span><br></pre></td></tr></table></figure>

<p><strong>在8080端口访问即可看到界面！</strong></p>
<h1 id="10-Vue-router"><a href="#10-Vue-router" class="headerlink" title="10, Vue-router"></a>10, Vue-router</h1><p>路由是一个网络工程里面的术语。</p>
<p><strong>路由</strong>（<strong>routing</strong>）就是通过互联的网络把信息从源地址传输到目的地址的活动. — 维基百科</p>
<p><strong>什么是路由器？</strong></p>
<blockquote>
<p>路由器提供了两种机制: 路由和转送.</p>
<p>路由是决定数据包从<strong>来源</strong>到<strong>目的地</strong>的路径.</p>
<p>转送将<strong>输入端</strong>的数据转移到合适的<strong>输出端</strong>.</p>
<p>路由中有一个非常重要的概念叫路由表.</p>
<p>路由表本质上就是一个映射表, 决定了数据包的指向</p>
</blockquote>
<h2 id="10-1-后端路由的阶段"><a href="#10-1-后端路由的阶段" class="headerlink" title="10.1 后端路由的阶段"></a>10.1 后端路由的阶段</h2><p>早期的网站开发整个HTML页面是由服务器来渲染的.</p>
<p>服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.</p>
<p><strong>但是, 一个网站, 这么多页面服务器如何处理呢?</strong></p>
<p>一个页面有自己对应的网址, 也就是URL.<br>URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理.<br>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.<br>这就完成了一个IO操作.</p>
<p><strong>上面的这种操作, 就是后端路由.</strong><br>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户顿.<br>这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.</p>
<p><strong>后端路由的缺点:</strong></p>
<ul>
<li>一种情况是整个页面的模块由后端人员来编写和维护的.</li>
<li>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码.</li>
<li>而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情</li>
</ul>
<h2 id="10-2-前端路由的阶段"><a href="#10-2-前端路由的阶段" class="headerlink" title="10.2 前端路由的阶段"></a>10.2 前端路由的阶段</h2><p><strong>前后端分离阶段：</strong><br>随着Ajax的出现, 有了前后端分离的开发模式.</p>
<blockquote>
<p>后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中.<br>这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上.<br>并且当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可.<br>目前很多的网站依然采用这种模式开发.</p>
</blockquote>
<p><strong>单页面富应用阶段:</strong><br>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由.<br>也就是前端来维护一套路由规则.</p>
<p><strong>前端路由的核心是什么呢？</strong><br>改变URL，但是页面不进行整体的刷新</p>
<h2 id="10-3-认识和安装-Vue-router"><a href="#10-3-认识和安装-Vue-router" class="headerlink" title="10.3 认识和安装 Vue-router"></a>10.3 认识和安装 Vue-router</h2><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。</p>
<p><strong>我们可以访问其官方网站对其进行学习 <a href="https://router.vuejs.org/zh/">Vue Router (vuejs.org)</a></strong></p>
<p><strong>vue-router是基于路由和组件的</strong></p>
<ul>
<li><p>路由用于设定访问路径, 将路径和组件映射起来.</p>
</li>
<li><p>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换</p>
</li>
</ul>
<ul>
<li>步骤一：安装命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue-router --save</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>步骤二：模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)</p>
<ul>
<li><p>第一步：导入路由对象，并且调用 Vue.use(VueRouter)</p>
</li>
<li><p>第二步：创建路由实例，并且传入路由映射配置 </p>
</li>
<li><p>第三步：在Vue实例中挂载创建的路由实例 </p>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>

<p><strong>使用vue-router的步骤:</strong></p>
<ul>
<li><p>第一步: 创建路由组件</p>
</li>
<li><p>第二步: 配置路由映射: 组件和路径映射关系</p>
</li>
<li><p>第三步: 使用路由: 通过<router-link>和<router-view></p>
</li>
</ul>
<p><strong>创建Vue-router实例</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-29_18-39-17.png"></p>
<p><strong>挂载到Vue实例中</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-29_18-40-34.png"></p>
<p><strong>步骤一：创建路由组件</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184238044.png" alt="image-20210429184238044"></p>
<p><strong>Home.vue</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;我是首页&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p&gt;我是首页内容，哈哈哈&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;新闻&lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;message&quot;&gt;消息&lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>About.vue</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是关于&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;我是关于内容，哈哈哈&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;About&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>步骤二：配置组件和路由的映射关系</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184406195.png" alt="image-20210429184406195"></p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过vue.use插件 安装插件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// import About from &quot;@/components/About&quot;;</span></span><br><span class="line"><span class="comment">// import Home from &quot;@/components/Home&quot;;</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&quot;@/components/User&quot;</span>;</span><br><span class="line"><span class="comment">// import HomeNews from &quot;@/components/HomeNews&quot;;</span></span><br><span class="line"><span class="comment">// import HomeMessage from &quot;@/components/HomeMessage&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home=<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> news=<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeNews&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> message=<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeMessage&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> about=<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/About&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Profile=<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Profile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vuerouter对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        component: news</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        component: message</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    meta:&#123;</span><br><span class="line">      title:<span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: about,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    component: User</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    component:Profile,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;档案&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.document.title=to.meta.title</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将router对象传入vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p><strong>步骤三：使用路由</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184542990.png" alt="image-20210429184542990"></p>
<blockquote>
<ul>
<li><router-link>: 该标签是一个vue-router中已经内置的组件, 它会被渲染成一个<a>标签.</li>
<li><router-view>: 该标签会根据当前的路径, 动态渲染出不同的组件.</li>
<li>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和<router-view>处于同一个等级.</li>
<li>在路由切换时, 切换的是<router-view>挂载的组件, 其他内容不会发生改变.</li>
</ul>
</blockquote>
<p><strong>App.vue</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--    &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot; tag&#x3D;&quot;button&quot; replace&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link v-bind:to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+userId&quot; tag&#x3D;&quot;button&quot; replace&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;&#123;</span><br><span class="line">      path:&#39;&#x2F;profile&#x2F;&#39;+123,</span><br><span class="line">      query:&#123;name:&#39;zk&#39;,age:20&#125;</span><br><span class="line">    &#125;&quot; tag&#x3D;&quot;button&quot; replace&gt;档案&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      userId:&#39;zhuangkang&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;*components: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">    About,</span><br><span class="line">    Home,</span><br><span class="line">  &#125;*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&#x2F;*#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">.router-link-active&#123;</span><br><span class="line">  color: crimson;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/image-20210429184737178.png"></p>
<p><strong>设置路由默认路径</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184815709.png" alt="image-20210429184815709"></p>
<blockquote>
<p>我们在routes中又配置了一个映射.<br>path配置的是根路径: /<br>redirect是重定向, 也就是我们将根路径重定向到/home的路径下, 这样就可以得到我们想要的结果了.</p>
</blockquote>
<p><strong>HTML5的History模式</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184907487.png" alt="image-20210429184907487"></p>
<p>测试</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429184918287.png" alt="image-20210429184918287"></p>
<p><strong>router-link补充</strong></p>
<ul>
<li>在前面的<router-link>中, 我们只是使用了一个属性: to, 用于指定跳转的路径.</li>
<li><router-link>还有一些其他属性:<ul>
<li>tag: tag可以指定<router-link>之后渲染成什么组件, 比如上面的代码会被渲染成一个<li>元素, 而不是<a></li>
<li>replace: replace不会留下history记录, 所以指定replace的情况下, 后退键返回不能返回到上一个页面中</li>
<li>active-class: 当<router-link>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active的class, 设置active-class可以修改默认的名称.</li>
<li>在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类.<br>但是通常不会修改类的属性, 会直接使用默认的router-link-active即可.  </li>
</ul>
</li>
</ul>
<p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20210429185058134.png" alt="image-20210429185058134"></p>
<p><strong>路由代码跳转</strong></p>
<p>将代码修改如下</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429185142200.png" alt="image-20210429185142200"></p>
<p><strong>动态路由</strong></p>
<blockquote>
<p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径：/user/aaaa或/user/bbbb<br>除了有前面的/user之外，后面还跟上了用户的ID<br>这种path和Component的匹配关系，我们称之为动态路由(也是路由传递数据的一种方式)。</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429185250739.png" alt="image-20210429185250739"></p>
<h2 id="10-4-路由的懒加载"><a href="#10-4-路由的懒加载" class="headerlink" title="10.4 路由的懒加载"></a>10.4 路由的懒加载</h2><blockquote>
<p><strong>官方给出了解释:</strong><br>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。<br>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p>
<p><strong>官方在说什么呢?</strong><br>首先, 我们知道路由中通常会定义很多不同的页面.<br>这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.<br>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大.<br>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.<br>如何避免这种情况呢? 使用路由懒加载就可以了.</p>
<p><strong>路由懒加载做了什么?</strong><br>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块.<br>只有在这个路由被访问到的时候, 才加载对应的组件</p>
</blockquote>
<p>效果如下</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429185731621.png" alt="image-20210429185731621"></p>
<p><strong>懒加载的方式</strong></p>
<p><img src="C:\Users\dell\Desktop\Notes\Vue\img\Snipaste_2021-04-29_18-58-37.png"></p>
<h2 id="10-5-嵌套路由"><a href="#10-5-嵌套路由" class="headerlink" title="10.5 嵌套路由"></a>10.5 嵌套路由</h2><p>嵌套路由是一个很常见的功能<br>比如在home页面中, 我们希望通过/home/news和/home/message访问一些内容.<br>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件.</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429190352003.png" alt="image-20210429190352003"></p>
<blockquote>
<ul>
<li>实现嵌套路由有两个步骤:</li>
<li>创建对应的子组件, 并且在路由映射中配置对应的子路由.</li>
<li>在组件内部使用<router-view>标签.</li>
</ul>
</blockquote>
<p><strong>嵌套路由实现</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429191209978.png" alt="image-20210429191209978"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-29_19-11-29.png" alt="Snipaste_2021-04-29_19-11-29"></p>
<p><strong>嵌套默认路径</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429191558955.png" alt="image-20210429191558955"></p>
<blockquote>
<p><strong>演示传递参数, 我们这里再创建一个组件, 并且将其配置好</strong><br>第一步: 创建新的组件Profile.vue<br>第二步: 配置路由映射<br>第三步: 添加跳转的<router-link></p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429192013898.png" alt="image-20210429192013898"></p>
<p><strong>传递参数的方式</strong></p>
<blockquote>
<p><strong>传递参数主要有两种类型: params和query</strong></p>
<ul>
<li><p><strong>params的类型:</strong><br>配置路由格式: /router/:id<br>传递的方式: 在path后面跟上对应的值<br>传递后形成的路径: /router/123, /router/abc</p>
</li>
<li><p><strong>query的类型:</strong><br>配置路由格式: /router, 也就是普通配置<br>传递的方式: 对象中使用query的key作为传递方式<br>传递后形成的路径: /router?id=123, /router?id=abc</p>
</li>
</ul>
</blockquote>
<p><strong>传递参数方式一: <router-link></strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429192148916.png" alt="image-20210429192148916"></p>
<p><strong>传递参数方式二: JavaScript代码</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210429192208324.png" alt="image-20210429192208324"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-04-29_19-24-27.png" alt="Snipaste_2021-04-29_19-24-27"></p>
<h2 id="10-6-导航守卫"><a href="#10-6-导航守卫" class="headerlink" title="10.6 导航守卫"></a>10.6 导航守卫</h2><blockquote>
<p>我们来考虑一个需求: 在一个SPA应用中, 如何改变网页的标题呢?</p>
<ul>
<li>网页标题是通过<title>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.</li>
<li>但是我们可以通过JavaScript来修改<title>的内容.window.document.title = ‘新的标题’.</li>
<li>那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?<ul>
<li>普通的修改方式:<ul>
<li>我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.<br>通过mounted声明周期函数, 执行对应的代码进行修改即可.<br>但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).<br>有没有更好的办法呢? 使用导航守卫即可.</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>什么是导航守卫?</strong>(<strong>“导航”表示路由正在发生改变。</strong>)</p>
<ul>
<li>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.</li>
<li>vue-router提供了beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.</li>
</ul>
<h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。</p>
<p>每个守卫方法接收三个参数：</p>
<ul>
<li><strong><code>to: Route</code></strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1">路由对象</a></li>
<li><strong><code>from: Route</code></strong>: 当前导航正要离开的路由</li>
<li><strong><code>next: Function</code></strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul>
<li><strong><code>next()</code></strong>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li>
<li><strong><code>next(false)</code></strong>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li>
<li><strong><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code></strong>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <a href="https://router.vuejs.org/zh/api/#to"><code>router-link</code> 的 <code>to</code> prop</a> 或 <a href="https://router.vuejs.org/zh/api/#router-push"><code>router.push</code></a> 中的选项。</li>
<li><strong><code>next(error)</code></strong>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <a href="https://router.vuejs.org/zh/api/#router-onerror"><code>router.onError()</code></a> 注册过的回调。</li>
</ul>
</li>
</ul>
<p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong>。这里有一个在用户未能验证身份时重定向到 <code>/login</code> 的示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BAD</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 如果用户未能验证身份，则 `next` 会被调用两次</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">else</span> next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>补充一:如果是后置钩子, 也就是afterEach, 不需要主动调用next()函数.</p>
</li>
<li><p>补充二: 上面我们使用的导航守卫, 被称之为全局守卫.</p>
<ul>
<li>路由独享的守卫.</li>
<li>组件内的守卫.</li>
</ul>
</li>
</ul>
<p><strong>其余参考官网：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB">导航守卫 | Vue Router (vuejs.org)</a></strong></p>
<h3 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h3><p><code>&lt;router-view&gt;</code> 组件是一个 functional 组件，渲染路径匹配到的视图组件。<code>&lt;router-view&gt;</code> 渲染的组件还可以内嵌自己的 <code>&lt;router-view&gt;</code>，根据嵌套路径，渲染嵌套组件。</p>
<p>其他属性 (非 router-view 使用的属性) 都直接传给渲染的组件， 很多时候，每个路由的数据都是包含在路由参数中。</p>
<p>因为它也是个组件，所以可以配合 <code>&lt;transition&gt;</code> 和 <code>&lt;keep-alive&gt;</code> 使用。如果两个结合一起用，要确保在内层使用 <code>&lt;keep-alive&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="11，Promise"><a href="#11，Promise" class="headerlink" title="11，Promise"></a>11，Promise</h1><p><strong>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise - JavaScript | MDN (mozilla.org)</a></strong></p>
<blockquote>
<p>ES6中一个非常重要和好用的特性就是Promise<br>但是初次接触Promise会一脸懵逼，这TM是什么东西？</p>
<p>Promise到底是做什么的呢？<br>Promise是异步编程的一种解决方案。<br>那什么时候我们会来处理异步事件呢？</p>
<p>一种很常见的场景应该就是网络请求了。<br>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。<br>所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。<br>如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。</p>
</blockquote>
<h2 id="11-2-网络请求的回调地狱"><a href="#11-2-网络请求的回调地狱" class="headerlink" title="11.2 网络请求的回调地狱"></a>11.2 网络请求的回调地狱</h2><ul>
<li>我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2</li>
<li>我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3</li>
<li>我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4</li>
<li>发送网络请求url4，获取最终的数据data4</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504181753747.png" alt="image-20210504181753747"></p>
<p>这里，我们用一个定时器来模拟异步事件：</p>
<ul>
<li>假设下面的data是从网络上1秒后请求的数据</li>
<li>console.log就是我们的处理方式</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504181837349.png" alt="image-20210504181837349"></p>
<p>换成promise方法</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504181905331.png" alt="image-20210504181905331"></p>
<h2 id="11-2-定时器异步事件解析"><a href="#11-2-定时器异步事件解析" class="headerlink" title="11.2 定时器异步事件解析"></a>11.2 定时器异步事件解析</h2><p>new Promise很明显是创建一个Promise对象<br>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。</p>
<p>但是resolve, reject它们是什么呢？<br>我们先知道一个事实：在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）<br>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。</p>
<p>成功还是失败？<br><strong>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调<br>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调</strong></p>
<h2 id="11-3-Promise-状态"><a href="#11-3-Promise-状态" class="headerlink" title="11.3 Promise 状态"></a>11.3 Promise 状态</h2><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p>
<ul>
<li><em>待定（pending）</em>: 初始状态，既没有被兑现，也没有被拒绝。</li>
<li><em>已兑现（fulfilled）</em>: 意味着操作成功完成。</li>
<li><em>已拒绝（rejected）</em>: 意味着操作失败。</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504183229167.png" alt="image-20210504183229167"></p>
<h2 id="11-4-链式调用"><a href="#11-4-链式调用" class="headerlink" title="11.4 链式调用"></a>11.4 链式调用</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504183328133.png" alt="image-20210504183328133"></p>
<p>使用链式写法后</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210504183346165.png" alt="image-20210504183346165"></p>
<h1 id="12，VueX"><a href="#12，VueX" class="headerlink" title="12，VueX"></a>12，VueX</h1><h2 id="12-1-什么是VueX？"><a href="#12-1-什么是VueX？" class="headerlink" title="12.1 什么是VueX？"></a>12.1 什么是VueX？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p><strong>什么是状态管理模式？</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// view</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      <span class="built_in">this</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个状态自管理应用包含以下几个部分：</p>
<ul>
<li><strong>state</strong>，驱动应用的数据源；</li>
<li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；</li>
<li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化</li>
</ul>
<p><strong>单向数据流图示</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210510101723005.png" alt="image-20210510101723005"></p>
<p>但是，当我们的应用遇到<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏：</p>
<ul>
<li>多个视图依赖于同一状态。</li>
<li>来自不同视图的行为需要变更同一状态。</li>
</ul>
<p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p>
<p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p>
<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210510101835431.png" alt="image-20210510101835431"></p>
<ul>
<li>安装VueX</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vuex --save</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在一个模块化的打包系统中，您必须显式地通过 <code>Vue.use()</code> 来安装 Vuex：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>

<ul>
<li>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同：</li>
</ul>
<ol>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ol>
<p>来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>store.state</code> 来获取状态对象，以及通过 <code>store.commit</code> 方法触发状态变更</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(store.state.count) <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure>

<p>为了在 Vue 组件中访问 <code>this.$store</code> property，你需要为 Vue 实例提供创建好的 store。Vuex 提供了一个从根组件向所有子组件，以 <code>store</code> 选项的方式“注入”该 store 的机制：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store: store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>ES6简写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们可以从组件的方法提交一个变更：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.state.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化。这个简单的约定能够让你的意图更加明显，这样你在阅读代码的时候能更容易地解读应用内部的状态改变。</p>
<h2 id="12-2-VueX核心概念"><a href="#12-2-VueX核心概念" class="headerlink" title="12.2 VueX核心概念"></a>12.2 VueX核心概念</h2><h3 id="12-2-1-State"><a href="#12-2-1-State" class="headerlink" title="12.2.1 State"></a>12.2.1 State</h3><p>Vuex 使用<strong>单一状态树</strong>——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">SSOT (opens new window)</a>)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>
<p><strong>存储在 Vuex 中的数据和 Vue 实例中的 <code>data</code> 遵循相同的规则，例如状态对象必须是纯粹 (plain) 的</strong></p>
<p><strong>在 Vue 组件中获得 Vuex 状态</strong></p>
<p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在<a href="https://cn.vuejs.org/guide/computed.html">计算属性</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当 <code>store.state.count</code> 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。</p>
<p>然而，这种模式导致组件依赖全局状态单例。在模块化的构建系统中，在每个需要使用 state 的组件中需要频繁地导入，并且在测试组件时需要模拟状态。</p>
<p>Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过在根实例中注册 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mapState 辅助函数</strong></p>
<p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span></span><br><span class="line">    countAlias: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">&#x27;count&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>



<h3 id="12-2-2-Getters"><a href="#12-2-2-Getters" class="headerlink" title="12.2.2 Getters"></a>12.2.2 Getters</h3><p>有时候，我们需要从store中获取一些state变异后的状态，比如下面的Store中：</p>
<p>获取学生年龄大于20的个数</p>
<p><img src="C:\Users\dell\Desktop\Notes\Vue\img\image-20210510105113712.png" alt="image-20210510105113712"></p>
<p>我们可以在Store中定义getters</p>
<p><img src="C:\Users\dell\Desktop\Notes\Vue\img\image-20210510105136807.png" alt="image-20210510105136807"></p>
<p><img src="C:\Users\dell\Desktop\Notes\Vue\img\image-20210510105144014.png" alt="image-20210510105144014"></p>
<p>如果我们已经有了一个获取所有年龄大于20岁学生列表的getters, 那么代码可以这样来写</p>
<p><img src="C:\Users\dell\Desktop\Notes\Vue\img\image-20210510105620419.png" alt="image-20210510105620419"></p>
<h3 id="12-2-3-Mutation"><a href="#12-2-3-Mutation" class="headerlink" title="12.2.3 Mutation"></a>12.2.3 Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>提交载荷（Payload）</strong></p>
<p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>对象风格的提交方式</strong></p>
<p>提交 mutation 的另一种方式是直接使用包含 <code>type</code> 属性的对象：提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mutation 需遵守 Vue 的响应规则</strong></p>
<p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p>
<ol>
<li>最好提前在你的 store 中初始化好所有所需属性。</li>
<li>当需要在对象上添加新属性时，你应该</li>
</ol>
<ul>
<li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p>
</li>
<li><p>以新对象替换老对象。例如，利用<a href="https://github.com/tc39/proposal-object-rest-spread">对象展开运算符 (opens new window)</a>我们可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>使用常量替代 Mutation 事件类型</strong><br>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">&#x27;SOME_MUTATION&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210510111422775.png" alt="image-20210510111422775"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210510111432070.png" alt="image-20210510111432070"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Vue%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210510111438694.png" alt="image-20210510111438694"></p>
<p><strong>Mutation同步函数</strong></p>
<p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法.</p>
<ul>
<li>主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照.</li>
<li>但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.callAsyncMethod(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的</p>
<p><strong>在组件中提交 Mutation</strong><br>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="12-2-4-Actions"><a href="#12-2-4-Actions" class="headerlink" title="12.2.4 Actions"></a>12.2.4 Actions</h3><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<p><strong>来注册一个简单的 action：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>context是什么?</strong></p>
<ul>
<li>context是和store对象具有相同方法和属性的对象.</li>
<li>也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state</li>
</ul>
<p><strong>分发 Action</strong><br>Action 通过 store.dispatch 方法触发：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.dispatch(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>mutation 必须同步执行</strong>这个限制 Action 就不受约束！我们可以在 action 内部执行<strong>异步</strong>操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Actions 支持同样的载荷方式和对象方式进行分发：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">&#x27;incrementAsync&#x27;</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">&#x27;incrementAsync&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="12-2-5-Modules"><a href="#12-2-5-Modules" class="headerlink" title="12.2.5 Modules"></a>12.2.5 Modules</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<p><strong>模块的局部状态</strong><br>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="13，Axios"><a href="#13，Axios" class="headerlink" title="13，Axios"></a>13，Axios</h1><p>后续补充…</p>
<h1 id="14，项目实战"><a href="#14，项目实战" class="headerlink" title="14，项目实战"></a>14，项目实战</h1><p><strong>源码：<a href="https://gitee.com/zhuang-kang/vue-project">Vue-Project: Vue购物车实战项目 (gitee.com)</a></strong></p>
<p><strong>学习视频：<a href="https://www.bilibili.com/video/BV15741177Eh?p=148">https://www.bilibili.com/video/BV15741177Eh?p=148</a></strong></p>
<h2 id="14-1-耦合"><a href="#14-1-耦合" class="headerlink" title="14.1 耦合"></a>14.1 耦合</h2><ul>
<li>耦合是指两个或多个体系或运动形式间通过相互作用而彼此影响以至联合起来的现象。</li>
<li>对象之间的耦合度就是对象之间的依赖性。对象之间的耦合越高，维护成本越高</li>
</ul>
<p><strong>解耦：</strong><br>降低耦合度，让数据模型、业务逻辑和视图显示三层关系降低耦合，把关联依赖降到最低，不至于牵一发而动全身。</p>
<p>例：如果两者间需要交互，可以通过接口、通过消息、甚至引入框架，就是不要直接交叉写。<br>观察者模式：解耦的模式，它使观察者和被观察者的逻辑不再搅在一起，而是彼此独立、互不依赖。例：当用户切换为夜间模式时，被观察者就会通知所有的观察者‘设置改变，大家快蒙上遮罩’</p>
<p>例：封装多个数据的请求<br>从服务器拿数据，就是对网络模块进行封装，再使用网络模块进行对数据请求<br>封装 request.js 直接在相应的页面做网络请求<br>单独封装首页的网络请求至 home.js 文件中<br>因为首页可能有多个请求，封装后可对其做统一管理，数据请求的url就不会与首页组件内容耦合<br>使得 home.vue 面向 home.js 开发，可降低耦合度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeMultidata</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeGoods</span>(<span class="params">type, page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">          type,</span><br><span class="line">          page</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-2-发送网络请求"><a href="#14-2-发送网络请求" class="headerlink" title="14.2 发送网络请求"></a>14.2 发送网络请求</h2><p>created<br>要在组件创建好之后、页面渲染之前发送请求获取数据，在 created 生命周期函数中做请求<br>保存数据<br>获取数据后，将数据保存在 data 中，因为函数里都是局部变量，函数一旦执行完，函数里的变量就会被回收掉<br>函数调用时，是将数据压入函数栈里，函数栈就可保存函数调用过程中所有变量。函数调用结束，就会将数据弹出函数栈，即释放函数中的所有变量<br>简化 created 中的代码<br>created 钩子中只处理主要逻辑，将具体的方法实现放到 methods 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">    <span class="comment">// 将created钩子中的代码简化，处理主要逻辑，具体的方法实现交给methods</span></span><br><span class="line">    <span class="comment">// 1.请求多个数据</span></span><br><span class="line">    <span class="built_in">this</span>.getHomeMultidata()</span><br><span class="line">    <span class="comment">// 2.请求商品数据</span></span><br><span class="line">    <span class="built_in">this</span>.getHomeGoods(<span class="string">&#x27;pop&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.getHomeGoods(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.getHomeGoods(<span class="string">&#x27;sell&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 网络请求相关方法</span></span><br><span class="line">    getHomeMultidata () &#123;</span><br><span class="line">      getHomeMultidata().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//   console.log(res)</span></span><br><span class="line">    <span class="comment">// this.result = res</span></span><br><span class="line">    <span class="built_in">this</span>.banners = res.data.banner.list</span><br><span class="line">    <span class="built_in">this</span>.recommends = res.data.recommend.list</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getHomeGoods (type) &#123;</span><br><span class="line">      <span class="keyword">const</span> page = <span class="built_in">this</span>.goods[type].page + <span class="number">1</span></span><br><span class="line">      getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.goods[type].list.push(...res.data.list)</span><br><span class="line">      <span class="built_in">this</span>.goods[type].page += <span class="number">1</span>  <span class="comment">/* 更新data中的页码 */</span></span><br><span class="line">      <span class="built_in">this</span>.$refs.scroll.finishPullUp() <span class="comment">// 调用方法，多次上拉加载更多</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-3-better-scroll"><a href="#14-3-better-scroll" class="headerlink" title="14.3 better-scroll"></a>14.3 better-scroll</h2><p>在相应的组件中为 scroll 组件设置固定高度，才能滚动</p>
<p>计算高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">父元素：<span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">滚动元素：</span><br><span class="line"><span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">98px</span>); </span><br><span class="line"> <span class="attribute">overflow</span>:hidden;</span><br></pre></td></tr></table></figure>

<p>定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">49px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>probeType</strong></p>
<ul>
<li>probe 侦测</li>
<li>probeType 0 不侦测， 1 延时侦测， 2 手指滚动的过程中才侦测，手指离开后的惯性滚动不侦测，3 侦测所有滚动</li>
</ul>
<ol>
<li>scroll 组件中配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.监听滚动的位置</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.probeType===<span class="number">2</span> || <span class="built_in">this</span>.probeType===<span class="number">3</span>)&#123;</span><br><span class="line">          <span class="built_in">this</span>.scroll.on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="params">position</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// console.log(position)</span></span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;scroll&#x27;</span>,position)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 scroll 的组件中设置，通过 <code>@scroll=&#39;contentScroll&#39;</code> 传递事件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">contentScroll</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(position.y)</span></span><br><span class="line">        <span class="comment">// this.showTop = (-position.y) &gt; 1000  绝对值Math.abs</span></span><br><span class="line">        <span class="built_in">this</span>.showTop = <span class="built_in">Math</span>.abs(position.y) &gt; <span class="number">1000</span></span><br><span class="line">        <span class="comment">// 2.设置吸顶效果</span></span><br><span class="line">        <span class="built_in">this</span>.isTabFixed = (-position.y) &gt; <span class="built_in">this</span>.tabOffsetTop</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p><strong>pullUpLoad</strong></p>
<p>上拉加载更多</p>
<ol>
<li>scroll 组件中配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.pullUpLoad)&#123; <span class="comment">// pullUpLoad为true时，到达底部，为false的组件不用监听此事件，提升效率</span></span><br><span class="line">        <span class="built_in">this</span>.scroll.on(<span class="string">&#x27;pullingUp&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">// console.log(&#x27;bottom&#x27;); 到达底部时才触发函数</span></span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;pullingUp&#x27;</span>)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 scroll 的组件中设置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getHomeGoods (type) &#123;</span><br><span class="line">      <span class="keyword">const</span> page = <span class="built_in">this</span>.goods[type].page + <span class="number">1</span></span><br><span class="line">      getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.goods[type].list.push(...res.data.list)</span><br><span class="line">      <span class="built_in">this</span>.goods[type].page += <span class="number">1</span>  <span class="comment">/* 更新data中的页码 */</span></span><br><span class="line">      <span class="built_in">this</span>.$refs.scroll.finishPullUp() <span class="comment">// 调用方法，多次上拉加载更多</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在更新完第一页的数据后，滚动到底部时触发上拉加载更多的方法，这个数据请求要在初始化数据方法的后面执行</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">activated () &#123;</span><br><span class="line">    <span class="comment">// 进入时滚动到离开时的位置this.saveY</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>, <span class="built_in">this</span>.saveY, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.$refs.scroll.refresh() <span class="comment">// 进入时再刷新，避免出现小问题</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="14-4-可滚动区域bug"><a href="#14-4-可滚动区域bug" class="headerlink" title="14.4 可滚动区域bug"></a>14.4 可滚动区域bug</h2><p>better-scroll 是根据 scrollerHeight 属性决定有多少区域可滚动的，而 scrollerHeight 属性值是根据content中元素的高度决定的<br>遇到数据请求是异步加载时，比如加载异步加载图片时，刚开始的 scrollerHeight 可能没有计算到图片，当图片加载完成后，scrollerHeight 值明显小于想要的值，所以滚动会出现问题</p>
<p>监听每一张图片是否加载完成，每一张图片加载完成，都执行一次refresh<br>可利用 vuex 状态管理器，在 vuex 里设置一个属性，当item里图片加载完成后切换状态，当切换状态后，在home组件中刷新<br>利用事件总线（专门管理事件的，可用于非父子组件间的通信</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">main.js  Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br><span class="line">item组件  @load=<span class="string">&#x27;imageLoad&#x27;</span>  methods: <span class="function"><span class="title">imageLoad</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;load&#x27;</span>)&#125;</span><br><span class="line">home组件  mounted () &#123;<span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;load&#x27;</span>,<span class="function">()=&gt;</span>&#123;<span class="built_in">this</span>.$refs.scroll.refresh()&#125;)&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>利用防抖函数 <code>debounce</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">// 1.监听item中图片加载完成，刷新防抖函数放到了utils.js中，工具库</span></span><br><span class="line">     <span class="keyword">const</span> refresh = debounce(<span class="built_in">this</span>.$refs.scroll.refresh,<span class="number">50</span>)</span><br><span class="line">      <span class="comment">// 对监听的事件进行保存，方便离开home组件时取消此事件监听</span></span><br><span class="line">       <span class="built_in">this</span>.itemImgListener = <span class="function">() =&gt;</span> &#123; refresh() &#125;</span><br><span class="line">       <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;itemImageLoad&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.$refs.scroll.refresh()</span><br><span class="line">         refresh() <span class="comment">// 此处是闭包，局部变量不会被销毁</span></span><br><span class="line">     &#125;)</span><br><span class="line">       <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;itemImageLoad&#x27;</span>, <span class="built_in">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="14-5-tabControl"><a href="#14-5-tabControl" class="headerlink" title="14.5 tabControl"></a>14.5 tabControl</h2><p><strong>点击切换数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    itemClick (index) &#123;</span><br><span class="line">      <span class="built_in">this</span>.currentIndex = index</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;tabClick&#x27;</span>,index) <span class="comment">/* 将子组件数据传递到父组件 */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tabClick (index) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType = <span class="string">&#x27;pop&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType = <span class="string">&#x27;new&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType= <span class="string">&#x27;sell&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><strong>吸顶效果</strong></p>
<ol>
<li>获取到 tabControl 的 offsetTop （滚动这个距离后即吸顶）</li>
<li>利用 $el 获取组件中的元素，图片加载完成后 offsetTop 值才正确</li>
<li>监听轮播图图片加载完成</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">swiperImageLoad () &#123;</span><br><span class="line">      <span class="comment">// 获取tabOffsetTop的offsetTop</span></span><br><span class="line">    <span class="built_in">this</span>.tabOffsetTop = <span class="built_in">this</span>.$refs.tabControl2.$el.offsetTop</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">contentScroll</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(position.y)</span></span><br><span class="line">        <span class="comment">// this.showTop = (-position.y) &gt; 1000  绝对值Math.abs</span></span><br><span class="line">        <span class="built_in">this</span>.showTop = <span class="built_in">Math</span>.abs(position.y) &gt; <span class="number">1000</span></span><br><span class="line">        <span class="comment">// 2.设置吸顶效果</span></span><br><span class="line">        <span class="built_in">this</span>.isTabFixed = (-position.y) &gt; <span class="built_in">this</span>.tabOffsetTop</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p><strong>两个 tabControl 解决闪退</strong></p>
<p>分别设置 ref=“tabControl1” 和2，再拿到 this.$refs.tabControl1.currentIndex<br>再在点击时将其等于index，就可关联两个 tabControl 的点击</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tabClick (index) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType = <span class="string">&#x27;pop&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType = <span class="string">&#x27;new&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">this</span>.currentType= <span class="string">&#x27;sell&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.$refs.tabControl1.currentIndex = index</span><br><span class="line">      <span class="built_in">this</span>.$refs.tabControl2.currentIndex = index</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="14-6-保留home组件离开时的状态和位置"><a href="#14-6-保留home组件离开时的状态和位置" class="headerlink" title="14.6 保留home组件离开时的状态和位置"></a>14.6 保留home组件离开时的状态和位置</h2><p>路由组件会自动 destroyed，要用 keep-alive ,让组件不自动销毁<br>离开home组件时，保存一个位置信息 saveY，再进来时，将位置设置为原来保存的位置信息即可<br>利用生命周期函数 activated(){} 和函数 deactivated(){}</p>
<ul>
<li>进入是触发 activated()，退出时触发 deactivated()</li>
<li>页面第一次进入，钩子的出发顺序是 created -&gt; mounted -&gt; activated，退出时触发deactivated</li>
<li>当再次进入时，只触发 activated</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">activated () &#123;</span><br><span class="line">    <span class="comment">// 进入时滚动到离开时的位置this.saveY</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>, <span class="built_in">this</span>.saveY, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.$refs.scroll.refresh() <span class="comment">// 进入时再刷新，避免出现小问题</span></span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated () &#123;</span><br><span class="line">    <span class="comment">// 保存离开时的位置信息到this.saveY</span></span><br><span class="line">    <span class="built_in">this</span>.saveY = <span class="built_in">this</span>.$refs.scroll.getScrollY()</span><br><span class="line">    <span class="comment">// console.log(this.saveY);</span></span><br><span class="line">    <span class="comment">// 2.取消全局事件监听（主页图片加载的监听）因为此时设置了keep-alive，所以离开时调用的是deactivated()</span></span><br><span class="line">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;itemImageLoad&#x27;</span>,<span class="built_in">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="14-7-home组件跳转至详情页"><a href="#14-7-home组件跳转至详情页" class="headerlink" title="14.7 home组件跳转至详情页"></a>14.7 home组件跳转至详情页</h2><ol>
<li>是 GoodsListItem 中的点击导致跳转到详情页，详情页为路由组件</li>
<li>跳转详情页时，要将 item的 id 携带过去，才能根据 id 请求相应的数据</li>
<li>动态绑定id，<code>path：&#39;/detail/:id&#39;</code></li>
<li>再在 item 组件中设置点击事件，改变路径：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">itemClick () &#123;</span><br><span class="line">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/detail/&#x27;</span>+<span class="built_in">this</span>.goodsItem.iid)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在 detail 组件中得到 id</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">   <span class="comment">// 1.保存传入的id</span></span><br><span class="line">   <span class="built_in">this</span>.iid = <span class="built_in">this</span>.$route.params.iid</span><br><span class="line">   <span class="comment">// 2.根据id请求数据</span></span><br><span class="line">   getDetail(<span class="built_in">this</span>.iid).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br></pre></td></tr></table></figure>

<p><strong>利用 $ router 改变路径，利用 $route 可获得当前路由的相关信息 params</strong></p>
<h2 id="14-8-详情页detail"><a href="#14-8-详情页detail" class="headerlink" title="14.8 详情页detail"></a>14.8 详情页detail</h2><ol>
<li><strong>轮播图</strong></li>
</ol>
<p>由于之前将所有的路由组件 <code>keep-alive</code> ,所以此时点每个 goodsitem 都是同样的轮播图，所以要用 <code>exclude=&quot;Detail&quot;</code>取消对 detail 路由组件的 keep-alive</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive exclude=<span class="string">&quot;Detail&quot;</span>&gt;</span><br><span class="line">      &lt;router-view/&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>网络请求数据杂乱</strong></li>
</ol>
<p>数据多，且乱，可在传递给组件时先将数据封装为一个对象，再将那一个对象传给组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">info,rule</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// images可能没有值，所以要判断一下</span></span><br><span class="line">      <span class="built_in">this</span>.image = info.images ? info.images[<span class="number">0</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="built_in">this</span>.infos = info.set;</span><br><span class="line">      <span class="built_in">this</span>.sizes = rule.tables</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 detail.js 中封装为一个类，<strong>面向对象封装</strong>，就能将三个地方的信息整合在这个类（构造函数）里面，实例就能得到这些数据</p>
<ol start="3">
<li><p><strong>展示数据</strong></p>
</li>
<li><p>展示数组中的多个图片，用一个img标签遍历</p>
</li>
<li><p>展示的图片较多时，并且是垂直排列的，就会影响 better-scroll 的滚动，就想要将所有图片全部加载完成后再滚动，</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    imgLoad () &#123;</span><br><span class="line">    <span class="comment">//   this.counter +=1</span></span><br><span class="line">    <span class="comment">//   判断，等所有的图片都加载完后，只用进行一次的事件发送</span></span><br><span class="line">    <span class="comment">// 类似于防抖函数，防抖函数在detail组件中接收时应用，</span></span><br><span class="line">    <span class="comment">// 但由于detail组件已经做了混入，混入中也有防抖函数，所以可以将防抖函数保存在data中，就可以在detail组件中任意位置都可用了</span></span><br><span class="line">      <span class="keyword">if</span>(++<span class="built_in">this</span>.counter === <span class="built_in">this</span>.imagesLengeth)&#123;</span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;imgLoad&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>在watch配置中监视图片的length</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    detailInfo () &#123;</span><br><span class="line">      <span class="built_in">this</span>.imagesLengeth = <span class="built_in">this</span>.detailInfo.detailImage[<span class="number">0</span>].list.length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>得到数据的键名，之后才开始</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">&quot;Object.keys(detailInfo).length !== 0 &amp;&amp; detailInfo.detailImage[0].list !== null&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>v-for 还可以遍历数字 ，但是展示的数字是从1开始的，所以要取到下标还得用 <code>index-1</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;info-service-item&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;index in goods.services.length-1&quot;</span></span><br><span class="line">            :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">                &lt;img :src=<span class="string">&quot;goods.services[index-1].icon&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;goods.services[index-<span class="number">1</span>].name&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><strong>时间数据</strong></p>
<p>服务器返回的时间节点，一定是时间戳（秒），需要用 formatDate 函数转变时间戳为格式化的时间字符串</p>
<p><strong>监听goodListItem 组件在不同页面展示的图片的加载</strong></p>
<p>利用路由： if判断</p>
<ul>
<li>this.$route.path.indexOf(‘/home’) 找出路径中有/home的路由组件，发送监听 homeImageLoad</li>
<li>this.$route.path.indexOf(‘/detail’) 对路径中有/detail的路由组件，发送监听detailImageLoad</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    imageLoad () &#123;</span><br><span class="line">      <span class="comment">// 1. 利用路由的路径判断发送哪个事件</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span>.$route.indexOf(<span class="string">&#x27;/home&#x27;</span>))&#123;</span><br><span class="line">         <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;homeImageLoad&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.$route.indexOf(<span class="string">&#x27;/detail&#x27;</span>))&#123;</span><br><span class="line">         <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;detailImageLoad&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p><strong>离开组件时取消监听</strong></p>
<p>在 goodListItem 里面仍然只发送一个 imageLoad 图片加载事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    imageLoad () &#123;</span><br><span class="line">      <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;itemImageLoad&quot;</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<ol>
<li>在 home 组件中的生命周期函数 deactivated() 离开组件时触发的函数中做出设置：取消全局事件监听 <code>this.$bus.$off</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">deactivated () &#123;</span><br><span class="line">    <span class="comment">// 保存离开时的位置信息到this.saveY</span></span><br><span class="line">    <span class="built_in">this</span>.saveY = <span class="built_in">this</span>.$refs.scroll.getScrollY()</span><br><span class="line">    <span class="comment">// console.log(this.saveY);</span></span><br><span class="line">    <span class="comment">// 2.取消全局事件监听（主页图片加载的监听）因为此时设置了keep-alive，所以离开时调用的是deactivated()</span></span><br><span class="line">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;itemImageLoad&#x27;</span>,<span class="built_in">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>this.$bus.$off如果只传一个参数，意味着所有组件中这个事件监听都将被取消，利用第二个参数：函数，指定取消的位置，这个函数就是监听这个事件的函数，即mounted()中this.b u s . bus.bus.on后面跟的函数，要拿到这个函数就要将其保存到data里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">// 可利用混入，减少重复代码</span></span><br><span class="line">    <span class="comment">// 1.监听item中图片加载完成，刷新防抖函数放到了utils.js中，工具库</span></span><br><span class="line">     <span class="keyword">const</span> refresh = debounce(<span class="built_in">this</span>.$refs.scroll.refresh,<span class="number">50</span>)</span><br><span class="line">      <span class="comment">// 对监听的事件进行保存，方便离开home组件时取消此事件监听</span></span><br><span class="line">       <span class="built_in">this</span>.itemImgListener = <span class="function">() =&gt;</span> &#123; refresh() &#125;</span><br><span class="line">       <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;itemImageLoad&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// this.$refs.scroll.refresh()</span></span><br><span class="line">       refresh() <span class="comment">// 此处是闭包，局部变量不会被销毁</span></span><br><span class="line">     &#125;)</span><br><span class="line">       <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;itemImageLoad&#x27;</span>, <span class="built_in">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再在Detail组件中设置 imageLoad 图片加载事件的监听</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">   <span class="comment">// 利用mixin混入后，代替了下面的代码</span></span><br><span class="line">      <span class="keyword">const</span> refresh = debounce(<span class="built_in">this</span>.$refs.scroll.refresh,<span class="number">50</span>)</span><br><span class="line">      <span class="built_in">this</span>.itemImgListener = <span class="function">() =&gt;</span> &#123; refresh() &#125;</span><br><span class="line">     <span class="comment">//  在此组件中监听itemImageLoad图片加载事件</span></span><br><span class="line">      <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;itemImageLoad&#x27;</span>, <span class="built_in">this</span>.itemImgListener)</span><br></pre></td></tr></table></figure>

<p>没有对 Detail 组件keep-alive，所以在离开组件时取消图片加载事件的监听，要用 destroyed() 生命周期函数取消事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">destroyed () &#123;</span><br><span class="line">    <span class="comment">// 离开组件时取消图片加载监听事件</span></span><br><span class="line">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;itemImageLoad&#x27;</span>, <span class="built_in">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="14-9-点击加入购物车"><a href="#14-9-点击加入购物车" class="headerlink" title="14.9 点击加入购物车"></a>14.9 点击加入购物车</h2><p><strong>加入购物车要携带商品的 iid，所以需要使用 <code>vuex</code> 来集中管理数据的变化</strong></p>
<ol>
<li>在detail组件中获取到需要展示的商品的信息，封装到对象product中</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addToCart () &#123;</span><br><span class="line">      <span class="comment">// 1.获取购物车需要展示的信息，因为有多个信息，所以可以放在一个对象里</span></span><br><span class="line">      <span class="keyword">const</span> product = &#123;&#125;</span><br><span class="line">      product.image = <span class="built_in">this</span>.topImages[<span class="number">0</span>]</span><br><span class="line">      product.title = <span class="built_in">this</span>.goods.title</span><br><span class="line">      product.desc = <span class="built_in">this</span>.goods.desc</span><br><span class="line">      product.price = <span class="built_in">this</span>.goods.realPrice</span><br><span class="line">      product.iid = <span class="built_in">this</span>.iid <span class="comment">// id一定要传，因为id是商品的唯一标识，是将id传给服务器获取到对应的商品</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再将数据传递到store中</li>
</ol>
<ul>
<li>不能直接改变state中的数据this.$store.state.cartList.push(product)，因为改变 state 中的数据最好使用 mutations 或 actions 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addToCart () &#123;</span><br><span class="line">      <span class="comment">// 1.获取购物车需要展示的信息，因为有多个信息，所以可以放在一个对象里</span></span><br><span class="line">      <span class="keyword">const</span> product = &#123;&#125;</span><br><span class="line">      product.image = <span class="built_in">this</span>.topImages[<span class="number">0</span>]</span><br><span class="line">      product.title = <span class="built_in">this</span>.goods.title</span><br><span class="line">      product.desc = <span class="built_in">this</span>.goods.desc</span><br><span class="line">      product.price = <span class="built_in">this</span>.goods.realPrice</span><br><span class="line">      product.iid = <span class="built_in">this</span>.iid <span class="comment">// id一定要传，因为id是商品的唯一标识，是将id传给服务器获取到对应的商品</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.将商品添加到购物车里</span></span><br><span class="line">       <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addCart&#x27;</span>,product) <span class="comment">//commit是将product提交到store中mutations里的方法 addCart</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 store 中的 addCart 方法中接收数据，并将数据添加到 state 的常量中去</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">addCart</span>(<span class="params">state,payload</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> oldProduct = state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid === payload.iid)</span><br><span class="line">        <span class="keyword">if</span>(oldProduct)&#123;</span><br><span class="line">             oldProduct.count += <span class="number">1</span> </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            payload.count =<span class="number">1</span></span><br><span class="line">             state.cartList.push(payload)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>添加购物车成功的弹窗 toast</strong></p>
<ul>
<li>添加成功 –&gt; 弹出提示</li>
<li>在vuex里做了某个操作，想让外面的组件监听这一操作是否成功，就要用到 <code>promise</code></li>
<li>vuex 中的 actions 中的方法函数可以返回 promise 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">addCart</span>(<span class="params">context,payload</span>)</span>&#123; <span class="comment">// dispatch可以返回一个promise，可用来监听事件成功与否，据此做弹窗toast效果</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> oldProduct = context.state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid === payload.iid)</span><br><span class="line">        <span class="keyword">if</span>(oldProduct)&#123;</span><br><span class="line">            <span class="comment">// oldProduct.count += 1 这样写也可以，但是无法在devtools中监视到状态变化</span></span><br><span class="line">            <span class="comment">// 将数量加1的情况分发到一个特定的方法中</span></span><br><span class="line">            context.commit(ADD_COUNTER,oldProduct) <span class="comment">// commit 提交到store中mutations里的方法addCounter中去</span></span><br><span class="line">            resolve(<span class="string">&#x27;当前商品数量+1&#x27;</span>)</span><br><span class="line">            reject(<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            payload.count =<span class="number">1</span></span><br><span class="line">            <span class="comment">// context.state.cartList.push(payload)</span></span><br><span class="line">            <span class="comment">// 将添加商品的情况分发到另一个特定的方法中，使得mutations中的方法只对应一种改变</span></span><br><span class="line">            context.commit(ADD_TO_CART,payload)</span><br><span class="line">            resolve(<span class="string">&#x27;添加新的商品&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>将 Toast 组件封装为插件</strong></p>
<ol>
<li>toast文件夹下新建 index.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 main.js 中导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">&#x27;components/common/toast&#x27;</span> <span class="comment">// 1.引入插件</span></span><br><span class="line"><span class="comment">// 2.安装插件,就相当于调用了toast的install函数方法</span></span><br><span class="line">Vue.use(toast) </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>返回 index.js 中配置插件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">&#x27;./Toast&#x27;</span> <span class="comment">// 将toast组件导入进来，好添加组件中的元素</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建组件构造器</span></span><br><span class="line">    <span class="keyword">const</span> toastConstructor = Vue.extend(Toast)</span><br><span class="line">    <span class="comment">// 2.用new的方式，根据组件构造器，可以创建一个组件对象</span></span><br><span class="line">    <span class="keyword">const</span> toast = <span class="keyword">new</span> toastConstructor()</span><br><span class="line">    <span class="comment">// 3.将组件对象手动地挂载到某一个元素上</span></span><br><span class="line">    toast.$mount(<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)) <span class="comment">// 将toast组件对象挂载到div上</span></span><br><span class="line">    <span class="comment">// 4.挂载完之后，toast.$el对应的就是div</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(toast.$el)</span><br><span class="line">    Vue.prototype.$toast = toast <span class="comment">// 将toast组件对象放在vue原型上，使得其他任意组件都可使用$toast方法使用toast组件对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj</span><br></pre></td></tr></table></figure>



<h2 id="14-10-cart-组件数据展示"><a href="#14-10-cart-组件数据展示" class="headerlink" title="14.10 cart 组件数据展示"></a>14.10 cart 组件数据展示</h2><p><strong>navbar上商品的数量</strong></p>
<ul>
<li>可将实时展示的购物车的数量用 vuex 的 <code>getters</code> 做封装，再引入vuex 的 <code>mapGetters</code> 做解构引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//   1.普通写法</span></span><br><span class="line">    <span class="comment">// cartLength () &#123;</span></span><br><span class="line">    <span class="comment">// //   return this.$store.state.cartLish.length  将方法封装到getters之前的写法</span></span><br><span class="line">    <span class="comment">//   return this.$store.getters.cartLength   封装到getters之后的写法</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 2.利用mapGetters解构 ， 还可用 mapState , mapActions</span></span><br><span class="line">    ...mapGetters([<span class="string">&#x27;cartLength&#x27;</span>])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getters.js 中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    cartLength (state) &#123;</span><br><span class="line">       <span class="keyword">return</span> state.cartList.length</span><br><span class="line">    &#125;,</span><br><span class="line">    cartList (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.cartList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>购物车商品的展示</strong></p>
<ul>
<li>刷新界面</li>
</ul>
<p>由于新加入的商品可能未被 better-scroll 所获取，所以导致不能滚动，可以在进入购物车时就做一次刷新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated () &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;0000&#x27;);</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.scroll.refresh()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>商品的选中状态</li>
</ul>
<p><strong>商品状态要保存到 state 中</strong></p>
<p>记录商品的选中状态，不能用属性记录，要在商品对应的对象模型里记录，之后修改也是修改对象模型里的某个属性来进行修改<br>对象模型即 cartList[商品1，商品2] 中的商品模型，为商品模型设置一个 checked 属性，记录它的选中与否</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ADD_TO_CART](state,payload)&#123;</span><br><span class="line">        payload.checked = <span class="literal">true</span> <span class="comment">// 购物车中商品是否选中的属性，默认添加即选中</span></span><br><span class="line">        state.cartList.push(payload)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;cart-list-item  v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in cartList&quot;</span> </span><br><span class="line">            :key=<span class="string">&quot;index&quot;</span> </span><br><span class="line">            :item-info=<span class="string">&#x27;item&#x27;</span>&gt;</span><br><span class="line">&lt;/cart-list-item&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">&#x27;cartList&#x27;</span>])</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>因为模型发生改变，界面才发生改变，在 mutations 中添加payload.check=true，相当于对 cartList 中的商品对象 itemInfo 添加了一个属性 check</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    checkClick () &#123;</span><br><span class="line">      <span class="built_in">this</span>.itemInfo.checked = !<span class="built_in">this</span>.itemInfo.checked</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>底部信息汇总</strong></p>
<ul>
<li>计算总价</li>
</ul>
<p>通过 <code>filter</code> 选出被选中的商品，再通过 <code>reduce</code> 计算总额</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">&#x27;cartList&#x27;</span>]),</span><br><span class="line">    totalPrice () &#123;</span><br><span class="line">    <span class="comment">//   return &#x27;￥&#x27; + this.$store.state.cartList.filter(item =&gt; &#123;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + <span class="built_in">this</span>.cartList.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;  <span class="comment">// mapGetters结构之后这样写</span></span><br><span class="line">          <span class="keyword">return</span> item.checked&#125;).reduce(<span class="function">(<span class="params">preValue,item</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> preValue + item.price * item.count</span><br><span class="line">          &#125;,<span class="number">0</span>).toFixed(<span class="number">2</span>) <span class="comment">// toFixed(2) 计算结果保留2位小数</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p><strong>设置全选按钮</strong></p>
<ul>
<li>初始状态：购物车没有商品时默认不选中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isSelectAll () &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.cartList.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>  <span class="comment">// 购物车中没有商品时，默认不选中</span></span><br></pre></td></tr></table></figure>

<ul>
<li>只要有一个未被选中，则不选中全选按钮，用 <code>find</code> 性能最高</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isSelectAll () &#123;</span><br><span class="line">        <span class="comment">// 1. filter会将数组全部遍历完</span></span><br><span class="line">        <span class="comment">// if(this.cartList.length === 0) return false</span></span><br><span class="line">    <span class="comment">//   return !(this.cartList.filter(item =&gt; !item.checked).length) // 对未被选中的商品长度进行取反，0取反为true</span></span><br><span class="line">    <span class="comment">// 2.简单遍历，也会全部遍历完</span></span><br><span class="line">    <span class="comment">// for(let item of this.cartList)&#123;</span></span><br><span class="line">    <span class="comment">//     if(!item.checked)&#123; // 没有选中的情况为真</span></span><br><span class="line">    <span class="comment">//             return false</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//         return true</span></span><br><span class="line">    <span class="comment">// 3. find 只找到一个就不找了，性能会高一点</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.cartList.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>  <span class="comment">// 购物车中没有商品时，默认不选中</span></span><br><span class="line">      <span class="keyword">return</span> !(<span class="built_in">this</span>.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> !item.checked)) <span class="comment">// (括号里面有值的情况下再取反，结果就为false)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-11-fastclick"><a href="#14-11-fastclick" class="headerlink" title="14.11 fastclick"></a>14.11 fastclick</h2><p>解决移动端300ms延迟</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">&#x27;fastclick&#x27;</span></span><br><span class="line"><span class="comment">// 解决移动端300ms延迟</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure>



<h2 id="14-12-图片懒加载"><a href="#14-12-图片懒加载" class="headerlink" title="14.12 图片懒加载"></a>14.12 图片懒加载</h2><p>图片需要显示在屏幕时再加载</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vue-lazyload -s</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line">Vue.use(VueLazyLoad, &#123;</span><br><span class="line">  loading: <span class="built_in">require</span>(<span class="string">&#x27;./assets/img/common/placeholder.png&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img v-lazy=<span class="string">&quot;showImage&quot;</span> alt=<span class="string">&quot;&quot;</span> @load=<span class="string">&quot;imageLoad&quot;</span>&gt;</span><br></pre></td></tr></table></figure>



<h2 id="14-13-服务器"><a href="#14-13-服务器" class="headerlink" title="14.13 服务器"></a>14.13 服务器</h2><p>服务器也是一台电脑（没有显示器，只有主机），24小时开着，为用户提供服务<br>大部分公司都没有自己的服务器主机，因为自己买主机还要建一个机房，还要考虑散热问题，还有维护主机的成本，所以一般都会租借阿里云、华为云、腾讯云的服务器<br>服务器、主机就必须要有一个操作系统，window(.net)/linux -&gt;安装tomcat/nginx(服务器上的软件、服务器) [nginx可有效处理并发项目、反向代理]<br>build打包之后有一个dist文件夹，将dist文件夹放到服务器里就行</p>
<p><strong>部署nginx</strong><br>mainline version 主力做的版本，开发版<br>stable version 最新稳定版，生产环境上建议使用的版本<br>legacy version 遗留的老版本的稳定版</p>
<p>将自己的电脑变成一台服务器，在window上面部署nginx<br><strong>下载nginx</strong><br>将打包生成的dist文件夹放入nginx文件夹下就可通过localhost访问<br>远程部署，需要安装一些软件再操作<br>linux ubantu操作系统，就可通过图形化界面的方式来进行管理<br>linux centos操作系统，稳定性更强<br>在远程主机上通过linux centos 来部署nginx，<br>安装：通过终端命令来安装nginx</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/2021/04/25/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Redis学习笔记"><a href="#Redis学习笔记" class="headerlink" title="Redis学习笔记"></a>Redis学习笔记</h1><h2 id="1-NoSQL概述"><a href="#1-NoSQL概述" class="headerlink" title="1.NoSQL概述"></a>1.NoSQL概述</h2><h3 id="1-1-为什么用NoSQL"><a href="#1-1-为什么用NoSQL" class="headerlink" title="1.1 为什么用NoSQL"></a>1.1 为什么用NoSQL</h3><p>在90年代，一个网站的访问量一般不大，用单个数据库完全可以轻松应付！<br>在那个时候，更多的都是静态网页，动态交互类型的网站不多。<br>上述架构下，我们来看看数据存储的瓶颈是什么？</p>
<ol>
<li>数据量的总大小，一个机器放不下时</li>
<li>数据的索引（B+ Tree）一个机器的内存放不下时</li>
<li>访问量（读写混合）一个实例不能承受<br>如果满足了上述 1 or 3个，进化….<br>DAL：数据库访问层</li>
</ol>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311174648225.png" alt="image-20210311174648225"></p>
<blockquote>
<p>2、Memcached（缓存）+ MySQL + 垂直拆分</p>
</blockquote>
<p>后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序猿们开始大量使用缓存技术来缓解数据库的压力，优化数据库的结构和索引，开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了比较高的IO压力，在这个时候，Memcached就自然的成为一个非常时尚的技术产品。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311174736061.png" alt="image-20210311174736061"></p>
<blockquote>
<p>3、MySQL主从读写分离</p>
</blockquote>
<p>由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力，读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性，MySQL的master-slave模式成为这个时候的网站标配了。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311174912875.png" alt="image-20210311174912875"></p>
<blockquote>
<p>4、分表分库 + 水平拆分 + Mysql 集群</p>
</blockquote>
<p>在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始<br>出现瓶颈，而数据量的持续猛增，由于MyISAM使用表锁，在高并发下会出现严重的锁问题，大量的高<br>并发MySQL应用开始使用InnoDB引擎代替MyISAM。<br>同时，开始流行使用分表分库来缓解写压力和数据增长的扩展问题，这个时候，分表分库成了一个热门<br>技术，是面试的热门问题，也是业界讨论的热门技术问题。也就是在这个时候，MySQL推出了还不太稳<br>定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能<br>也不能很好满足互联网的需求，只是在高可靠性上提供了非常大的保证。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311175013360.png" alt="image-20210311175013360"></p>
<blockquote>
<p>5、MySQL 的扩展性瓶颈</p>
</blockquote>
<p>MySQL数据库也经常存储一些大文本的字段，导致数据库表非常的大，在做数据库恢复的时候就导致非<br>常的慢，不容易快速恢复数据库，比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据<br>从MySQL省去，MySQL将变的非常的小，关系数据库很强大，但是它并不能很好的应付所有的应用场<br>景，MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难，正是当前使<br>用MySQL的开发人员面临的问题。</p>
<blockquote>
<p>6.如今的样子</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311175121803.png" alt="image-20210311175121803"></p>
<blockquote>
<p>7、为什么用NoSQL？</p>
</blockquote>
<p>今天我们可以通过第三方平台（如：Google，FaceBook等）可以很容易的访问和抓取数据。用户的个<br>人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加、我们如果要对这些用<br>户数据进行挖掘，那SQL数据库已经不适合这些应用了，而NoSQL数据库的发展却能很好的处理这些大<br>的数据！</p>
<h3 id="1-2-什么是NoSQL"><a href="#1-2-什么是NoSQL" class="headerlink" title="1.2 什么是NoSQL"></a>1.2 什么是NoSQL</h3><blockquote>
<p>NoSQL</p>
</blockquote>
<p>NoSQL = Not Only SQL，意思：不仅仅是SQL；<br>泛指非关系型的数据库，随着互联网Web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别<br>是超大规模和高并发的社交网络服务类型的Web2.0纯动态网站已经显得力不从心，暴露了很多难以克服<br>的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展，NoSQL数据库的产生就是为<br>了解决大规模数据集合多种数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。<br>（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模<br>式，无需多余操作就可以横向扩展。</p>
<blockquote>
<p>NoSQL的特点</p>
</blockquote>
<ul>
<li>易拓展</li>
</ul>
<p>NoSQL 数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。<br>数据之间无关系，这样就非常容易扩展，也无形之间，在架构的层面上带来了可扩展的能力。</p>
<ul>
<li>大数据量高性能</li>
</ul>
<p>NoSQL数据库都具有非常高的读写性能，尤其是在大数据量下，同样表现优秀。这得益于它的非关系<br>性，数据库的结构简单。<br>一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大力度的Cache，在针对Web2.0的<br>交互频繁应用，Cache性能不高，而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL<br>在这个层面上来说就要性能高很多了。</p>
<ul>
<li>多样灵活的数据模型</li>
</ul>
<p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式，而在关系数据库里，增删<br>字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是噩梦。</p>
<ul>
<li>传统的RDBMS VS NoSQL</li>
</ul>
<blockquote>
<p>​    <strong>传统的关系型数据库 RDBMS</strong></p>
<ul>
<li><p>高度组织化结构化数据</p>
</li>
<li><p>结构化查询语言（SQL）</p>
</li>
<li><p>数据和关系都存储在单独的表中</p>
</li>
<li><p>数据操纵语言，数据定义语言</p>
</li>
<li><p>严格的一致性</p>
<p><strong>基础事务NoSQL</strong></p>
</li>
<li><p>代表着不仅仅是SQL</p>
</li>
<li><p>没有声明性查询语言</p>
</li>
<li><p>没有预定义的模式</p>
</li>
<li><p>键值对存储，列存储，文档存储，图形数据库</p>
</li>
<li><p>最终一致性，而非ACID属性</p>
</li>
<li><p>非结构化和不可预知的数据</p>
</li>
<li><p>CAP定理</p>
</li>
<li><p>高性能，高可用性 和 可伸缩性</p>
</li>
</ul>
</blockquote>
<p>大数据时代的3V ： 主要是对问题的描述</p>
<ul>
<li>海量 Volume</li>
<li>多样 Variety</li>
<li>实时 Velocity</li>
</ul>
<p>互联网需求的3高 ： 主要是对程序的要求</p>
<ul>
<li>高可用</li>
<li>高并发</li>
<li>高性能</li>
</ul>
<h3 id="1-3-淘宝技术分析"><a href="#1-3-淘宝技术分析" class="headerlink" title="1.3 淘宝技术分析"></a>1.3 淘宝技术分析</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180349058.png" alt="image-20210311180349058"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180408024.png" alt="image-20210311180408024"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180425596.png" alt="image-20210311180425596"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180441641.png" alt="image-20210311180441641"></p>
<blockquote>
<p><strong>大型互联网应用（大数据，高并发，多样数据类型）的难点和解决方案</strong></p>
</blockquote>
<p><strong>难点：</strong></p>
<ul>
<li>数据类型的多样性</li>
<li>数据源多样性和变化重构</li>
<li>数据源改造而数据服务平台不需要大面积重构</li>
</ul>
<p><strong>解决办法：</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180659495.png" alt="image-20210311180659495"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180720138.png" alt="image-20210311180720138"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180852111.png" alt="image-20210311180852111"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180910245.png" alt="image-20210311180910245"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311180924551.png" alt="image-20210311180924551"></p>
<h3 id="1-4-NoSQL四大分类"><a href="#1-4-NoSQL四大分类" class="headerlink" title="1.4 NoSQL四大分类"></a>1.4 NoSQL四大分类</h3><p><strong>KV键值：</strong></p>
<ul>
<li>新浪</li>
<li>美团</li>
<li>阿里</li>
</ul>
<p><strong>文档型数据库（bson格式较多）</strong></p>
<ul>
<li>CouchDB</li>
<li>MongoDB<ul>
<li>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</li>
<li>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</li>
</ul>
</li>
</ul>
<p><strong>列存储数据库</strong></p>
<ul>
<li>Cassandra, HBase</li>
<li>分布式文件系统</li>
</ul>
<p><strong>图关系数据库</strong></p>
<ul>
<li>它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统</li>
<li>社交网络，推荐系统，专注于构建关系图谱</li>
</ul>
<blockquote>
<p>四者对比</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311181647824.png" alt="image-20210311181647824"></p>
<h3 id="1-5-CAP-BASE"><a href="#1-5-CAP-BASE" class="headerlink" title="1.5 CAP+BASE"></a>1.5 CAP+BASE</h3><h4 id="1-5-1BASE的概念"><a href="#1-5-1BASE的概念" class="headerlink" title="1.5.1BASE的概念"></a>1.5.1BASE的概念</h4><ul>
<li>A (Atomicity) 原子性</li>
</ul>
<blockquote>
<p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。<br>比如银行转账，从A账户转100元至B账户，分为两个步骤：<br>1）从A账户取100元；<br>2）存入100元至B账户。<br>这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元</p>
</blockquote>
<ul>
<li>C (Consistency) 一致性</li>
</ul>
<blockquote>
<p>事物前后数据的完整性必须保持一致</p>
</blockquote>
<ul>
<li>I (Isolation) 隔离性</li>
</ul>
<blockquote>
<p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的</p>
</blockquote>
<ul>
<li>D (Durability) 持久性</li>
</ul>
<blockquote>
<p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失</p>
</blockquote>
<h4 id="1-5-2CAP的概念"><a href="#1-5-2CAP的概念" class="headerlink" title="1.5.2CAP的概念"></a>1.5.2CAP的概念</h4><ul>
<li>C : Consistency（强一致性）</li>
<li> A : Availability（可用性）</li>
<li>P : Partition tolerance（分区容错性）</li>
</ul>
<p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。<br>而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容错性是我们必须需要实现的。<br>所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。<br>注意：分布式架构的时候必须做出取舍。<br>一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性</p>
<p>因此牺牲C换取P，这是目前分布式数据库产品的方向</p>
<p><strong>一致性与可用性的决择</strong><br>对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地<br>数据库事务一致性需求<br>很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低， 有些场合对写一致性要求并不<br>高。允许实现最终一致性。</p>
<p><strong>数据库的写实时性和读实时性需求</strong><br>对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应<br>用来说，并不要求这么高的实时性，比方说发一条消息之 后，过几秒乃至十几秒之后，我的订阅者才看<br>到这条动态是完全可以接受的。</p>
<p><strong>对复杂的SQL查询，特别是多表关联查询的需求</strong><br>任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特<br>别是SNS类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主<br>键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。</p>
<p><strong>CAP理论的核心是：</strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，<br>最多只能同时较好的满足两个。因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP<br>原则和满足 AP 原则三 大类：</p>
<ul>
<li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li>
<li>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li>
<li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li>
</ul>
<h2 id="2-Redis概述"><a href="#2-Redis概述" class="headerlink" title="2.Redis概述"></a>2.Redis概述</h2><h3 id="2-1Redis介绍"><a href="#2-1Redis介绍" class="headerlink" title="2.1Redis介绍"></a>2.1Redis介绍</h3><p><strong>Redis：REmote DIctionary Server（远程字典服务器）</strong></p>
<p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。Redis是 NoSQL技术阵营中的一员，它通过多种键值数据类型来适应不同场景下的存储需求，借助一些高层级的接口使其可以胜任如缓存、队列系统的不同角色</p>
<p><strong>Redis与其他key-value缓存产品有以下三个特点</strong></p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的 key-value 类型的数据，同时还提供list、set、zset、hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p><strong>Redis的优势</strong></p>
<ul>
<li><p>性能极高：Redis能读的速度是110000次/s，写的速度是81000次/s</p>
</li>
<li><p>丰富的数据类型：Redis支持二进制案例的Strings、Lists、Hashes、Sets及Ordered Sets数据类型操作</p>
</li>
<li><p>原子性：Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行</p>
</li>
<li><p>丰富的特性：Redis还支持publish/subscribe、通知、key 过期等等特性</p>
</li>
</ul>
<p>官方中文网<a href="http://redis.cn/">http://redis.cn/</a></p>
<p>官网<a href="https://redis.io/">https://redis.io/</a></p>
<h3 id="2-2Redis在Linux环境在安装"><a href="#2-2Redis在Linux环境在安装" class="headerlink" title="2.2Redis在Linux环境在安装"></a>2.2Redis在Linux环境在安装</h3><p>1、下载获得 redis-6.2.1.tar.gz 后将它放到我们Linux的目录下 /opt</p>
<p>2、/opt 目录下，解压命令 ： tar -zxvf redis-6.2.1.tar.gz</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310200821842.png"></p>
<p>3、解压完成后出现文件夹：redis-5.0.7</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310201019977.png" alt="image-20210310201019977"></p>
<blockquote>
<p><strong>运行make命令时故意出现的错误解析</strong>：</p>
<ol>
<li>安装gcc (gcc是linux下的一个编译程序，是c程序的编译工具)<br>能上网: yum install gcc-c++<br>版本测试: gcc-v</li>
<li>二次make</li>
<li>Jemalloc/jemalloc.h: 没有那个文件或目录<br>运行 make distclean 之后再make</li>
<li>Redis Test（可以不用执行）</li>
</ol>
</blockquote>
<p>4、进入目录： cd redis-6.2.1</p>
<p>5、在 redis-6.2.1 目录下执行 make 命令</p>
<p>6、如果make完成后继续执行 make install</p>
<p>7、查看默认安装目录：usr/local/bin</p>
<p>8、拷贝设置文件</p>
<blockquote>
<p>/usr 这是一个非常重要的目录，类似于windows下的Program Files,存放用户的程序</p>
</blockquote>
<blockquote>
<p>cd /usr/local/bin<br>ls -l</p>
<p><strong>在redis的解压目录下备份redis.conf</strong></p>
<p>mkdir myredis<br>cp redis.conf myredis  # 拷一个备份，养成良好的习惯，我们就修改这个文件</p>
<p><strong>修改配置保证可以后台应用</strong></p>
<p>vim redis.conf</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310201256444.png" alt="image-20210310201256444"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310201323971.png" alt="image-20210310201323971"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310201530209.png" alt="image-20210310201530209"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310202030827.png" alt="image-20210310202030827"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310202158878.png" alt="image-20210310202158878"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311184758459.png" alt="image-20210311184758459"></p>
<ul>
<li>A、redis.conf配置文件中daemonize守护线程，默认是NO。</li>
<li>B、daemonize是用来指定redis是否要用守护线程的方式启动。</li>
</ul>
<p><strong>daemonize 设置yes或者no区别</strong></p>
<ul>
<li><p>daemonize:yes</p>
<ul>
<li>redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启<br>守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项<br>pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程</li>
</ul>
</li>
<li><p>daemonize:no</p>
<ul>
<li>当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭<br>连接工具(putty,xshell等)都会导致redis进程退出。</li>
</ul>
<p>9、启动测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#【shell】启动redis服务</span></span><br><span class="line"></span><br><span class="line">[root@192 bin]<span class="comment"># cd /usr/local/bin</span></span><br><span class="line">[root@192 bin]<span class="comment"># redis-server /opt/redis-5.0.7/redis.conf</span></span><br><span class="line"></span><br><span class="line">redis客户端连接===&gt; 观察地址的变化，如果连接ok,是直接连上的，redis默认端口号 6379</span><br><span class="line"></span><br><span class="line">[root@192 bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 helloworld</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;helloworld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#【shell】ps显示系统当前进程信息</span></span><br><span class="line"></span><br><span class="line">[root@192 myredis]<span class="comment"># ps -ef|grep redis</span></span><br><span class="line">root    16005    1  0 04:45 ?     00:00:00 redis-server</span><br><span class="line">127.0.0.1:6379</span><br><span class="line">root    16031  15692  0 04:47 pts/0   00:00:00 redis-cli -p 6379</span><br><span class="line">root    16107  16076  0 04:51 pts/2   00:00:00 grep --color=auto redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#【redis】关闭连接</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【shell】ps显示系统当前进程信息</span></span><br><span class="line">[root@192 myredis]<span class="comment"># ps -ef|grep redis</span></span><br><span class="line">root    16140  16076  0 04:53 pts/2   00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310203013001.png" alt="image-20210310203013001"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310203227429.png" alt="image-20210310203227429"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310203328902.png" alt="image-20210310203328902"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210310204335734.png" alt="image-20210310204335734"></p>
<p>文件参数详解</p>
<ul>
<li>redis-server ：Redis服务器</li>
<li>redis-cli ：Redis客户端</li>
<li>redis-sentinel ：Redis哨兵端</li>
<li>redis-benchmark：Redis性能测试工具</li>
<li>redis-check-aof ：AOF文件修复工具</li>
<li>redis-check-rdb ：RDB文件检索工具</li>
</ul>
<h2 id="3-五大数据类型"><a href="#3-五大数据类型" class="headerlink" title="3.五大数据类型"></a>3.五大数据类型</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210311191512620.png" alt="image-20210311191512620"></p>
<p><strong>全段翻译：</strong><br>Redis是一个开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。它支持数<br>据结构，例如字符串，哈希，列表，集合，带范围查询的排序集合，位图，超日志，带有半径查询和流<br>的地理空间索引。Redis具有内置的复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过<br>Redis Sentinel和Redis Cluster自动分区提供了高可用性。</p>
<p><strong>Redis键(Key)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> keys * 查看所有的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set name zhuangkang</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> exists key 的名字，判断某个key是否存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> move key db ---&gt; 当前库就没有了，被移除了</span></span><br><span class="line">127.0.0.1:6379&gt; move name 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line"><span class="meta">#</span><span class="bash"> expire key 秒钟：为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ttl key 查看还有多少秒过期，-1 表示永不过期，-2 表示已过期</span></span><br><span class="line">127.0.0.1:6379&gt; set name zhuangkang</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">type</span> key 查看你的key是什么类型</span></span><br><span class="line">127.0.0.1:6379&gt; set name zhuangkang</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zhuangkang&quot;</span><br><span class="line">127.0.0.1:6379&gt; type name</span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<h3 id="3-1-String-字符串类型"><a href="#3-1-String-字符串类型" class="headerlink" title="3.1 String(字符串类型)"></a>3.1 String(字符串类型)</h3><p>String是redis最基本的类型，你可以理解成Memcached一模一样的类型，一个key对应一个value。<br>String类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象。<br>String类型是redis最基本的数据类型，一个redis中字符串value最多可以是512M。</p>
<p><strong>常用命令解析</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span>、get、del、append、strlen</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; set key1 value1  # 设置值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1      # 获得key</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:6379&gt; del key1      # 删除key</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *       # 查看全部的key</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; exists key1    # 确保 key1 不存在</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; append key1 &quot;hello&quot;  # 对不存在的 key 进行 APPEND ，等同于 SET</span><br><span class="line">key1 &quot;hello&quot;</span><br><span class="line">(integer) 5   # 字符长度</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 &quot;-2333&quot;  # 对已存在的字符串进行 APPEND</span><br><span class="line">(integer) 10   # 长度从 5 个字符增加到 10 个字符</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello-2333&quot;</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1    # # 获取字符串的长度</span><br><span class="line">(integer) 10 </span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incr、decr   一定要是数字才能进行加减，+1 和 -1。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incrby、decrby 命令将 key 中储存的数字加上指定的增量值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; set views 0    # 设置浏览量为0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views     # 浏览 + 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; incr views     # 浏览 + 1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; decr views     # 浏览 - 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; incrby views 10  # +10</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; decrby views 10  # -10</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> range [范围]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getrange 获取指定区间范围内的值，类似between...and的关系，从零到负一表示全部</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; set key2 abcd123456  # 设置key2的值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange key2 0 -1  # 获得全部的值</span><br><span class="line">&quot;abcd123456&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange key2 0 2   # 截取部分字符串</span><br><span class="line">&quot;abc&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setrange 设置指定区间范围内的值，格式是setrange key值 具体值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line">&quot;abcd123456&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 1 xx  # 替换值</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line">&quot;axxd123456&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setex（<span class="built_in">set</span> with expire）键秒值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setnx（<span class="built_in">set</span> <span class="keyword">if</span> not exist）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; setex key3 60 expire  # 设置过期时间</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3  # 查看剩余的时间</span><br><span class="line">(integer) 55</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey &quot;redis&quot;  # 如果不存在就设置，成功返回1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey &quot;mongodb&quot;  # 如果存在就设置，失败返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;redis&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mset   Mset 命令用于同时设置一个或多个 key-value 对。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mget   Mget 命令返回所有(一个或多个)给定 key 的值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">      如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> msetnx  当所有 key 都成功设置，返回 1 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">      如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。原子操</span></span><br><span class="line">作</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; mset k10 v10 k11 v11 k12 v12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k12&quot;</span><br><span class="line">2) &quot;k11&quot;</span><br><span class="line">3) &quot;k10&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget k10 k11 k12 k13</span><br><span class="line">1) &quot;v10&quot;</span><br><span class="line">2) &quot;v11&quot;</span><br><span class="line">3) &quot;v12&quot;</span><br><span class="line">4) (nil)</span><br><span class="line">127.0.0.1:6379&gt; msetnx k10 v10 k15 v15 # 原子性操作！</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get key15</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 传统对象缓存</span></span><br><span class="line">set user:1 value(json数据)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用来缓存对象</span></span><br><span class="line">mset user:1:name zhangsan user:1:age 2</span><br><span class="line">mget user:1:name user:1:age</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getset（先get再<span class="built_in">set</span>）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb  # 没有旧值，返回 nil</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset db redis   # 返回旧值 mongodb</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure>

<p>String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。<br>常规key-value缓存应用：<br>常规计数：微博数，粉丝数等</p>
<h3 id="3-2-List-集合类型"><a href="#3-2-List-集合类型" class="headerlink" title="3.2 List(集合类型)"></a>3.2 List(集合类型)</h3><p>在Redis中，List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表一样，我们可以在其头部(left)和尾部(right)添加新的元素。在插入时，如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除。List中可以包含的最大元素数量是4294967295。从元素插入和删除的效率视角来看，如果我们是在链表的两头插入或删除元素，这将会是非常高效的操作，即使链表中已经存储了百万条记录，该操作也可以在常量时间内完成。然而需要说明的是，如果元素插入或删除操作是作用于链表中间，那将会是非常低效的。</p>
<p><strong>常用命令解析</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lpush：将一个或多个值插入到列表头部。（左）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpush：将一个或多个值插入到列表尾部。（右）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrange：返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此</span></span><br><span class="line">类推。</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list &quot;right&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">3) &quot;right&quot;</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lpop 命令用于移除并返回列表的第一个元素。当列表 key 不存在时，返回 nil 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpop 移除列表的最后一个元素，返回值为移除的元素。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; Lpop list</span><br><span class="line">&quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; Rpop list</span><br><span class="line">&quot;right&quot;</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lindex，按照索引下标获得元素（-1代表最后一个，0代表是第一个）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; Lindex list 1</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; Lindex list 0</span><br><span class="line">&quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; Lindex list -1</span><br><span class="line">&quot;one&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> llen 用于返回列表的长度。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; Lpush list &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; Lpush list &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; Lpush list &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; Llen list  # 返回列表的长度</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrem key 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ltrim key 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区</span></span><br><span class="line">间之内的元素都将被删除。</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;hello2&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;hello3&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ltrim mylist 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;hello2&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpoplpush 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; rpush mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist &quot;foo&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist &quot;bar&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush mylist myotherlist</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange myotherlist 0 -1</span><br><span class="line">1) &quot;bar&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lset key index value 将列表 key 下标为 index 的元素的值设置为 value 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; exists list  # 对空列表(key 不存在)进行 LSET</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item # 报错</span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; lpush list &quot;value1&quot; # 对非空列表进行 LSET</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 0</span><br><span class="line">1) &quot;value1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 &quot;new&quot;  # 更新值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 0</span><br><span class="line">1) &quot;new&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list 1 &quot;new&quot;  # index 超出范围报错</span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> linsert key before/after pivot value 用于在列表的元素前或者后插入元素。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;World&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LINSERT mylist BEFORE <span class="string">&quot;World&quot;</span> <span class="string">&quot;There&quot;</span></span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 -1</span></span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;There&quot;</span><br><span class="line">3) &quot;World&quot;</span><br></pre></td></tr></table></figure>

<p><strong>List总结</strong></p>
<ul>
<li>它是一个字符串链表，left，right 都可以插入添加</li>
<li>如果键不存在，创建新的链表</li>
<li>如果键已存在，新增内容</li>
<li>如果值全移除，对应的键也就消失了</li>
<li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了</li>
</ul>
<p>list就是链表，略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。List的另一个应用就是消息队列，可以利用List的PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作List中某一段的api，你可以直接查询，删除List中某一段的元素。<br>Redis的list是每个子元素都是String类型的双向链表，可以通过push和pop操作从列表的头部或者尾部添加或者删除元素，这样List即可以作为栈，也可以作为队列。</p>
<h3 id="3-3-Set-集合"><a href="#3-3-Set-集合" class="headerlink" title="3.3 Set(集合)"></a>3.3 Set(集合)</h3><p>Redis中的Hash类型可以看成具有String Key和String Value的map容器。所以该类型非常适合于存储值对象的信息。如用户信息：Username、Password和Age等。每一个Hash可以存储4294967295个键值对。</p>
<p><strong>常用命令解析</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sadd 将一个或多个成员元素加入到集合中，不能重复</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> smembers 返回集合中的所有的成员。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sismember 命令判断成员元素是否是集合的成员。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;zhuangkang&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;zhuangkang&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset &quot;world&quot;</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> scard，获取集合里面的元素个数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> srem key value 用于移除集合中的一个或多个成员元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset &quot;zhuangkang&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> srandmember key 命令用于返回集合中的一个随机元素。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;zhuangkang&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> spop key 用于移除集合中的指定 key 的一个或多个随机元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;kuangshen&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line">&quot;kuangshen&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> smove SOURCE DESTINATION MEMBER</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将指定成员 member 元素从 <span class="built_in">source</span> 集合移动到 destination 集合。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;kuangshen&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 &quot;set2&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 &quot;kuangshen&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) &quot;kuangshen&quot;</span><br><span class="line">2) &quot;set2&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">- 数字集合类</span><br><span class="line"> - 差集： sdiff</span><br><span class="line"> - 交集： sinter</span><br><span class="line"> - 并集： sunion</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd key1 &quot;a&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 &quot;b&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 &quot;c&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 &quot;c&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 &quot;d&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 &quot;e&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key1 key2 # 差集</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; SINTER key1 key2 # 交集</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; SUNION key1 key2 # 并集</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line">5) &quot;d&quot;</span><br></pre></td></tr></table></figure>

<p>在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p>
<h3 id="3-4-Hash-集合"><a href="#3-4-Hash-集合" class="headerlink" title="3.4 Hash(集合)"></a>3.4 Hash(集合)</h3><p><strong>常用命令解析</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hset、hget 命令用于为哈希表中的字段赋值 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hmset、hmget 同时将多个field-value对设置到哈希表中。会覆盖哈希表中已存在的字段。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hgetall 用于返回哈希表中，所有的字段和值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hdel  用于删除哈希表 key 中的一个或多个指定字段</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field1 &quot;kuangshen&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1</span><br><span class="line">&quot;kuangshen&quot;</span><br><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; HDEL myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hlen 获取哈希表中字段的数量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexists 查看哈希表的指定字段是否存在。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field3</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hkeys 获取哈希表中的所有域（field）。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hvals 返回哈希表所有域(field)的值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; HKEYS myhash</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;field1&quot;</span><br><span class="line">127.0.0.1:6379&gt; HVALS myhash</span><br><span class="line">1) &quot;World&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hincrby 为哈希表中的字段值加上指定增量值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field 5</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field 1</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field -1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field -10</span><br><span class="line">(integer) -5</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hsetnx 为哈希表中不存在的的字段赋值 。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX myhash field1 &quot;hello&quot;</span><br><span class="line">(integer) 1  # 设置成功，返回 1 。</span><br><span class="line">127.0.0.1:6379&gt; HSETNX myhash field1 &quot;world&quot;</span><br><span class="line">(integer) 0  # 如果给定字段已经存在，返回 0 。</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br>存储部分变更的数据，如用户信息等。</p>
<h3 id="3-5-Zset-集合"><a href="#3-5-Zset-集合" class="headerlink" title="3.5 Zset(集合)"></a>3.5 Zset(集合)</h3><p>在Redis中，我们可以将Set类型看作为没有排序的字符串集合。Set可包含的最大元素数量是4294967295。Set类型在功能上还存在着一个非常重要的特性，即在服务器端完成多个Sets之间的聚合计算操作，如unions、intersections和differences。由于这些操作均在服务端完成，因此效率极高，而且也节省了大量的网络IO开销。</p>
<p><strong>常用命令解析</strong></p>
<p><strong>在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是 k1 score1 v1 score2 v2</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zadd  将一个或多个成员元素及其分数值加入到有序集当中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zrange 返回有序集中，指定区间内的成员</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)</span></span><br><span class="line">次序排列。</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaoming</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 xiaohong</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 zhuangkang</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> Inf无穷大量+∞,同样地,-∞可以表示为-Inf。</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf # 显示整个有序集</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;xiaoming&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores # 递增排列</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaoming&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">5) &quot;xiaohong&quot;</span><br><span class="line">6) &quot;5000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 WITHSCORES  # 递减排列</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;5000&quot;</span><br><span class="line">3) &quot;xiaoming&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">5) &quot;zhuangkang&quot;</span><br><span class="line">6) &quot;500&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 WITHSCORES # 显示工资 &lt;=2500</span><br><span class="line">的所有成员</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaoming&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zrem 移除有序集中的一个或多个成员</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;xiaoming&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem salary kuangshen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1</span><br><span class="line">1) &quot;xiaoming&quot;</span><br><span class="line">2) &quot;xiaohong&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zcard  命令用于计算集合中元素的数量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(integer) 2</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zcount 计算有序集合中指定分数区间的成员数量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 &quot;world&quot; 3 &quot;zhuangkang&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset 1 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset 1 2</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zrank 返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaoming</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 xiaohong</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 zhuangkang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES  # 显示所有成员及其 score 值</span><br><span class="line">1) &quot;zhuangkang&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaoming&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">5) &quot;xiaohong&quot;</span><br><span class="line">6) &quot;5000&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrank salary zhuangkang  # 显示 zhuangkang 的薪水排名，最少</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrank salary xiaohong  # 显示 xiaohong 的薪水排名，第三</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zrevrank 返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ===================================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK salary kuangshen # 狂神第三</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK salary xiaohong  # 小红第一</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>

<p>和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如<br>一个存储全班同学成绩的sorted set，其集合value可以是同学的学号，而score就可以是其考试得分，<br>这样在数据插入集合的时候，就已经进行了天然的排序。可以用sorted set来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p>
<h2 id="4-特殊数据类型"><a href="#4-特殊数据类型" class="headerlink" title="4.特殊数据类型"></a>4.特殊数据类型</h2><h3 id="4-1-GEO地理位置"><a href="#4-1-GEO地理位置" class="headerlink" title="4.1 GEO地理位置"></a>4.1 GEO地理位置</h3><blockquote>
<p>简介</p>
</blockquote>
<p>Redis 的 GEO 特性在 Redis 3.2 版本中推出， 这个功能可以将用户给定的地理位置信息储存起来， 并对这些信息进行操作。来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能。geo的数据类型为<strong>zset</strong>。<br>GEO 的数据结构总共有六个常用命令：<strong>geoadd、geopos、geodist、georadius、georadiusbymember、gethash</strong></p>
<p>官方文档：<a href="https://www.redis.net.cn/order/3685.html">https://www.redis.net.cn/order/3685.html</a></p>
<blockquote>
<p>geoadd</p>
</blockquote>
<p><strong>解析</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geoadd key longitude latitude member ...</span><br><span class="line"><span class="comment"># 将给定的空间元素(纬度、经度、名字)添加到指定的键里面。</span></span><br><span class="line"><span class="comment"># 这些数据会以有序集he的形式被储存在键里面，从而使得georadius和georadiusbymember这样的</span></span><br><span class="line">命令可以在之后通过位置查询取得这些元素。</span><br><span class="line"><span class="comment"># geoadd命令以标准的x,y格式接受参数,所以用户必须先输入经度,然后再输入纬度。</span></span><br><span class="line"><span class="comment"># geoadd能够记录的坐标是有限的:非常接近两极的区域无法被索引。</span></span><br><span class="line"><span class="comment"># 有效的经度介于-180-180度之间，有效的纬度介于-85.05112878 度至 85.05112878 度之间。，</span></span><br><span class="line">当用户尝试输入一个超出范围的经度或者纬度时,geoadd命令将返回一个错误。</span><br></pre></td></tr></table></figure>

<p><strong>测试模拟真实经纬度(数据来源：百度)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 北京</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.48 31.40 上海 113.88 22.55 深圳 120.21</span><br><span class="line">30.20 杭州</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.54 29.40 重庆 108.93 34.23 西安 114.02</span><br><span class="line">30.58 武汉</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>geopos</p>
</blockquote>
<p><strong>解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geopos key member [member...]</span><br><span class="line"><span class="comment">#从key里返回所有给定位置元素的位置（经度和纬度）</span></span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city 北京</span><br><span class="line">1) 1) <span class="string">&quot;116.23000055551528931&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;40.2200010338739844&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city 上海 重庆</span><br><span class="line">1) 1) <span class="string">&quot;121.48000091314315796&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;31.40000025319353938&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;106.54000014066696167&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;29.39999880018641676&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city 新疆</span><br><span class="line">1) (nil)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>geodist</p>
</blockquote>
<p><strong>解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geodist key member1 member2 [unit]</span><br><span class="line"><span class="comment"># 返回两个给定位置之间的距离，如果两个位置之间的其中一个不存在,那么命令返回空值。</span></span><br><span class="line"><span class="comment"># 指定单位的参数unit必须是以下单位的其中一个：</span></span><br><span class="line"><span class="comment">#  m表示单位为米</span></span><br><span class="line"><span class="comment">#  km表示单位为千米</span></span><br><span class="line"><span class="comment">#  mi表示单位为英里</span></span><br><span class="line"><span class="comment">#  ft表示单位为英尺</span></span><br><span class="line"><span class="comment">#  如果用户没有显式地指定单位参数,那么geodist默认使用米作为单位。</span></span><br><span class="line"><span class="comment">#geodist命令在计算距离时会假设地球为完美的球形,在极限情况下,这一假设最大会造成0.5%的误</span></span><br><span class="line">差。</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city 北京 上海</span><br><span class="line"><span class="string">&quot;1088785.4302&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city 北京 上海 km</span><br><span class="line"><span class="string">&quot;1088.7854&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city 重庆 北京 km</span><br><span class="line"><span class="string">&quot;1491.6716&quot;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>georadius</p>
</blockquote>
<p><strong>解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">georadius key longitude latitude radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</span><br><span class="line"><span class="comment"># 以给定的经纬度为中心， 找出某一半径内的元素</span></span><br></pre></td></tr></table></figure>

<p><strong>测试：重新连接 redis-cli，增加参数 –raw ，可以强制输出中文，不然会乱码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zhuangkang bin]<span class="comment"># redis-cli --raw -p 6379</span></span><br><span class="line"><span class="comment"># 在 china:city 中寻找坐标 100 30 半径为 1000km 的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km</span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line"><span class="comment"># withdist 返回位置名称和中心距离</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withdist</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">西安</span><br><span class="line">963.3171</span><br><span class="line"><span class="comment"># withcoord 返回位置名称和经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord</span><br><span class="line">重庆</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">西安</span><br><span class="line">108.92999857664108276</span><br><span class="line">34.23000121926852302</span><br><span class="line"><span class="comment"># withdist withcoord 返回位置名称 距离 和经纬度 count 限定寻找个数</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count</span><br><span class="line">1</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count</span><br><span class="line">2</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">西安</span><br><span class="line">963.3171</span><br><span class="line">108.92999857664108276</span><br><span class="line">34.23000121926852302</span><br></pre></td></tr></table></figure>



<blockquote>
<p>georadiusbymember</p>
</blockquote>
<p><strong>解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">georadiusbymember key member radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</span><br><span class="line"><span class="comment"># 找出位于指定范围内的元素，中心点是由给定的位置元素决定</span></span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 北京 1000 km</span><br><span class="line">北京</span><br><span class="line">西安</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 上海 400 km</span><br><span class="line">杭州</span><br><span class="line">上海</span><br></pre></td></tr></table></figure>



<blockquote>
<p>geohash</p>
</blockquote>
<p><strong>解析：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geohash key member [member...]</span><br><span class="line"><span class="comment"># Redis使用geohash将二维经纬度转换为一维字符串，字符串越长表示位置更精确,两个字符串越相似表示距离越近。</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-HyperLogLog"><a href="#4-2-HyperLogLog" class="headerlink" title="4.2 HyperLogLog"></a>4.2 HyperLogLog</h3><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。<br>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积<br>非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。<br>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基<br>数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。<br>HyperLogLog则是一种算法，它提供了不精确的去重计数方案。<br>举个栗子：假如我要统计网页的UV（浏览用户数量，一天内同一个用户多次访问只能算一次），传统的<br>解决方案是使用Set来保存用户id，然后统计Set中的元素数量来获取页面UV。但这种方案只能承载少量<br>用户，一旦用户数量大起来就需要消耗大量的空间来存储用户id。我的目的是统计用户数量而不是保存<br>用户，这简直是个吃力不讨好的方案！而使用Redis的HyperLogLog最多需要12k就可以统计大量的用户<br>数，尽管它大概有0.81%的错误率，但对于统计UV这种不需要很精确的数据是可以忽略不计的。</p>
<blockquote>
<p><strong>什么是基数</strong></p>
</blockquote>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。<br>基数估计就是在误差可接受的范围内，快速计算基数。</p>
<p><strong>常用命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[PFADD key element [element ...]  <span class="comment"># 添加指定元素到 HyperLogLog 中。</span></span><br><span class="line">[PFCOUNT key [key ...] <span class="comment"># 返回给定 HyperLogLog 的基数估算值。</span></span><br><span class="line">[PFMERGE destkey sourcekey[sourcekey ...] <span class="comment"># 将多个 HyperLogLog 合并为一个 HyperLogLog，并集计算</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey</span><br><span class="line">10</span><br><span class="line">127.0.0.1:6379&gt; PFADD mykey2 i j z x c v b n m</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey3</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h2 id="5-Redis配置文件解析"><a href="#5-Redis配置文件解析" class="headerlink" title="5.Redis配置文件解析"></a>5.Redis配置文件解析</h2><h3 id="5-1-熟悉基本配置"><a href="#5-1-熟悉基本配置" class="headerlink" title="5.1 熟悉基本配置"></a>5.1 熟悉基本配置</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312202909307.png" alt="image-20210312202909307"></p>
<p>1、配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit<br>2、对 大小写 不敏感</p>
<blockquote>
<p>INCLUDE</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312202936947.png" alt="image-20210312202936947"></p>
<blockquote>
<p>NETWORK网络配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1    <span class="comment"># 绑定的ip</span></span><br><span class="line">protected-mode yes  <span class="comment"># 保护模式</span></span><br><span class="line">port 6379      <span class="comment"># 默认端口</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>GENERAL</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes  <span class="comment"># 默认情况下，Redis不作为守护进程运行。需要开启的话，改为 yes</span></span><br><span class="line">supervised no  <span class="comment"># 可通过upstart和systemd管理Redis守护进程</span></span><br><span class="line">pidfile /var/run/redis_6379.pid  <span class="comment"># 以后台进程方式运行redis，则需要指定pid 文件</span></span><br><span class="line">loglevel notice <span class="comment"># 日志级别。可选项有：</span></span><br><span class="line"><span class="comment"># debug（记录大量日志信息，适用于开发、测试阶段）； </span></span><br><span class="line">        <span class="comment"># verbose（较多日志信息）； </span></span><br><span class="line">        <span class="comment"># notice（适量日志信息，使用于生产环境）；</span></span><br><span class="line">        <span class="comment"># warning（仅有部分重要、关键信息才会被记录）。</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span>    <span class="comment"># 日志文件的位置，当指定为空字符串时，为标准输出</span></span><br><span class="line">databases 16   <span class="comment"># 设置数据库的数目。默认的数据库是DB 0</span></span><br><span class="line">always-show-logo yes  <span class="comment"># 是否总是显示logo</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SNAPSHOPTING 快照</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes  <span class="comment"># 持久化出现错误后，是否依然进行继续进行工作</span></span><br><span class="line">rdbcompression yes  <span class="comment"># 使用压缩rdb文件 yes：压缩，但是需要一些cpu的消耗。no：不压</span></span><br><span class="line">缩，需要更多的磁盘空间</span><br><span class="line">rdbchecksum yes    <span class="comment"># 是否校验rdb文件，更有利于文件的容错性，但是在保存rdb文件的时</span></span><br><span class="line">候，会有大概10%的性能损耗</span><br><span class="line">dbfilename dump.rdb  <span class="comment"># dbfilenamerdb文件名称</span></span><br><span class="line">dir ./   <span class="comment"># dir 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SECURITY安全</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line"><span class="comment"># 连接客户端</span></span><br><span class="line"><span class="comment"># 获得和设置密码</span></span><br><span class="line">config get requirepass</span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="comment">#测试ping，发现需要验证</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">NOAUTH Authentication required.</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<blockquote>
<p>限制</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxclients 10000  <span class="comment"># 设置能连上redis的最大客户端连接数量</span></span><br><span class="line">maxmemory &lt;bytes&gt;  <span class="comment"># redis配置的最大内存容量</span></span><br><span class="line">maxmemory-policy noeviction  <span class="comment"># maxmemory-policy 内存达到上限的处理策略</span></span><br><span class="line">    <span class="comment">#volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line">    <span class="comment">#volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line">    <span class="comment">#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line">    <span class="comment">#allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line">    <span class="comment">#allkeys-random：随机移除任何key。</span></span><br><span class="line">    <span class="comment">#noeviction：不移除任何key，只是返回一个写错误。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>append only模式</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no  <span class="comment"># 是否以append only模式作为持久化方式，默认使用的是rdb方式持久化，这种</span></span><br><span class="line">方式在许多应用中已经足够用了</span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>  <span class="comment"># appendfilename AOF 文件名称</span></span><br><span class="line">appendfsync everysec  <span class="comment"># appendfsync aof持久化策略的配置</span></span><br><span class="line">  <span class="comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line">  <span class="comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line">  <span class="comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-常见配置介绍"><a href="#5-2-常见配置介绍" class="headerlink" title="5.2 常见配置介绍"></a>5.2 常见配置介绍</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span></span><br><span class="line">	daemonize no </span><br><span class="line"><span class="comment">#2、当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line">	pidfile /var/run/redis.pid	</span><br><span class="line"><span class="comment">#3、指定Redis监听端口，默认端口为6379</span></span><br><span class="line">	port 6379</span><br><span class="line"><span class="comment">#4、绑定的主机地址</span></span><br><span class="line">	<span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"><span class="comment">#5、当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line">	timeout300</span><br><span class="line"><span class="comment">#6、指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line">	loglevel verbose</span><br><span class="line"><span class="comment">#7、日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会给/dev/null</span></span><br><span class="line">	logfile stdout</span><br><span class="line"><span class="comment">#8、设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</span></span><br><span class="line">	databases 16</span><br><span class="line"><span class="comment">#9、指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line">	save</span><br><span class="line">	Redis默认配置文件中提供了三个条件：</span><br><span class="line">	save 900 1</span><br><span class="line">	save 300 10</span><br><span class="line">	save 60 10000</span><br><span class="line">	分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改</span><br><span class="line"><span class="comment">#10、指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span><br><span class="line">	rdbcompression yes</span><br><span class="line"><span class="comment">#11、指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line">	dbfilename dump.rdb</span><br><span class="line"><span class="comment">#12、指定本地数据库存放目录</span></span><br><span class="line">	dir ./</span><br><span class="line"><span class="comment">#13、设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line">	slaveof</span><br><span class="line"><span class="comment">#14、当master服务设置了密码保护时，slav服务连接master的密码</span></span><br><span class="line">	masterauth</span><br><span class="line"><span class="comment">#15、设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭</span></span><br><span class="line">	requirepass foobared</span><br><span class="line"><span class="comment">#16、设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。</span></span><br><span class="line">	maxclients 128</span><br><span class="line"><span class="comment">#17、指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line">	maxmemory</span><br><span class="line"><span class="comment">#18、指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span><br><span class="line">	appendonly no</span><br><span class="line"><span class="comment">#19、指定更新日志文件名，默认为appendonly.aof</span></span><br><span class="line">	appendfilename appendonly.aof	</span><br><span class="line"><span class="comment">#20、指定更新日志条件，共有3个可选值：</span></span><br><span class="line">	no：表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line">	always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line">	everysec：表示每秒同步一次（折衷，默认值）</span><br><span class="line">	appendfsync everysec</span><br><span class="line"><span class="comment">#21、指定是否启用虚拟内存机制，默认值为no</span></span><br><span class="line">	vm-enabled no</span><br><span class="line"><span class="comment">#22、虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span><br><span class="line">	vm-swap-file /tmp/redis.swap</span><br><span class="line"><span class="comment">#23、将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span></span><br><span class="line">	vm-max-memory 0</span><br><span class="line"><span class="comment">#24、Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的</span></span><br><span class="line">	vm-page-size 32</span><br><span class="line"><span class="comment">#25、设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。</span></span><br><span class="line">	vm-pages 134217728</span><br><span class="line"><span class="comment">#26、设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</span></span><br><span class="line">	vm-max-threads 4</span><br><span class="line"><span class="comment">#27、设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span></span><br><span class="line">	glueoutputbuf yes</span><br><span class="line"><span class="comment">#28、指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法	</span></span><br><span class="line">	hash-max-zipmap-entries 64</span><br><span class="line">	hash-max-zipmap-value 512</span><br><span class="line"><span class="comment">#29、指定是否激活重置哈希，默认为开启</span></span><br><span class="line">	activerehashing yes</span><br><span class="line"><span class="comment">#30、指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span></span><br><span class="line">	include /path/to/local.conf</span><br></pre></td></tr></table></figure>



<h2 id="6-删除策略"><a href="#6-删除策略" class="headerlink" title="6.删除策略"></a>6.删除策略</h2><h3 id="6-1-Redis中的数据特征"><a href="#6-1-Redis中的数据特征" class="headerlink" title="6.1 Redis中的数据特征"></a>6.1 Redis中的数据特征</h3><ul>
<li><p> Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p>
</li>
<li><p> XX ：具有时效性的数据</p>
</li>
<li><p>-1 ：永久有效的数据</p>
</li>
<li><p>-2 ：已经过期的数据 或 被删除的数据 或 未定义的数据</p>
</li>
</ul>
<h3 id="6-2-数据删除策略"><a href="#6-2-数据删除策略" class="headerlink" title="6.2 数据删除策略"></a>6.2 数据删除策略</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312210918949.png" alt="image-20210312210918949"> </p>
<p><strong>目标：</strong>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或<br>内存泄露</p>
<h4 id="6-2-1-定时删除"><a href="#6-2-1-定时删除" class="headerlink" title="6.2.1 定时删除"></a>6.2.1 定时删除</h4><ul>
<li><p>创建一个定时器，当KEY设置过期时间，且过期时间到达时，有定时器立即执行对键的删除</p>
</li>
<li><p><strong>优点：节约内存，快速释放不必要的内存占用</strong></p>
</li>
<li><p>缺点：CPU压力大，占用CPU，影响Redis服务器响应时间</p>
</li>
<li><p>总结：用处理器性能换取存储空间 （拿时间换空间）</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312211240858.png" alt="image-20210312211240858"></p>
<h4 id="6-2-2-惰性删除策略"><a href="#6-2-2-惰性删除策略" class="headerlink" title="6.2.2 惰性删除策略"></a>6.2.2 惰性删除策略</h4><ul>
<li><p>数据到达过期时间，不做处理。等下次访问该数据时</p>
<ul>
<li>如果未过期，返回数据</li>
<li> 发现已过期，删除，返回不存在</li>
</ul>
</li>
<li><p><strong>优点：</strong>CPU性能，发现必须删除的时候才删除</p>
</li>
<li><p>缺点：内存压力大，出现长期占用内存的数据</p>
</li>
<li><p>总结：用存储空间换取处理器性能expireIfNeeded()(拿时间换空间）</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312211500020.png" alt="image-20210312211500020"></p>
<h4 id="6-2-3-定期删除策略"><a href="#6-2-3-定期删除策略" class="headerlink" title="6.2.3 定期删除策略"></a>6.2.3 定期删除策略</h4><ul>
<li>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</li>
<li>特点1：CPU性能占用设置有峰值，检测频度可自定义设置</li>
<li>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</li>
<li>总结：周期性抽查存储空间（随机抽查，重点抽查）</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312211646091.png" alt="image-20210312211646091"></p>
<h2 id="7-Redis的持久化"><a href="#7-Redis的持久化" class="headerlink" title="7.Redis的持久化"></a>7.Redis的持久化</h2><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中<br>的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>
<p>持久化过程保存什么？</p>
<blockquote>
<p><strong>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</strong></p>
<p> <strong>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</strong></p>
</blockquote>
<h3 id="7-1-1RDB"><a href="#7-1-1RDB" class="headerlink" title="7.1.1RDB"></a>7.1.1RDB</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快<br>照文件直接读到内存里。</p>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程<br>都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那<br>RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<p><strong>RDB启动方式 —— save指令工作原理</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#手动执行一次保存操作</span></span><br><span class="line">	save</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：设置本地数据库文件名，默认值为 dump.rdb</span></span><br><span class="line"><span class="comment">#经验：通常设置为dump-端口号.rdb</span></span><br><span class="line">	dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：设置存储.rdb文件的路径</span></span><br><span class="line"><span class="comment">#经验：通常设置成存储空间较大的目录中，目录名称data</span></span><br><span class="line">	dir</span><br><span class="line">	</span><br><span class="line"><span class="comment">#说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩</span></span><br><span class="line"><span class="comment">#经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</span></span><br><span class="line">	rdbcompression yes</span><br><span class="line">	</span><br><span class="line"><span class="comment">#说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行</span></span><br><span class="line"><span class="comment">#经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险	</span></span><br><span class="line">	 rdbchecksum yes</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312212649363.png" alt="image-20210312212649363"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312212709577.png" alt="image-20210312212709577"></p>
<p><strong>RDB启动方式 —— bgsave指令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#手动启动后台保存操作，但不是立即执行</span></span><br><span class="line">	bgsave</span><br><span class="line">	</span><br><span class="line"><span class="comment">#说明：后台存储过程中如果出现错误现象，是否停止保存操作</span></span><br><span class="line"><span class="comment">#经验：通常默认为开启状态</span></span><br><span class="line">    dbfilename dump.rdb</span><br><span class="line">	dir</span><br><span class="line"> 	rdbcompression yes</span><br><span class="line"> 	rdbchecksum yes</span><br><span class="line"> 	stop-writes-on-bgsave-error yes</span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312212940908.png" alt="image-20210312212940908"></p>
<p><strong>RDB启动方式 ——save配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#满足限定时间范围内key的变化数量达到指定数量即进行持久化</span></span><br><span class="line">参数</span><br><span class="line">	second：监控时间范围</span><br><span class="line">	changes：监控key的变化量</span><br><span class="line">	$ save second changes</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312213134359.png" alt="image-20210312213134359"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312213202725.png" alt="image-20210312213202725"></p>
<p><strong>RDB优点：</strong></p>
<ul>
<li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li>
<li> RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li>
<li> RDB恢复数据的速度要比AOF快很多</li>
<li> 应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li>
</ul>
<p><strong>RDB缺点：</strong></p>
<ul>
<li> RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li>
<li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li>
<li> Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li>
</ul>
<h3 id="7-1-2-AOF"><a href="#7-1-2-AOF" class="headerlink" title="7.1.2 AOF"></a>7.1.2 AOF</h3><p><strong>RDB存储的弊端</strong></p>
<ul>
<li>存储数据较大，效率较低</li>
<li>快照思想，每次读写全部数据，数据多时，效率低</li>
<li>大数据下的IO性能低</li>
<li>基于Fork创建子进程，内存额外消耗</li>
<li>宕机带来的数据丢失风险</li>
</ul>
<p><strong>解决思路</strong></p>
<ul>
<li>不全写数据，仅仅记录部分数据</li>
<li>降低区分数据是否改变的难度，改变记录数据为记录操作过程</li>
<li>对所有操作进行记录，排除丢失数据的风险</li>
</ul>
<p>AOF概念</p>
<ul>
<li><p>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令<br>达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程</p>
</li>
<li><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312213813782.png" alt="image-20210312213813782"></p>
<p><strong>AOF写数据三种策略(appendfsync)</strong></p>
<ul>
<li>always(每次）<ul>
<li>每次写入操作均同步到AOF文件中，<strong>数据零误差，性能较低</strong>，不建议使用。</li>
</ul>
</li>
<li>everysec（每秒）<ul>
<li>每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高，建议使用，也是默认配置</li>
<li>在系统突然宕机的情况下丢失1秒内的数据</li>
</ul>
</li>
<li>no(系统控制)<ul>
<li>由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li>
</ul>
</li>
</ul>
<p><strong>AOF功能开启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#是否开启AOF持久化功能，默认为不开启状态</span></span><br><span class="line">	appendonly yes|no</span><br><span class="line"><span class="comment">#AOF写数据策略</span></span><br><span class="line">	appendfsync always|everysec|no</span><br></pre></td></tr></table></figure>

<p><strong>AOF相关配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</span></span><br><span class="line">	appendfilename filename</span><br><span class="line"><span class="comment">#AOF持久化文件保存路径，与RDB持久化文件保持一致即可</span></span><br><span class="line">	dir</span><br></pre></td></tr></table></figure>

<p><strong>AOF重写</strong></p>
<p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重<br>写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结<br>果转化成最终结果数据对应的指令进行记录</p>
<p><strong>AOF重写作用</strong></p>
<ul>
<li>降低磁盘占用量，提高磁盘利用率</li>
<li> 提高持久化效率，降低持久化写时间，提高IO性能</li>
<li> 降低数据恢复用时，提高数据恢复效率</li>
</ul>
<p><strong>AOF重写方式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动重写</span></span><br><span class="line"></span><br><span class="line"> bgrewriteaof</span><br><span class="line"><span class="comment"># 自动重写</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percentage</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312214538566.png" alt="image-20210312214538566"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312214607099.png" alt="image-20210312214607099"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312214623014.png" alt="image-20210312214623014"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312214648792.png" alt="image-20210312214648792"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312214737258.png" alt="image-20210312214737258"></p>
<p><strong>RDB与AOF的选择之惑</strong></p>
<ul>
<li><p><strong>对数据非常敏感，建议使用默认的AOF持久化方案</strong></p>
<ul>
<li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很 好的处理性能，当出<br>现问题时，最多丢失0-1秒内的数据。</li>
<li>注意：由于AOF文件存储体积较大，且恢复速度较慢</li>
</ul>
</li>
<li><p><strong>数据呈现阶段有效性，建议使用RDB持久化方案</strong></p>
<ul>
<li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段<br>点数据恢复通常采用RDB方案</li>
<li> 注意：利用RDB实现紧凑的数据持久化会使Redis降的很低</li>
</ul>
</li>
<li><p><strong>综合比对</strong></p>
<ul>
<li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li>
<li> 如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li>
<li> 如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li>
<li>灾难恢复选用RDB</li>
<li>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li>
</ul>
</li>
</ul>
<h3 id="7-1-3-持久化应用场景"><a href="#7-1-3-持久化应用场景" class="headerlink" title="7.1.3 持久化应用场景"></a>7.1.3 持久化应用场景</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312215304344.png" alt="image-20210312215304344"></p>
<h2 id="8-Redis事务"><a href="#8-Redis事务" class="headerlink" title="8.Redis事务"></a>8.Redis事务</h2><p><strong>Redis事务的概念：</strong><br>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列<br>化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事<br>务执行命令序列中。<br>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。<br><strong>Redis事务没有隔离级别的概念：</strong><br>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行！<br><strong>Redis不保证原子性：</strong><br>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其<br>余的命令仍会被执行。</p>
<p><strong>Redis事务的三个阶段：</strong></p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务</li>
</ul>
<p><strong>Redis事务相关命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch key1 key2 ...  <span class="comment">#监视一或多个key,如果在事务执行之前，被监视的key被其他命令改动，则</span></span><br><span class="line">事务被打断 （ 类似乐观锁 ）</span><br><span class="line">multi <span class="comment"># 标记一个事务块的开始（ queued ）</span></span><br><span class="line"><span class="built_in">exec</span> <span class="comment"># 执行所有事务块的命令 （ 一旦执行exec后，之前加的监控锁都会被取消掉 ）</span></span><br><span class="line">discard <span class="comment"># 取消事务，放弃事务块中的所有命令</span></span><br><span class="line">unwatch <span class="comment"># 取消watch对所有key的监控</span></span><br></pre></td></tr></table></figure>

<p>正常执行</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312215653001.png" alt="image-20210312215653001"></p>
<p><strong>放弃事务</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312215711723.png" alt="image-20210312215711723"></p>
<p><strong>存在错误</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312215734036.png" alt="image-20210312215734036"></p>
<p><strong>出现语法性错误</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312215810395.png" alt="image-20210312215810395"></p>
<p><strong>悲观锁：</strong><br>悲观锁(Pessimistic Lock),顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿到这个数据就会block直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。<br><strong>乐观锁：</strong><br>乐观锁(Optimistic Lock),顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁。但是在更新的时候会判断一下再此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量，乐观锁策略：提交版本必须大于记录当前版本才能执行更新。</p>
<ul>
<li>1、初始化信用卡可用余额和欠额</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> balance 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> debt 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<ul>
<li>2、使用watch检测balance，事务期间balance数据未变动，事务执行成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>

<ul>
<li>3、使用watch检测balance，事务期间balance数据变动，事务执行失败！</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 窗口一</span></span><br><span class="line">127.0.0.1:6379&gt; watch balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI  <span class="comment"># 执行完毕后，执行窗口二代码测试</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment"># 修改失败！</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 窗口二</span></span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line"><span class="string">&quot;80&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> balance 200</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 窗口一：出现问题后放弃监视，然后重来！</span></span><br><span class="line">127.0.0.1:6379&gt; UNWATCH  <span class="comment"># 放弃监视</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment"># 成功！</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 180</span><br><span class="line">2) (<span class="built_in">integer</span>) 40</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong><br>一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。<br><strong>小结</strong><br>watch指令类似于乐观锁，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端<br>更改，则使用EXEC执行事务时，事务队列将不会被执行，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。</p>
<h2 id="9-Redis发布订阅"><a href="#9-Redis发布订阅" class="headerlink" title="9.Redis发布订阅"></a>9.Redis发布订阅</h2><p><strong>Redis 发布订阅(pub/sub)是一种消息通信模式</strong>：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312220231575.png" alt="image-20210312220231575"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312220244949.png" alt="image-20210312220244949"></p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312220305354.png" alt="image-20210312220305354"></p>
<p><strong>常用命令</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210312220332321.png" alt="image-20210312220332321"></p>
<p>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 redisChat:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class="string">&quot;Hello,Redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class="string">&quot;Hello，123&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hello,Redis&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hello，123&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>原理解析</strong></p>
<p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍<br>此加深对 Redis 的理解。<br>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>
<ul>
<li><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel<br>，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关<br>键，就是将客户端添加到给定 channel 的订阅链表中。</p>
</li>
<li><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel<br>字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。<br>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个<br>key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应<br>的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>
</li>
</ul>
<p><strong>使用场景</strong></p>
<p>Pub/Sub构建实时消息系统<br>Redis的Pub/Sub系统可以构建实时的消息系统<br>比如很多用Pub/Sub构建的实时聊天系统的例子</p>
<h2 id="10-Redis主从复制"><a href="#10-Redis主从复制" class="headerlink" title="10.Redis主从复制"></a>10.Redis主从复制</h2><p><strong>概念</strong><br>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。</p>
<p>Master以写为主，Slave 以读为主。</p>
<p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：<br><strong>1、数据冗余：</strong>主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>
<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p>
<p><strong>3、负载均衡：</strong>在主从复制的基础上，配合读写分离，可以由主节点提供写服务，</p>
<p>由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；</p>
<p>尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>
<p><strong>4、高可用基石：</strong>除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是<br>Redis高可用的基础。</p>
<p><strong>特征：一个master可以拥有多个slave，一个slave只对应一个master</strong></p>
<p><strong>职责：</strong></p>
<ul>
<li><p>master</p>
<ul>
<li>写数据</li>
<li>执行写操作时，将出现变化的数据自动同步到slave</li>
<li>读数据</li>
</ul>
</li>
<li><p>slave</p>
<ul>
<li>读数据</li>
<li>写数据（禁止）</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313203215765.png" alt="image-20210313203215765"></p>
<p>主从复制过程3个阶段</p>
<ul>
<li>建立连接阶段</li>
<li>数据同步阶段</li>
<li>命令传播阶段</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313203317194.png" alt="image-20210313203317194"></p>
<h3 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a><strong>主从复制工作流程</strong></h3><h4 id="阶段一-建立连接阶段"><a href="#阶段一-建立连接阶段" class="headerlink" title="阶段一:建立连接阶段"></a>阶段一:建立连接阶段</h4><p> <strong>建立slave到master的连接，使master能够识别slave，并保存slave端口号</strong></p>
<p>步骤</p>
<blockquote>
<p>步骤1：设置master的地址和端口，保存master信息<br>步骤2：建立socket连接<br>步骤3：发送ping命令（定时器任务）<br>步骤4：身份验证<br>步骤5：发送slave端口信息</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313203608886.png" alt="image-20210313203608886"></p>
<p><strong>主从连接（slave连接master）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一：客户端发送命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二：启动服务器参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">方式三：服务器配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>主从断开连接</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端发送命令 slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</span></span><br><span class="line">slaveof no one </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>授权访问</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master客户端发送命令设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> requirepass &lt;password&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master配置文件设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> config <span class="built_in">set</span> requirepass &lt;password&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> config get requirepass</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave客户端发送命令设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> auth &lt;password&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave配置文件设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> masterauth &lt;password&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave启动服务器设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-server –a &lt;password&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="阶段二-数据同步阶段工作流程"><a href="#阶段二-数据同步阶段工作流程" class="headerlink" title="阶段二:数据同步阶段工作流程"></a>阶段二:数据同步阶段工作流程</h4><ul>
<li><p>在slave初次连接master后，复制master中的所有数据到slave</p>
</li>
<li><p>将slave的数据库状态更新成master当前的数据库状态</p>
</li>
</ul>
<p><strong>步骤：</strong></p>
<blockquote>
<p>步骤1：请求同步数据<br>步骤2：创建RDB同步数据<br>步骤3：恢复RDB同步数据<br>步骤4：请求部分同步数据<br>步骤5：恢复部分同步数据</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313204536575.png" alt="image-20210313204536575"></p>
<h4 id="阶段三：命令传播阶段"><a href="#阶段三：命令传播阶段" class="headerlink" title="阶段三：命令传播阶段"></a>阶段三：命令传播阶段</h4><ul>
<li> 当master数据库状态被修改后，导致主从服务器数据库状态不一致，需要让主从数据同步到一致的状态，同步的动作称为命令传播</li>
<li> master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</li>
</ul>
<p> <strong>命令传播阶段的部分复制</strong></p>
<ul>
<li><p><strong>命令传播阶段出现断网现象</strong></p>
<ul>
<li>网络闪断闪连  <strong>忽略</strong></li>
<li>短时间网络中断   <strong>部分复制</strong></li>
<li>长时间网络中断   全量复制</li>
</ul>
</li>
<li><p><strong>部分复制的三个核心要素</strong></p>
<ul>
<li>服务器的运行id</li>
<li>主服务器的复制积压缓冲区</li>
<li>主从服务器的赋值偏移量</li>
</ul>
</li>
</ul>
<p><strong>服务器运行ID（runid）</strong></p>
<p>服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</p>
<ul>
<li><p>作用：运行id被用于在服务器间进行传输，识别身份如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</p>
</li>
<li><p>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过<strong>info Server</strong>命令，可以查看节点的runid</p>
</li>
</ul>
<p><strong>复制缓冲区</strong></p>
<p>复制缓冲区，又名复制积压缓冲区，<strong>是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令</strong>，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313205206305.png" alt="image-20210313205206305"></p>
<p><strong>主从服务器复制偏移量（offset）</strong></p>
<ul>
<li><p><strong>概念：</strong>一个数字，描述复制缓冲区中的指令字节位置</p>
</li>
<li><p><strong>分类</strong>：</p>
<ul>
<li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li>
<li> slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li>
</ul>
</li>
<li><p><strong>数据来源：</strong></p>
<ul>
<li>master端：发送一次记录一次</li>
<li>slave端：接收一次记录一次</li>
</ul>
</li>
<li><p><strong>作用：</strong>同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313205648993.png" alt="image-20210313205648993"></p>
<p><strong>心跳机制</strong><br>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p>
<ul>
<li><p><strong>master心跳：</strong></p>
<ul>
<li>指令：PING</li>
<li> 周期：由repl-ping-slave-period决定，默认10秒</li>
<li> 作用：判断slave是否在线</li>
<li> 查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</li>
</ul>
</li>
<li><p><strong>slave心跳任务</strong>:</p>
<ul>
<li>指令：REPLCONF ACK {offset}</li>
<li> 周期：1秒</li>
<li> 作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li>
<li> 作用2：判断master是否在线</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313205954713.png" alt="image-20210313205954713"></p>
<h3 id="主从复制常见问题"><a href="#主从复制常见问题" class="headerlink" title="主从复制常见问题"></a>主从复制常见问题</h3><h4 id="频繁的全量复制"><a href="#频繁的全量复制" class="headerlink" title="频繁的全量复制"></a>频繁的全量复制</h4><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</p>
<p><strong>内部优化调整方案：</strong></p>
<ol>
<li>master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</li>
<li>在master关闭时执行命令 shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中</li>
</ol>
<ul>
<li><strong>epl-id repl-offset</strong></li>
<li><strong>通过redis-check-rdb命令可以查看该信息</strong></li>
</ul>
<ol start="3">
<li>master重启后加载RDB文件，恢复数据<br> 重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中</li>
</ol>
<ul>
<li><strong>master_repl_id = repl master_repl_offset = repl-offset</strong></li>
<li><strong>通过info命令可以查看该信息</strong></li>
</ul>
<ol start="4">
<li>作用：本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master </li>
</ol>
<h4 id="频繁的网络中断（1）"><a href="#频繁的网络中断（1）" class="headerlink" title="频繁的网络中断（1）"></a>频繁的网络中断（1）</h4><ul>
<li><p><strong>问题现象</strong>：master的CPU占用过高 或 slave频繁断开连接</p>
</li>
<li><p><strong>问题原因</strong></p>
<ul>
<li> slave每1秒发送REPLCONF ACK命令到master</li>
<li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li>
<li> master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li>
</ul>
</li>
<li><p><strong>最终结果</strong></p>
<ul>
<li>master各种资源（输出缓冲区、带宽、连接等）被严重占用</li>
</ul>
</li>
<li><p><strong>解决方案</strong></p>
<ul>
<li>通过设置合理的超时时间，确认是否释放slave （repl-timeout）<br>该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</li>
</ul>
</li>
</ul>
<h4 id="频繁的网络中断（2）"><a href="#频繁的网络中断（2）" class="headerlink" title="频繁的网络中断（2）"></a>频繁的网络中断（2）</h4><p><strong>问题现象</strong>：slave与master连接断开</p>
<ul>
<li><strong>问题原因</strong><ul>
<li>master发送ping指令频度比较低</li>
<li>master设定超时时间较短</li>
<li>ping网络中存在丢包</li>
</ul>
</li>
<li><strong>解决方案：</strong><ul>
<li>提高ping指令的频度（repl-ping-slave-period）</li>
</ul>
</li>
</ul>
<p><strong>超时间repl-time的时间至少是ping指令频度的5-10倍，否则slave容易判定超时</strong></p>
<h4 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h4><p>问题现象：多个slave获取相同数据不同步</p>
<ul>
<li><strong>问题原因</strong><ul>
<li>网络信息不同步，发送数据有延迟</li>
</ul>
</li>
<li><strong>解决方案</strong><ul>
<li>优化主从间的网络环境</li>
<li>监控从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对slave的数据访问(slave-serve-stale-data  yes|no)</li>
</ul>
</li>
</ul>
<h2 id="11-哨兵模式"><a href="#11-哨兵模式" class="headerlink" title="11.哨兵模式"></a>11.哨兵模式</h2><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313211546132.png" alt="image-20210313211546132"></p>
<p><strong>哨兵的作用</strong></p>
<ul>
<li><p><strong>监控</strong><br>不断的检查master和slave是否正常运行。master存活检测、master与slave运行情况检测</p>
</li>
<li><p>通知（提醒）当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</p>
</li>
<li><p><strong>自动故障转移</strong><br>断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址</p>
</li>
</ul>
<p><strong>注意：哨兵也是一台redis服务器，只是不提供数据服务通常哨兵配置数量为单数</strong></p>
<p><strong>启用哨兵模式</strong></p>
<p>配置哨兵</p>
<ul>
<li>配置一拖二的主从结构</li>
<li>配置三个哨兵(配置相同，端口不同)</li>
<li>启动哨兵</li>
</ul>
<blockquote>
<p>redis-sentinel sentinel- 端口号 .conf</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313211842733.png" alt="image-20210313211842733"></p>
<p><strong>哨兵工作原路</strong></p>
<p>主从切换三个阶段</p>
<ul>
<li>监控</li>
<li>通知</li>
<li>故障转移</li>
</ul>
<p><strong>阶段一：监控阶段</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313212005678.png" alt="image-20210313212005678"></p>
<ul>
<li><p>用于同步各个节点的状态信息</p>
<ul>
<li><p>获取各个sentine的状态(是否在线)</p>
</li>
<li><p>获取master状态</p>
<ul>
<li>master属性<ul>
<li>runid</li>
<li>role:master</li>
</ul>
</li>
</ul>
</li>
<li><p>获取所有slave的状态</p>
<ul>
<li>slave属性<ul>
<li>runid</li>
<li>role:master</li>
<li>offset</li>
<li>mater_host.master_port</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313212233484.png" alt="image-20210313212233484"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313212243342.png" alt="image-20210313212243342"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313212257746.png" alt="image-20210313212257746"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313212313110.png" alt="image-20210313212313110"></p>
<p><strong>阶段三：故障转移阶段</strong></p>
<ul>
<li><p>服务器列表中挑选备选master</p>
<ul>
<li>在线的</li>
<li>响应慢的</li>
<li>与原master断开时间久的</li>
<li>优先原则<ul>
<li>优先级</li>
<li>offset</li>
<li>runid</li>
</ul>
</li>
</ul>
</li>
<li><p>发送指令 sentinel</p>
<ul>
<li> 向新的master发送slaveof no one</li>
<li> 向其他slave发送slaveof 新masterIP端口</li>
</ul>
</li>
<li><p>监控</p>
<ul>
<li>同步信息</li>
</ul>
</li>
<li><p>通知</p>
<ul>
<li>保持联通</li>
</ul>
</li>
<li><p>故障转移</p>
<ul>
<li>发现问题</li>
<li>竞选负责人</li>
<li>优选心master</li>
<li>新master上任，其他slave切换master，原master作为slave故障回复后连接</li>
</ul>
</li>
</ul>
<h2 id="12-企业级解决方案"><a href="#12-企业级解决方案" class="headerlink" title="12.企业级解决方案"></a>12.企业级解决方案</h2><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>问题：</p>
<ul>
<li>请求数量较高</li>
<li>主从之间数据吞吐量较大，数据同步操作频度高</li>
</ul>
<p><strong>解决方案</strong></p>
<p><strong>前置准备工作：</strong></p>
<ol>
<li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li>
<li>利用LRU数据删除策略，构建数据留存队列</li>
</ol>
<p><strong>准备工作：</strong></p>
<ol>
<li>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</li>
<li>利用分布式多服务器同时进行数据读取，提速数据加载过程</li>
<li>热点数据主从同时预热</li>
</ol>
<p><strong>实施：</strong></p>
<ol>
<li>使用脚本程序固定触发数据预热过程</li>
<li>如果条件允许，使用了CDN（内容分发网络），效果会更好</li>
</ol>
<p> <strong>总结：<br>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓<br>存的问题！用户直接查询事先被预热的缓存数据！</strong></p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><strong>数据库服务器崩溃（1）</strong></p>
<ol>
<li>系统平稳运行过程中，忽然数据库连接量激增</li>
<li>应用服务器无法及时处理请求</li>
<li>大量408，500错误页面出现</li>
<li>客户反复刷新页面获取数据</li>
<li>数据库崩溃</li>
<li>应用服务器崩溃</li>
<li>重启应用服务器无效</li>
<li>Redis服务器崩溃</li>
<li>Redis集群崩溃</li>
<li>重启数据库后再次被瞬间流量放倒</li>
</ol>
<p><strong>问题排查</strong></p>
<ol>
<li>在一个较短的时间内，缓存中较多的key集中过期</li>
<li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</li>
<li>数据库同时接收到大量的请求无法及时处理</li>
<li>Redis大量请求被积压，开始出现超时现象</li>
<li>数据库流量激增，数据库崩溃</li>
<li>重启后仍然面对缓存中无数据可用</li>
<li>Redis服务器资源被严重占用，Redis服务器崩溃</li>
<li>Redis集群呈现崩塌，集群瓦解</li>
<li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li>
<li>应用服务器，redis，数据库全部重启，效果不理想</li>
</ol>
<p><strong>问题</strong></p>
<ul>
<li>短时间范围内</li>
<li>大量key集中过期</li>
</ul>
<p><strong>解决方案</strong></p>
<ol>
<li>更多的页面静态化处理</li>
<li>构建多级缓存架构<br>Nginx缓存+redis缓存+ehcache缓存</li>
<li>检测Mysql严重耗时业务进行优化<br>对数据库的瓶颈排查：例如超时查询、耗时较高事务等</li>
<li>灾难预警机制<br>监控redis服务器性能指标</li>
</ol>
<ul>
<li>CPU占用、CPU使用率</li>
<li> 内存容量</li>
<li> 查询平均响应时间</li>
<li> 线程数</li>
</ul>
<ol start="5">
<li>限流、降级<br>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</li>
</ol>
<p><strong>总结<br>缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现<br>（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313213728118.png" alt="image-20210313213728118"></p>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><strong>数据库服务器崩溃（2）</strong></p>
<ol>
<li>系统平稳运行过程中</li>
<li>数据库连接量瞬间激增</li>
<li>Redis服务器无大量key过期</li>
<li>Redis内存平稳，无波动</li>
<li>Redis服务器CPU正常</li>
<li>数据库崩溃</li>
</ol>
<p><strong>问题</strong></p>
<ul>
<li>Redis中某个key过期，该key访问量巨大</li>
<li>多个数据请求从服务器压到Redis后，均未命中</li>
<li>Redis在短时间内发起了大量对数据库中同一数据的访问</li>
</ul>
<p><strong>分析</strong></p>
<ul>
<li>单个key高热数据</li>
<li>key过期</li>
</ul>
<p><strong>解决方案（术）</strong></p>
<ol>
<li>预先设定<br>以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长<br>注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</li>
<li>现场调整<br>监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</li>
<li>后台刷新数据<br>启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</li>
<li>二级缓存<br>设置不同的失效时间，保障不会被同时淘汰就行</li>
<li>加锁<br>分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</li>
</ol>
<p><strong>总结<br>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服<br>务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度<br>较高，配合雪崩处理策略即可。</strong></p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><strong>数据库服务器崩溃（3）</strong></p>
<ol>
<li>系统平稳运行过程中</li>
<li>应用服务器流量随时间增量较大</li>
<li>Redis服务器命中率随时间逐步降低</li>
<li>Redis内存平稳，内存无压力</li>
<li>Redis服务器CPU占用激增</li>
<li>数据库服务器压力激增</li>
<li>数据库崩溃</li>
</ol>
<p><strong>问题</strong></p>
<ul>
<li>Redis中出现大面积未命中</li>
<li>出现非正常URL访问</li>
</ul>
<p><strong>分析</strong></p>
<ul>
<li>获取的数据在数据库中也不存在，数据库查询未得到相应的数据</li>
<li>Redis获取到null数据未进行持久化，直接返回</li>
<li>出现黑客攻击服务器</li>
</ul>
<p><strong>解决方案（术）</strong></p>
<ol>
<li>缓存null<br>对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</li>
<li>白名单策略</li>
</ol>
<ul>
<li>提前预热各种分类数据i d对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放<br>行，加载异常数据时直接拦截（效率偏低）</li>
<li> 使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li>
</ul>
<ol start="3">
<li>实施监控<br>实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比</li>
</ol>
<ul>
<li>非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</li>
<li>活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象<br>根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li>
</ul>
<ol start="4">
<li>key加密<br> 问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验<br> 例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</li>
</ol>
<p><strong>总结<br>缓存击穿访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类<br>数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。<br>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</strong></p>
<h3 id="性能指标监控"><a href="#性能指标监控" class="headerlink" title="性能指标监控"></a>性能指标监控</h3><p><strong>监控指标</strong></p>
<ul>
<li>性能指标：Performance</li>
<li> 内存指标：Memory</li>
<li> 基本活动指标：Basic activity</li>
<li> 持久性指标：Persistence</li>
<li> 错误指标：Error</li>
</ul>
<ul>
<li><strong>性能指标：Performance</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>latency</td>
<td>Redis响应一个请求的时间</td>
</tr>
<tr>
<td>instantaneous_ops_per_sec</td>
<td>平均每秒处理请求总数</td>
</tr>
<tr>
<td>hit rate(calculated)</td>
<td>缓存命中率</td>
</tr>
</tbody></table>
<ul>
<li><strong>内存指标：Memory</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>used_memory</td>
<td>已使用内存</td>
</tr>
<tr>
<td>mem_fragmentation_ratio</td>
<td>内存碎片率</td>
</tr>
<tr>
<td>evicted_keys</td>
<td>由于最大内存限制被移的key数量</td>
</tr>
<tr>
<td>blocked_clients</td>
<td>由于BLPOP,BRPOP,or BRPOPLPUSH而阻塞的客户端</td>
</tr>
</tbody></table>
<ul>
<li><strong>基本活动指标：Basic activity</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>connected_clients</td>
<td>客户端连接数</td>
</tr>
<tr>
<td>connected_slaves</td>
<td>Slave数量</td>
</tr>
<tr>
<td>master_last_io_seconds_ago</td>
<td>最近一次主从交互之后的秒数</td>
</tr>
<tr>
<td>keyspace</td>
<td>数据库中的key值总数</td>
</tr>
</tbody></table>
<ul>
<li><strong>持久性指标：Persistence</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>rdb_last_save_time</td>
<td>最后一次持久化保存到磁盘的时间戳</td>
</tr>
<tr>
<td>rdb_changes_since_last_save</td>
<td>自最后一次持久化以来的数据库更改数</td>
</tr>
</tbody></table>
<ul>
<li><strong>错误指标：Error</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>rejected_connections</td>
<td>由于达到maxclient限制而被拒绝的连接数</td>
</tr>
<tr>
<td>keyspace_misses</td>
<td>key值查找失败（没有命中）次数</td>
</tr>
<tr>
<td>master_link_down_since_seconds</td>
<td>主从断开的持续时间(以秒为单位)</td>
</tr>
</tbody></table>
<p>监控方式</p>
<ul>
<li><p>工具</p>
<ul>
<li>Cloud Insight Redis</li>
<li>Prometheus</li>
<li>Redis-stat</li>
<li>Redis-faina</li>
<li>RedisLive</li>
<li>zabbix</li>
</ul>
</li>
<li><p>命令</p>
<ul>
<li>benchmark</li>
<li>redis cli<ul>
<li>monitor</li>
<li>showlog</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 打印服务器调试信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> monitor</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> showlong [operator]</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> get ：获取慢查询日志</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> len ：获取慢查询日志条目数</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> reset ：重置慢查询日志</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> slowlog-log-slower-than 1000 <span class="comment">#设置慢查询的时间下线，单位：微妙</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> slowlog-max-len 100 <span class="comment">#设置慢查询命令对应的日志显示长度，单位：命令数</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313215951231.png" alt="image-20210313215951231"></p>
<h2 id="13-Jedis"><a href="#13-Jedis" class="headerlink" title="13.Jedis"></a>13.Jedis</h2><p><strong>Jedis是Redis官方推荐的Java连接开发工具。要在Java开发中使用好Redis中间件，必须对Jedis熟悉才能写成漂亮的代码</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/Redis%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313220249208.png" alt="image-20210313220249208"></p>
<p><strong>测试</strong></p>
<p>1、新建一个普通的Maven项目<br>2、导入redis的依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ping</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    <span class="comment">//查看服务是否运行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;服务正在运行: &quot;</span>+jedis.ping());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、启动redis服务<br>5、启动测试，结果</p>
<blockquote>
<p>连接成功<br>服务正在运行: PONG</p>
</blockquote>
<p><strong>对key常用命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;清空数据：&quot;</span>+jedis.flushDB());</span><br><span class="line">    System.out.println(<span class="string">&quot;判断某个键是否存在：&quot;</span>+jedis.exists(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;kuangshen&#x27;&gt;的键值</span></span><br><span class="line"><span class="string">对：&quot;</span>+jedis.set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;kuangshen&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;password&#x27;&gt;的键值</span></span><br><span class="line"><span class="string">对：&quot;</span>+jedis.set(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;password&quot;</span>));</span><br><span class="line">    System.out.print(<span class="string">&quot;系统中所有的键如下：&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(keys);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除键password:&quot;</span>+jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;判断键password是否存</span></span><br><span class="line"><span class="string">在：&quot;</span>+jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;查看键username所存储的值的类</span></span><br><span class="line"><span class="string">型：&quot;</span>+jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;随机返回key空间的一个：&quot;</span>+jedis.randomKey());</span><br><span class="line">    System.out.println(<span class="string">&quot;重命名key：&quot;</span>+jedis.rename(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;取出改后的name：&quot;</span>+jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;按索引查询：&quot;</span>+jedis.select(<span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除当前选择数据库中的所有key：&quot;</span>+jedis.flushDB());</span><br><span class="line">    System.out.println(<span class="string">&quot;返回当前数据库中key的数目：&quot;</span>+jedis.dbSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;删除所有数据库中的所有key：&quot;</span>+jedis.flushAll());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对String操作的命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">&quot;===========增加数据===========&quot;</span>);</span><br><span class="line">    System.out.println(jedis.set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.set(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;删除键key2:&quot;</span>+jedis.del(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取键key2:&quot;</span>+jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;修改key1:&quot;</span>+jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1Changed&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取key1的值：&quot;</span>+jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;在key3后面加入值：&quot;</span>+jedis.append(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;End&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;key3的值：&quot;</span>+jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;增加多个键值对：&quot;</span>+jedis.mset(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;value01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;value02&quot;</span>,<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;value03&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;key04&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除多个键值对：&quot;</span>+jedis.del(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>));</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">&quot;===========新增键值对防止覆盖原先值==============&quot;</span>);</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2-new&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;===========新增键值对并设置有效时间=============&quot;</span>);</span><br><span class="line">    System.out.println(jedis.setex(<span class="string">&quot;key3&quot;</span>, <span class="number">2</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;===========获取原值，更新为新值==========&quot;</span>);</span><br><span class="line">    System.out.println(jedis.getSet(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key2GetSet&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获得key2的值的字串：&quot;</span>+jedis.getrange(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对List操作命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">&quot;===========添加一个list===========&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;ArrayList&quot;</span>, <span class="string">&quot;Vector&quot;</span>, <span class="string">&quot;Stack&quot;</span>,</span><br><span class="line"><span class="string">&quot;HashMap&quot;</span>, <span class="string">&quot;WeakHashMap&quot;</span>, <span class="string">&quot;LinkedHashMap&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;HashSet&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeSet&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeMap&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">      <span class="comment">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span></span><br><span class="line">      System.out.println(<span class="string">&quot;collections区间0-3的元素：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    <span class="comment">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span></span><br><span class="line">    System.out.println(<span class="string">&quot;删除指定元素个数：&quot;</span>+jedis.lrem(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>,<span class="string">&quot;HashMap&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除下表0-3区间之外的元素：&quot;</span>+jedis.ltrim(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections列表出栈（左端）：&quot;</span>+jedis.lpop(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections添加元素，从列表右端，与lpush相对应：&quot;</span>+jedis.rpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;EnumMap&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections列表出栈（右端）：&quot;</span>+jedis.rpop(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;修改collections指定下标1的内容：&quot;</span>+jedis.lset(<span class="string">&quot;collections&quot;</span>, <span class="number">1</span>, <span class="string">&quot;LinkedArrayList&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;collections的长度：&quot;</span>+jedis.llen(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取collections下标为2的元素：&quot;</span>+jedis.lindex(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;sortedList&quot;</span>, <span class="string">&quot;3&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;sortedList排序前：&quot;</span>+jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line">    System.out.println(jedis.sort(<span class="string">&quot;sortedList&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;sortedList排序后：&quot;</span>+jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对Set的操作命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">&quot;============向集合中添加元素（不重复）============&quot;</span>);</span><br><span class="line">    System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>,<span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>,<span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e5&quot;</span>));</span><br><span class="line">    System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">    System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除一个元素e0：&quot;</span>+jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e0&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除两个元素e7和e6：&quot;</span>+jedis.srem(<span class="string">&quot;eleSet&quot;</span>,<span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e6&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet中包含元素的个数：&quot;</span>+jedis.scard(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;e3是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>,<span class="string">&quot;e3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>,<span class="string">&quot;e1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>,<span class="string">&quot;e5&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(jedis.sadd(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>,<span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e5&quot;</span>));</span><br><span class="line">    System.out.println(jedis.sadd(<span class="string">&quot;eleSet2&quot;</span>,<span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;将eleSet1中删除e1并存入eleSet3中：&quot;</span>+jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e1&quot;</span>));</span><br><span class="line">      <span class="comment">//移到集合元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;将eleSet1中删除e2并存入eleSet3中：&quot;</span>+jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet3中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;============集合运算=================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet2中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet1和eleSet2的交集:&quot;</span>+jedis.sinter(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet1和eleSet2的并集:&quot;</span>+jedis.sunion(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet1和eleSet2的差集:&quot;</span>+jedis.sdiff(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));<span class="comment">//eleSet1中有，eleSet2中没有</span></span><br><span class="line">    jedis.sinterstore(<span class="string">&quot;eleSet4&quot;</span>,<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>);<span class="comment">//求交集并将交集保存到dstkey的集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;eleSet4中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet4&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对Hash的操作命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHash</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key4&quot;</span>,<span class="string">&quot;value4&quot;</span>);</span><br><span class="line">    <span class="comment">//添加名称为hash（key）的hash元素</span></span><br><span class="line">    jedis.hmset(<span class="string">&quot;hash&quot;</span>,map);</span><br><span class="line">    <span class="comment">//向名称为hash的hash中添加key为key5，value为value5元素</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key5&quot;</span>, <span class="string">&quot;value5&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return Map&lt;String,String&gt;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有键为：&quot;</span>+jedis.hkeys(<span class="string">&quot;hash&quot;</span>));<span class="comment">//returnSet&lt;String&gt;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有值为：&quot;</span>+jedis.hvals(<span class="string">&quot;hash&quot;</span>));<span class="comment">//returnList&lt;String&gt;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">6</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;删除一个或者多个键值对：&quot;</span>+jedis.hdel(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;散列hash中键值对的个数：&quot;</span>+jedis.hlen(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;判断hash中是否存在key2：&quot;</span>+jedis.hexists(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;判断hash中是否存在key3：&quot;</span>+jedis.hexists(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;key4&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>事务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMulti</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建客户端连接服务端，redis服务端需要被开启</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    Transaction multi = jedis.multi();</span><br><span class="line">    String result = jsonObject.toJSONString();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//向redis存入一条数据</span></span><br><span class="line">      multi.set(<span class="string">&quot;json&quot;</span>, result);</span><br><span class="line">      <span class="comment">//再存入一条数据</span></span><br><span class="line">      multi.set(<span class="string">&quot;json2&quot;</span>, result);</span><br><span class="line">      <span class="comment">//这里引发了异常，用0作为被除数</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">      <span class="comment">//如果没有引发异常，执行进入队列的命令</span></span><br><span class="line">        multi.exec();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">//如果出现异常，回滚</span></span><br><span class="line">      multi.discard();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      System.out.println(jedis.get(<span class="string">&quot;json&quot;</span>));</span><br><span class="line">      System.out.println(jedis.get(<span class="string">&quot;json2&quot;</span>));</span><br><span class="line">      <span class="comment">//最终关闭客户端</span></span><br><span class="line">      jedis.close();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="13-SpringBoot整合Redis"><a href="#13-SpringBoot整合Redis" class="headerlink" title="13.SpringBoot整合Redis"></a>13.SpringBoot整合Redis</h2><p>在SpringBoot中一般使用RedisTemplate提供的方法来操作Redis。那么使用SpringBoot整合Redis需要那些步骤呢。<br><strong>1、 JedisPoolConfig (这个是配置连接池)</strong></p>
<p><strong>2、 RedisConnectionFactory 这个是配置连接信息，这里的RedisConnectionFactory是一个接口</strong>，我们需要使用它的实现类，在SpringD Data Redis方案中提供了以下四种工厂模型：</p>
<ul>
<li>JredisConnectionFactory</li>
<li>JedisConnectionFactory</li>
<li>LettuceConnectionFactory</li>
<li>SrpConnectionFactory</li>
</ul>
<p><strong>3、 RedisTemplate 基本操作</strong> </p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">*****</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">   <span class="attr">pool:</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">    <span class="attr">max-idle:</span> <span class="number">500</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">lettuce:</span></span><br><span class="line">   <span class="attr">shutdown-timeout:</span> <span class="string">0ms</span></span><br></pre></td></tr></table></figure>

<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;myKey&quot;</span>,<span class="string">&quot;myValue&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;myKey&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>封装工具类</strong></p>
<p>分析 RedisAutoConfiguration 自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class,JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    	<span class="meta">@Bean</span></span><br><span class="line">    	<span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    	<span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt;redisTemplate(RedisConnectionFactory redisConnectionFactory)</span><br><span class="line">    	<span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">    		RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">    		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    		<span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="meta">@Bean</span></span><br><span class="line">   	 	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactoryredisConnectionFactory)</span></span></span><br><span class="line"><span class="function">   		 <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    		StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    		<span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个<strong>RedisTemplate</strong>和一个<strong>StringRedisTemplate</strong>。<br>但是，这个RedisTemplate的泛型是&lt;Object,Object&gt;，写代码不方便，<strong>需要写好多类型转换的代码</strong>；我们需要一个泛型为&lt;String,Object&gt;形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。<br>看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，<strong>配置RedisTemplate</strong></p>
<p><strong>RedisTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">   RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,Object&gt;();</span><br><span class="line">   template.setConnectionFactory(factory);</span><br><span class="line">   Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">   ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">   om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">   om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">   jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">   StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">   template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">   <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">   template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">   <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">   template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">   <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">   template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">   template.afterPropertiesSet();</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>写一个Redis工具类（直接用RedisTemplate操作Redis，需要很多行代码，因此直接封装好一个RedisUtils，这样写代码更方便点。这个RedisUtils交给Spring容器实例化，使用时直接注解注入。）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// =============================common============================</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断key是否存在</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除缓存</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">        redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 普通缓存获取</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 普通缓存放入</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForValue().set(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time,TimeUnit.SECONDS);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set(key, value);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 递增</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 递减</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// ================================Map=================================</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * HashGet</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * HashSet</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        expire(key, time);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        expire(key, time);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除hash表中的值</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">    redisTemplate.opsForHash().delete(key, item);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> by  要增加几(大于0)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * hash递减</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> by  要减少记(小于0)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// ============================set=============================</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 移除值为value的</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// ===============================list=================================</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> end  结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span></span><br><span class="line"><span class="comment">时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">      ren <span class="keyword">true</span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 移除N个值为value</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Long remove = redisTemplate.opsForList().remove(key, count,value);</span><br><span class="line">      <span class="keyword">return</span> remove;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>学习地址<a href="https://www.bilibili.com/video/BV1oW411u75R?from=search&amp;seid=3220241811845891398">https://www.bilibili.com/video/BV1oW411u75R?from=search&amp;seid=3220241811845891398</a></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2021/04/20/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Linux学习笔记"><a href="#Linux学习笔记" class="headerlink" title="Linux学习笔记"></a>Linux学习笔记</h1><p><strong>学习地址：<a href="https://www.bilibili.com/video/BV1Sv411r7vd">【小白入门 通俗易懂】2021韩顺平 一周学会Linux_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></strong></p>
<p>韩老师忠实小粉丝~~~</p>
<p><strong>感谢韩老师的讲解视频，十分感谢！</strong></p>
<h2 id="1-文件和目录"><a href="#1-文件和目录" class="headerlink" title="1. 文件和目录"></a>1. 文件和目录</h2><h3 id="1-1-cd-命令"><a href="#1-1-cd-命令" class="headerlink" title="1.1 cd 命令"></a>1.1 cd 命令</h3><ul>
<li>cd ~ 回到自己的家目录</li>
<li>cd /home 进入 ‘/ home’ 目录’ </li>
<li>cd .. 返回上一级目录 </li>
<li>cd ../.. 返回上两级目录 </li>
<li>cd 进入个人的主目录 </li>
<li>cd - 返回上次所在的目录 </li>
</ul>
<h3 id="1-2-pwd-命令"><a href="#1-2-pwd-命令" class="headerlink" title="1.2 pwd 命令"></a>1.2 pwd 命令</h3><ul>
<li>pwd 显示工作路径</li>
</ul>
<h3 id="1-3-ls-命令"><a href="#1-3-ls-命令" class="headerlink" title="1.3 ls 命令"></a>1.3 ls 命令</h3><ul>
<li>ls 查看目录中的文件 </li>
<li>ls -F 查看目录中的文件 </li>
<li>ls -l 显示文件和目录的详细资料 </li>
<li>ls -a 显示隐藏文件 </li>
<li>ls <em>[0-9]</em> 显示包含数字的文件名和目录名</li>
<li>ls -l &gt;文件 列表的内容写入文件中 覆盖写</li>
<li>ls -al &gt;&gt;文件 列表的内容追加到文件中的末尾</li>
</ul>
<h3 id="1-4-cp-命令"><a href="#1-4-cp-命令" class="headerlink" title="1.4 cp 命令"></a>1.4 cp 命令</h3><ul>
<li>cp file1 file2 复制一个文件 </li>
<li>cp dir/* . 复制一个目录下的所有文件到当前工作目录 </li>
<li>cp -a /tmp/dir1 . 复制一个目录到当前工作目录 </li>
<li>cp -a dir1 dir2 复制一个目录 </li>
<li>cp -r dir1 dir2 复制一个目录及子目录</li>
</ul>
<h3 id="1-5-mv-命令"><a href="#1-5-mv-命令" class="headerlink" title="1.5 mv 命令"></a>1.5 mv 命令</h3><ul>
<li>mv oldNameFile newNameFile 功能描述:重命名</li>
<li>mv /temp/movefile /targetFolder 功能描述:移动文件</li>
</ul>
<h3 id="1-6-rm-命令"><a href="#1-6-rm-命令" class="headerlink" title="1.6 rm 命令"></a>1.6 rm 命令</h3><ul>
<li>rm -f file1 删除一个叫做 ‘file1’ 的文件’ </li>
<li>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’ </li>
<li>rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容 </li>
<li>rm -rf dir1 dir2 同时删除两个目录及它们的内容 </li>
<li>mv dir1 new_dir 重命名/移动 一个目录 </li>
</ul>
<h3 id="1-7-mkdir-命令"><a href="#1-7-mkdir-命令" class="headerlink" title="1.7 mkdir 命令"></a>1.7 mkdir 命令</h3><ul>
<li>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’ </li>
<li>mkdir dir1 dir2 同时创建两个目录 </li>
<li>mkdir -p /tmp/dir1/dir2 创建一个目录树 </li>
</ul>
<h3 id="1-8-gt-和-gt-gt-命令"><a href="#1-8-gt-和-gt-gt-命令" class="headerlink" title="1.8 &gt; 和 &gt;&gt; 命令"></a>1.8 &gt; 和 &gt;&gt; 命令</h3><p>输出和重定向</p>
<ul>
<li> ls -l &gt; 文件 列表的内容写入文件(覆盖写)</li>
<li>cat  文件1&gt; 文件2 将文件1的内容覆盖到文件2</li>
<li>echo “内容” &gt;&gt; 文件 追加 </li>
</ul>
<h2 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2. 查看文件内容"></a>2. 查看文件内容</h2><h3 id="2-1-cat-命令"><a href="#2-1-cat-命令" class="headerlink" title="2.1 cat 命令"></a>2.1 cat 命令</h3><ul>
<li>cat file1 从第一个字节查看文件内容</li>
<li>head 文件   用于显示文件的开头部分 默认是前10行内容</li>
<li>head -n 5 文件 显示前5行</li>
<li>tail 文件   用于显示文件的末尾部分 默认是后10行内容</li>
<li>tail -f 文件 实时追踪所有文档的更新</li>
<li>cat 文件1&gt;文件2 将文件1的内容覆盖到文件2</li>
</ul>
<h3 id="2-2-find-命令"><a href="#2-2-find-命令" class="headerlink" title="2.2 find 命令"></a>2.2 find 命令</h3><ul>
<li>find -name 按照指定的文件名查找模式查找文件</li>
<li>find -user 用户名 查找属于指定用户名所有文件</li>
<li>find -size 按照指定的文件大小查找文件</li>
</ul>
<h2 id="3-文件权限"><a href="#3-文件权限" class="headerlink" title="3. 文件权限"></a>3. 文件权限</h2><h3 id="3-1-chmod-命令"><a href="#3-1-chmod-命令" class="headerlink" title="3.1 chmod 命令"></a>3.1 chmod 命令</h3><ul>
<li>ls -lh 显示权限</li>
<li>chmod ugo+rwx directory1 设置目录所有人(u),群组(g),其他人(o)以读(r,4),写(w,2),执行(x,1)</li>
<li>chown 用户名 文件名  修改文件所有者</li>
<li>chown newowner 文件/目录  改变所有者</li>
<li>chown newowner:newgroup 文件/目录 改变所有者和所在组</li>
<li>chgrp newgroup 文件/目录 改变所在组</li>
</ul>
<h3 id="3-2-组名相关命令"><a href="#3-2-组名相关命令" class="headerlink" title="3.2 组名相关命令"></a>3.2 组名相关命令</h3><ul>
<li>groupadd 组名 创建组</li>
<li>useradd -g 组名 用户名 </li>
<li>chgro 组名 文件名/目录名   修改文件所在的组</li>
<li>usermod -g 组名 用户名 </li>
<li>usermod -d 目录名 用户名 改变该用户登录的初始目录</li>
</ul>
<h3 id="3-3-grep指令"><a href="#3-3-grep指令" class="headerlink" title="3.3 grep指令"></a>3.3 grep指令</h3><p>grep 选项 查找内容 源文件</p>
<ul>
<li>grep 选项 查找内容 源文件</li>
<li>grep -n 显示匹配行及行号</li>
<li>grep -i  忽略字母大小写</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>忽略匹配及行号</td>
</tr>
<tr>
<td>-i</td>
<td>忽略字母大小写</td>
</tr>
</tbody></table>
<h2 id="4-文件打包和解压"><a href="#4-文件打包和解压" class="headerlink" title="4. 文件打包和解压"></a>4. 文件打包和解压</h2><h3 id="4-1-tar-命令"><a href="#4-1-tar-命令" class="headerlink" title="4.1 tar 命令"></a>4.1 tar 命令</h3><ul>
<li>tar 选项 XXX.tar.gz 打包的内容   打包目录，压缩后的文件格式.tar.gz</li>
<li>tar -c 产生.tar打包文件</li>
<li>tar -v 显示详细信息</li>
<li>tar -f 指定压缩后的文件名</li>
<li>tar -z 打包同时压缩</li>
<li>tar -x 解包.tar文件</li>
<li>gzip 文件 压缩文件 只能将文件压缩为*.gz文件</li>
<li>gunzip 文件.gz 解压缩文件命令</li>
<li>zip 选项 XXX.zip 将要压缩的内容 压缩文件和目录的命令</li>
<li>unzip 选项 XXX.zip 解压缩文件 </li>
<li>zip -r 递归压缩 即压缩目录</li>
<li>unzip -d 目录 指定解压后文件的存放目录</li>
</ul>
<h2 id="5-系统相关命令"><a href="#5-系统相关命令" class="headerlink" title="5. 系统相关命令"></a>5. 系统相关命令</h2><h3 id="5-1-ps-命令"><a href="#5-1-ps-命令" class="headerlink" title="5.1 ps 命令"></a>5.1 ps 命令</h3><ul>
<li>ps -a 显示当前终端的所有进程信息</li>
<li>ps -u 以用户的格式显示进程信息</li>
<li>ps -x 显示后台进程运行的参数</li>
</ul>
<h3 id="5-2-kill-命令"><a href="#5-2-kill-命令" class="headerlink" title="5.2 kill 命令"></a>5.2 kill 命令</h3><ul>
<li>kill 选项 进程号 通过进程号杀死进程</li>
<li>kill all 进程名称  通过进程名称杀死进程 也支持通配符 </li>
<li>kill -9 表示强迫进程立即停止</li>
</ul>
<h3 id="5-3-postree-命令"><a href="#5-3-postree-命令" class="headerlink" title="5.3 postree 命令"></a>5.3 postree 命令</h3><ul>
<li>pstree 选项 可以更加直观的来查看进程信息</li>
<li>pstree -p 显示进程的PID</li>
<li>pstree -u 显示进程的所属用户</li>
</ul>
<h3 id="5-4-systemctl-命令"><a href="#5-4-systemctl-命令" class="headerlink" title="5.4 systemctl 命令"></a>5.4 systemctl 命令</h3><ul>
<li>systemctl list-unit-files |服务名 查看服务器开机启动状态 ，grep可以过滤</li>
<li>systemctl enable 服务名 设置服务开机启动</li>
<li>systemctl disable 服务名 关闭服务开机启动</li>
<li>systemctl is-enabled 服务名 查询某个服务是否自启动</li>
</ul>
<h3 id="5-5-crontab-命令"><a href="#5-5-crontab-命令" class="headerlink" title="5.5  crontab  命令"></a>5.5  crontab  命令</h3><ul>
<li> crontab -e 编辑crontab定时任</li>
<li>crontab -l 查询crontab任务 </li>
<li>crontab -r 删除当前用户所有的crontab任务</li>
</ul>
<h3 id="5-6-top-命令"><a href="#5-6-top-命令" class="headerlink" title="5.6 top 命令"></a>5.6 top 命令</h3><ul>
<li>top -P 以CPU使用率排序，默认是此项</li>
<li>top -M 以内存的使用率排序</li>
<li>top -N 以PID排序</li>
<li>top -q 退出top</li>
</ul>
<h3 id="5-7-查看进程命令"><a href="#5-7-查看进程命令" class="headerlink" title="5.7 查看进程命令"></a>5.7 查看进程命令</h3><ul>
<li>netstat -an 查看系统网络情况 按一定顺序排列输出</li>
<li>netstat -p 显示哪个进程在调用</li>
<li>nestat -tunlp|grep 端口号 筛选查询</li>
</ul>
<h3 id="5-8-关机命令相关"><a href="#5-8-关机命令相关" class="headerlink" title="5.8 关机命令相关"></a>5.8 关机命令相关</h3><ul>
<li>shutdown -h now 关闭系统</li>
<li>init 0 关闭系统</li>
<li>telinit 0 关闭系统</li>
<li>shutdown -h hours:minutes &amp; 按预定时间关闭系统 </li>
<li>shutdown -c 取消按预定时间关闭系统 </li>
<li>shutdown -r now 重启</li>
<li>reboot 重启</li>
<li>logout 注销 </li>
</ul>
<h3 id="5-9-firewall-命令"><a href="#5-9-firewall-命令" class="headerlink" title="5.9 firewall 命令"></a>5.9 firewall 命令</h3><ul>
<li>打开端口 firewall-cmd-permanent-add-port=端口号/协议</li>
<li>关闭端口 firewall-cmd-permanet-remove-port=端口号/协议</li>
<li>重新载入，才能生效 firewall-cmd –reload</li>
<li>查询端口是否开放 firewall-cmd –query-port=端口/协议</li>
</ul>
<h2 id="6-其他命令方便查阅"><a href="#6-其他命令方便查阅" class="headerlink" title="6. 其他命令方便查阅"></a>6. 其他命令方便查阅</h2><blockquote>
<p>arch 显示机器的处理器架构<br>uname -m 显示机器的处理器架构<br>uname -r 显示正在使用的内核版本<br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /proc/cpuinfo 显示CPU info的信息<br>cat /proc/interrupts 显示中断<br>cat /proc/meminfo 校验内存使用<br>cat /proc/swaps 显示哪些swap被使用<br>cat /proc/version 显示内核的版本<br>cat /proc/net/dev 显示网络适配器及统计<br>cat /proc/mounts 显示已加载的文件系统<br>lspci -tv 罗列 PCI 设备<br>lsusb -tv 显示 USB 设备<br>date 显示系统日期<br>cal 2007 显示2007年的日历表<br>date 041217002007.00 设置日期和时间 - 月日时分年.秒<br>clock -w 将时间修改保存到 BIOS </p>
<p>locate 文件名 搜索文件</p>
<p>which 指令 可以查看某个指令在哪个目录下 </p>
<p>x：表示可以进入到该目录，比如cd</p>
<p>r：表示可以ls 将目录的内容显示</p>
<p>w： 表示可以在该目录，删除或者创建文件</p>
<p>chkconfig – list |grep xxx</p>
<p>chkconfig 服务名 –list</p>
<p>chkconfig –level 5 服务名 on/off</p>
<p>tree 显示文件和目录由根目录开始的树形结构<br>lstree 显示文件和目录由根目录开始的树形结构</p>
<p>ln -s file1 lnk1 创建一个指向文件或目录的软链接<br>ln file1 lnk1 创建一个指向文件或目录的物理链接<br>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br>file file1 outputs the mime type of the file as text<br>iconv -l 列出已知的编码 </p>
<p>echo 输出内容到控制台</p>
<p>echo “内容” &gt;&gt;文件 追加</p>
<p>ln -s原文件或目录 软连接名  给原文件创建一个软链接</p>
<p>history 查看曾经执行过的历史命令 history 10 最近10条</p>
<p>！5 曾经执行的第五条命令</p>
<p>ls -ahl 查看文件的所有者</p>
<p>ps -ef 显示所有进程</p>
<p>ps -ef | grep atd 可以检测atd是否在运行</p>
<p>at 选项 时间</p>
<p>Ctrl +D 结束at命令的输入</p>
<p>lsblk 查看所有设备挂载情况</p>
<p>mount 设备名称 挂载目录</p>
<p>unmount 设备名称或挂载目录</p>
</blockquote>
<p><strong>more 要查看的文件</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>空白键(space)</td>
<td>代表向下翻一页</td>
</tr>
<tr>
<td>Enter</td>
<td>代表向下翻一行</td>
</tr>
<tr>
<td>q</td>
<td>代表立刻离开more，不再显示该文件内容</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>向下滚动一屏</td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>返回上一屏</td>
</tr>
<tr>
<td>=</td>
<td>输出当前行的行号</td>
</tr>
<tr>
<td>:f</td>
<td>输出文件名和当前行的行号</td>
</tr>
</tbody></table>
<p><strong>find 指令</strong></p>
<p>find 搜索范围 选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-name&lt;查询方式&gt;</td>
<td>安装指定的文件名查找模式查找文件</td>
</tr>
<tr>
<td>-user&lt;用户名&gt;</td>
<td>按照指定用户名所有文件</td>
</tr>
<tr>
<td>-size&lt;文件大小&gt;</td>
<td>按照指定文件大小查找文件</td>
</tr>
</tbody></table>
<p><strong>tar 指令</strong></p>
<p>tar 选项 XXX.tar.gz 打包的内容 (功能描述，打包目录，压缩后的文件格式是tar.gz)</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>产生.tar打包文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细信息</td>
</tr>
<tr>
<td>-f</td>
<td>指定压缩后的文件名</td>
</tr>
<tr>
<td>-z</td>
<td>打包同时压缩</td>
</tr>
<tr>
<td>-x</td>
<td>解包.tar文件</td>
</tr>
</tbody></table>
<p><strong>crontab 选项</strong></p>
<table>
<thead>
<tr>
<th>-e</th>
<th>编辑crontab定时任务</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>查询crontab的任务</td>
</tr>
<tr>
<td>-r</td>
<td>删除当前所有用户的crontab任务</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-05-18_15-12-46.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-05-18_15-13-09.png" alt="Snipaste_2021-05-18_15-13-09"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-05-18_15-13-15.png" alt="Snipaste_2021-05-18_15-13-15"></p>
<blockquote>
<p>案例  每隔1分钟，将当前信息的日期信息追加到 /tmp/mydate 目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> */**** date&gt;&gt; /tmp/mydate</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>案例2 每隔1分钟，将当前日期和日历都追加到 /home/mycal 文件中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /home/my.sh 写入内容 date&gt;&gt; /home/mycal 和 cal &gt;&gt; /home/mycal</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> 给my.sh 增加执行权限 chomd u+x /home/my.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> crontab -e 增加 */1**** /home/my.sh</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>案例3  每人凌晨2:00 将mysql数据库 testdb，备份到文件中，提示 指令为: mysqldump -u root -p 密码 数据库 &gt; /home/db.bak</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> crontab -e</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 0 2 *** mysqldump -u root -proot 数据库名 &gt;home/db.bak</span></span><br></pre></td></tr></table></figure>



<h2 id="7-安装相关软件"><a href="#7-安装相关软件" class="headerlink" title="7. 安装相关软件"></a>7. 安装相关软件</h2><h3 id="7-1-安装JDK"><a href="#7-1-安装JDK" class="headerlink" title="7.1 安装JDK"></a>7.1 安装JDK</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /opt/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 通过xtfp上传到 /opt/jdk下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 解压 tar -zxvf 压缩包名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv /opt/jkd/jdk1.8.0_261 /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 配置环境变量 vim/etc/profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_261</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile 让新的环境变量生效</span></span><br></pre></td></tr></table></figure>



<h3 id="7-2安装tomcat"><a href="#7-2安装tomcat" class="headerlink" title="7.2安装tomcat"></a>7.2安装tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> 上传文件到/opt/tomcat 并解压</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 进入bin目录 启动tomact ./startup.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 开放端口8080 测试 ip+8080</span></span><br></pre></td></tr></table></figure>



<h3 id="7-3安装mysql"><a href="#7-3安装mysql" class="headerlink" title="7.3安装mysql"></a>7.3安装mysql</h3><blockquote>
<ol>
<li><p>新建文件夹/opt/mysql，并cd进去</p>
</li>
<li><p>运行wget <a href="http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar%EF%BC%8C%E4%B8%8B%E8%BD%BDmysql%E5%AE%89%E8%A3%85%E5%8C%85">http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar，下载mysql安装包</a></p>
</li>
</ol>
<p>PS：centos7.6自带的类mysql数据库是mariadb，会跟mysql冲突，要先删除。</p>
<ol start="3">
<li><p>运行tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </p>
</li>
<li><p>运行rpm -qa|grep mari，查询mariadb相关安装包</p>
<p>5.运行rpm -e –nodeps mariadb-libs，卸载</p>
</li>
<li><p>然后开始真正安装mysql，依次运行以下几条</p>
</li>
</ol>
<p>​    rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</p>
<p>​    rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</p>
<p>​    rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</p>
<p>​    rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</p>
<ol start="7">
<li><p>运行systemctl start mysqld.service，启动mysql</p>
</li>
<li><p>然后开始设置root用户密码</p>
<p>Mysql自动给root用户设置随机密码，运行grep “password” /var/log/mysqld.log可看到当前密码</p>
</li>
<li><p>运行mysql -u root -p，用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行</p>
</li>
</ol>
<ol start="10">
<li><p>设置root密码，对于个人开发环境，如果要设比较简单的密码（<strong>生产环境服务器要设复杂密码</strong>），可以运行</p>
<p>set global validate_password_policy=0; 提示密码设置策略</p>
<p>（validate_password_policy默认值1，）</p>
</li>
<li><p>set password for ‘root’@’localhost’ =password(‘hspedu100’);</p>
<p>运行flush privileges;使密码设置生效</p>
</li>
</ol>
</blockquote>
<h2 id="8-Linux-面试题"><a href="#8-Linux-面试题" class="headerlink" title="8. Linux 面试题"></a>8. Linux 面试题</h2><ul>
<li>分析日志t.log(访问量),将各个ip地址截取，并统计出现次数，并按从小到大的排序</li>
</ul>
<p><img src="C:\Users\dell\Desktop\Notes\Linux\img\Snipaste_2021-05-18_15-50-02.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat t.txt | cut -d <span class="string">&#x27;/&#x27;</span> -f3 |sort|uniq -c |sort -nr</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 忘记mysql数据库的密码，如何找回？</p>
</blockquote>
<ul>
<li>首先，启动系统，进入开机界面，在界面中按“e”进入编辑界面。如图</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210518155401846.png" alt="image-20210518155401846"></p>
<ul>
<li>进入编辑界面，使用键盘上的上下键把光标往下移动，找到以““Linux16”开头内容所在的行数”，在行的最后面输入：init=/bin/sh。如图</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210518155436939.png" alt="image-20210518155436939"></p>
<ul>
<li> 接着，输入完成后，直接按快捷键：Ctrl+x 进入<strong>单用户模式</strong>。</li>
<li>接着，在光标闪烁的位置中输入：mount -o remount,rw /（注意：各个单词间有空格），完成后按键盘的回车键（Enter）。如图</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210518155507278.png" alt="image-20210518155507278"></p>
<ul>
<li> 在新的一行最后面输入：passwd， 完成后按键盘的回车键（Enter）。输入密码，<strong>然后再次确认密码即</strong>可(<strong>提示:</strong> <strong>密码长度最好8位以上,但不是必须的</strong>), 密码修改成功后，会显示passwd…..的样式，说明密码修改成功</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210518155541924.png" alt="image-20210518155541924"></p>
<ul>
<li>  接着，在鼠标闪烁的位置中（最后一行中）输入：touch /.autorelabel（注意：touch与 /后面有一个空格），完成后按键盘的回车键（Enter）</li>
<li>  继续在光标闪烁的位置中，输入：exec /sbin/init（注意：exec与 /后面有一个空格），完成后按键盘的回车键（Enter）,等待系统自动修改密码(<strong>提示：这个过程时间可能有点长，耐心等待</strong>)，完成后，系统会自动重启, <strong>新的密码生效</strong>了</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210518155611979.png" alt="image-20210518155611979"></p>
<blockquote>
<p>统计ip访问情况，要求分析nginx访问日志(access.log)找出访问页面数量前2位的ip</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat access.log |awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print$1&#125;&#x27;</span>|sort|uniq -c |sort -nr |head -2</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果你是系统管理员，在进行Linux系统权限划分时，考虑哪些因素</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-05-18_15-59-59.png"></p>
<ul>
<li>注意权限分离</li>
<li>权限最小原则</li>
<li>减少使用root用户 尽量用普通用户+sudo提权进行日常操作</li>
<li>重要的系统文件 比如 /etc/password /etc/shadow 日常建议使用 chattr(change attribute)锁定 需要操作再打开</li>
</ul>
<blockquote>
<p>权限操作思考题</p>
</blockquote>
<ul>
<li>l)用户 tom对目录/home/test 有执行x和读r写w权限，/homeltesthelo.java是只读文件，问tom对 hellojava文件<br>能读吗(ok)?能修改吗(no)?能删除吗?(ok)</li>
<li>2)用户tom对目录/homeltest 只有读写权限, home/testhellojava是只读文件,问tom对hello.java文件能读吗(no)?能<br>修改吗(no)?能删除吗(no)?</li>
<li>3)用户tom对目录/home/test 只有执行权限x， /home/test/hello.java是只读文件，问 tom对 hello.java 文件能读吗(ok)?<br>能修改吗(no)?能删除吗(no)?</li>
<li>4)用户tom 对目录/homeltest 只有执行和写权限，homeltesthello.java 是只读文件，问tom对 hello.java文件能读吗<br>(ok)?能修改吗(no)?能删除吗(ok)?</li>
</ul>
<blockquote>
<p>列举Linux高级命令</p>
</blockquote>
<p>netstat//网络状态监控    topll系统运行状态      lsblk//查看硬盘分区find<br>ps -aux/l查看运行进程               chkconfig/l查看服务启动状态       systemctl//管理系统服务器</p>
<blockquote>
<p>Linux查看内存、io 读写、磁盘存储、端口占用、进程查看命令是什么?(瓜子)</p>
</blockquote>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> top, iotop, df -lh , netstat -tunlp , ps -aux | grep关心的进程</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用Linux命令计算t2.txt第二列的和并输出</p>
<p>张三 40</p>
<p>李四50</p>
<p>王五60</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat t2.txt|awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;sum+=S2&#125; END &#123;print sum&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>请用指令写出查找当前文件夹(/home）下所有的文本文件内容中包含有字符“cat”</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -r <span class="string">&quot;cat&quot;</span> /home |cut -d <span class="string">&quot;:&quot;</span> -f 1</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>每天晚上10点30分，打包站点目录/var/spool/mail备份到/home目录下(每次备份<br>按时间生成不同的备份包比如按照年月日时分秒）</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Linux%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Snipaste_2021-05-18_16-21-30.png"></p>
<blockquote>
<p>如何优化Linux 说出几点</p>
</blockquote>
<blockquote>
<p>(1)对linux系统本身的优化-规则(1)不用root ,使用sudo提示权限<br>(2)定时的自动更新服务时间.使用nptdate npt1.aliyun.com . 让 croud定时更新</p>
<p>(3)配置yum源，指向国内镜像(清华，163)</p>
<p>(4)配置合理的防火墙策略,打开必要的端口，关闭不必要的端口</p>
<p>(5)打开最大文件数(调整文件的描述的数量)vim/etc/profile ulimit -SHn 65535</p>
<p>(6)配置合理的监控策略</p>
<p>(7)配置合理的系统重要文件的备份策略(</p>
<p>8)对安装的软件进行优化，比如 nginx ,apache</p>
<p>(9)内核参数进行优化letc/sysctl.conf</p>
<p>(10)锁定一些重要的系统文件chattr /etc/passwd lect/shadow /etc/inittab</p>
<p>(11)禁用不必要的服务 setup , ntsysv</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ笔记</title>
    <url>/2021/04/18/RabbitMQ%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="RabbitMQ学习笔记"><a href="#RabbitMQ学习笔记" class="headerlink" title="RabbitMQ学习笔记"></a>RabbitMQ学习笔记</h1><p><strong>学习地址:<a href="https://www.bilibili.com/video/BV1dX4y1V73G">https://www.bilibili.com/video/BV1dX4y1V73G</a></strong></p>
<p><strong>仓库地址:<a href="https://gitee.com/zhuang-kang/rabbit-mq">https://gitee.com/zhuang-kang/rabbit-mq</a></strong></p>
<h1 id="1，什么是中间件"><a href="#1，什么是中间件" class="headerlink" title="1，什么是中间件"></a>1，什么是中间件</h1><p>一个企业可能运行多个不同业务系统，可能基于不同的操作系统，不同数据库，异构的网络环境，问题是，如何把这些信息系统结合结合成一个有机地协同工作的整体，真正实现跨平台，分布式应用，中间件便是解决之道</p>
<ul>
<li><strong>中间件：</strong>处于操作系统和应用程序之间的软件，在中间件中必须要有一个通信中间件，即 中间件=平台＋通信，这个定义也限定只有用于分布式，同时还可以把它与支撑软件和试用软件分开来</li>
</ul>
<blockquote>
<p>1,RMI 远程调用</p>
<p>2，Load Balancing 负载均衡 将访问负荷分散到各个服务器中</p>
<p>3，Clustering 集群 用多个小服务器代替大型机</p>
<p>4，Threading 多线程处理</p>
<p>5，Transaction 事务</p>
<p>6，Component Life Cycle 组件的生命周期管理</p>
<p>……</p>
</blockquote>
<span id="more"></span>

<h2 id="1-2-为什么需要使用中间件"><a href="#1-2-为什么需要使用中间件" class="headerlink" title="1.2 为什么需要使用中间件"></a>1.2 为什么需要使用中间件</h2><p>具体说，中间件屏蔽底层操作系统的复杂性，使程序员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必为程序在不同软件上的移植而重复工作，减少技术负担，开发的简便，开发周期短，减少系统维护，减少费用投入</p>
<h2 id="1-3-中间件的特点"><a href="#1-3-中间件的特点" class="headerlink" title="1.3 中间件的特点"></a>1.3 中间件的特点</h2><p>中间件是位于平台（硬件和操作系统）和应用之间的通用服务，针对不同操作系统和硬件平台，可以有符合接口和协议的多种实现</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_14-43-35.png"></p>
<p><strong>特点如下：</strong></p>
<ul>
<li>满足大量应用的需求</li>
<li>运行于多种硬件和OS平台</li>
<li>支持分布计算，提供网络，硬件和OS平台的透明性的应用或服务的交互</li>
<li>支持标准的协议</li>
<li>支持标准的接口</li>
</ul>
<blockquote>
<p>简单说，中间件有个很大的特点，脱离于具体设计目标，而具备提供普遍独立功能需求的模块。使得中间件是可替换的，如果一个系统设计中，中间件是不可替换的，不是架构，框架设计有问题，就是中间件出现问题</p>
</blockquote>
<h2 id="1-4-什么时候使用中间件技术"><a href="#1-4-什么时候使用中间件技术" class="headerlink" title="1.4 什么时候使用中间件技术"></a>1.4 什么时候使用中间件技术</h2><p>在项目的架构和重构中，使用任何技术和架构的改变我们都需要谨慎斟酌和思考，因为任何技术的融入和变化都可能人员，技术，和威本的增加，中间件的技术一般现在一些互联网公司或者项目中使用比较多，如果你仅仅还只是一个初创公司建议还是使用单体架构，最多加个缓存中间件即可，不要盲目追求新或者所谓的高性能，而追求的背后一定是业务的驱动和项目的驱动，因为一旦追求就意味着你的学习成本，公司的人员结构以及服务器成本，维护和运维的成本都会增加，所以需要谨慎选择和考虑。</p>
<p>但是作为一个开放人员，一定要有学习中间件技术的能力和思维，否则很容易当项目发展到一个阶段在去掌握估计或者在面试中提及，就会给自己带来不小的困扰，在当今这个时代这些技术也并不是什么新鲜的东西，如果去掌握和挖掘最关键的还是自己花时间和花精力去探讨和研究</p>
<h1 id="2，中间件技术及架构的概述"><a href="#2，中间件技术及架构的概述" class="headerlink" title="2，中间件技术及架构的概述"></a>2，中间件技术及架构的概述</h1><h2 id="2-1-什么是中间件"><a href="#2-1-什么是中间件" class="headerlink" title="2.1 什么是中间件"></a>2.1 什么是中间件</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_14-54-46.png"></p>
<h2 id="2-2-单体架构"><a href="#2-2-单体架构" class="headerlink" title="2.2 单体架构"></a>2.2 单体架构</h2><p>在企业开发的中，大部分的初期架构都采用的是单体架构的模式进行架构，而这种架构的典型的特点:就是把所有的业务和模块，源代码，静态资源文件等都放在一个一工程中，如果其中的一个模块升级或者迭代发生一个很小变动都会重新编译和重新部看项目。这种的架构存在的问题就是:</p>
<ul>
<li>耦合度太高</li>
<li>运维成本过高</li>
<li>不易维护</li>
<li>服务器成本高</li>
<li>后续复杂度增加</li>
</ul>
<h2 id="2-3-分布式架构"><a href="#2-3-分布式架构" class="headerlink" title="2.3 分布式架构"></a>2.3 分布式架构</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_14-58-39.png"></p>
<p>何谓分布式系统呢:</p>
<blockquote>
<p>通俗一点:就是一个请求由服务器端的多个服务(服务或者系统)协同处理完成</p>
</blockquote>
<p>和单体架构不同的是，单体架构是一个请求发起ivm调度线程（确切的是tomcat线程池）分配线程Thread来处理请求直到释放，而分布式是系统是:一个请求是由多个系统共同来协同完成，jvm和环境都可能是独立。如果生活中的比喻的话，单体架构就想建设一个小房子很快就能够搞定，如果你要建设一个鸟巢者大型的建筑，你就必须是各个环节的协同和分布，这样目的也是项目发展都后期的时候要去部署和思考的问题。我们也不能看出来:分布式架构系统存在的特点和问题如下:</p>
<p><strong>存在问题</strong></p>
<ul>
<li>学习成本高，技术栈过多</li>
<li>运维成本和服务器成本增加</li>
<li>人员成本增高</li>
<li>项目负载度上升</li>
<li>面临错误和容错性增加</li>
<li>占用服务器端口和通讯选择成本高</li>
<li>安全性的考虑和因素逼迫选择RMI/MQ相关服务器通讯</li>
</ul>
<p><strong>好处</strong></p>
<ul>
<li>服务系统的独立，占用的服务器资源减少和占用的硬件成本减少，确切的说是:可以合理的分配服务资源，不造成服务器资源的浪费</li>
<li>系统的独立维护和部署，耦合度降低，可插拔性。</li>
<li>系统的架构和技术栈的选择可以变的灵活(而不是单纯的选择java)</li>
</ul>
<p>OAOAOAOAOA# 3，基于中间件技术的架构</p>
<p>OAOAOA## 3.1 消息中间价的架构</p>
<p>OAOAOAOAOAOAOAOAOA<img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_15-04-20.png"></p>
<blockquote>
<p>从上图看出 消息中间件是</p>
<p>1，利用可靠的消息传递机制进行系统直接通讯</p>
<p>2，通过提供可靠消息和消息的排队机制，可以在分布式系统下扩展进程间的通讯</p>
</blockquote>
<h2 id="3-2-消息中间件的应用场景"><a href="#3-2-消息中间件的应用场景" class="headerlink" title="3.2 消息中间件的应用场景"></a>3.2 消息中间件的应用场景</h2><ul>
<li>跨系统数据传递</li>
<li>高并发的流量削峰</li>
<li>数据的分发和异步处理</li>
<li>大数据分析与传递</li>
<li>分布式事务</li>
</ul>
<h2 id="3-3-常见的消息中间件"><a href="#3-3-常见的消息中间件" class="headerlink" title="3.3 常见的消息中间件"></a>3.3 常见的消息中间件</h2><p>OAOAOAOAOAOA<br>ActiveMQ、RabbitMQ、Kafka、RocketMQ等。</p>
<h2 id="3-4-消息中间件的本质及设计"><a href="#3-4-消息中间件的本质及设计" class="headerlink" title="3.4 消息中间件的本质及设计"></a>3.4 消息中间件的本质及设计</h2><p>OAOAOAOAOAOA它是一种接受数据，接受请求、存储数据、发送数据等功能的技术服务。</p>
<blockquote>
<p>MQ消息队列:负责数据的传接受，存储和传递，所以性能要过于普通服务和技术。</p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_15-12-04.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-14_15-12-12.png" alt="Snipaste_2021-04-14_15-12-12"></p>
<h2 id="3-5-消息中间件的核心组成部分"><a href="#3-5-消息中间件的核心组成部分" class="headerlink" title="3.5 消息中间件的核心组成部分"></a>3.5 消息中间件的核心组成部分</h2><ul>
<li>消息的协议</li>
<li>消息的持久化机制</li>
<li>消息的分发策略</li>
<li>消息的高可用</li>
<li>消息的容错机制<br>OAOAOA<h2 id="3-6-小结"><a href="#3-6-小结" class="headerlink" title="3.6 小结"></a>3.6 小结</h2></li>
</ul>
<p>其实不论选择单体架构还是分布式架构都是项目开发的一个阶段，在什么阶段选择适合的架构方式，而不能盲目追求,最后造成的后果和问题都需要自己买单。但是作为一个开发人员学习和探讨新的技术是我们每个程序开发者都应该去保持和思考的问题。当我们没办法去改变社会和世界的时候，我们为了生活和生存那就必须要迎合企业和市场的需求，发挥你的价值和所学的才能，创造价值和实现自我。</p>
<h1 id="4，消息队列协议"><a href="#4，消息队列协议" class="headerlink" title="4，消息队列协议"></a>4，消息队列协议</h1><h2 id="4-1-什么是协议"><a href="#4-1-什么是协议" class="headerlink" title="4.1 什么是协议"></a>4.1 什么是协议</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-04-58.png"></p>
<p>我们知道消息中间件负责数据的传递，存储，和分发消费三个部分，数据的存储和分发的过程中肯定要遵循某种约定成俗的规范，你是采用底层的TCP/IPJT, UDP协议还是其他的自己取构建等，而这些约定成俗的规范就称之为:协议。</p>
<blockquote>
<p>所谓协议是指:<br>1:计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流。<br>2:和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高。</p>
<p>3:协议对数据格式和计算机之间交换数据都必须严格遵守规范。</p>
</blockquote>
<h2 id="4-2-网络协议的三要素"><a href="#4-2-网络协议的三要素" class="headerlink" title="4.2 网络协议的三要素"></a>4.2 网络协议的三要素</h2><p>1.语法。语法是用户数据与控制信息的结构与格式,以及数据出现的顺序。<br>2.语义。语义是解释控制信息每个部分的意义。它规定了需要发出何种控制信息,以及完成的动作与做出什么样的响应。3.时序。时序是对事件发生顺序的详细说明。</p>
<p>比如我MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作,以及消费者消费消息的动作，消费完毕的响应结果和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解:大家每天都在接触的http请求协议:</p>
<p><strong>1:语法:http规定了请求报文和响应报文的格式。</strong></p>
<p><strong>2:语义:客户端主动发起请求称之为请求。(这是一种定义，同时你发起的是post/get请求)</strong></p>
<p><strong>3:时序:一个请求对应一个响应。(一定先有请求在有响应，这个是时序)</strong></p>
<p>而消息中间件采用的并不是http协议，而常见的消息中间件协议有:OpenWire、AMQP、MQTT、Kafka,OpenMessage协议。<br><strong>面试题:为什么消息中间件不直接使用http协议呢?</strong></p>
<ul>
<li>1:因为http请求报文料和响应报文头是比较复杂的，包含了cookie，数据的加密解密，状态码，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速。</li>
<li>2:大部分情况下http大部分都是短链接，在实际的交互过程中，一个请求到响应很有可能会中断，中断以后就不会就行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取消息的过程，出现问题和故障要对数据或消息就行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</li>
</ul>
<h2 id="4-3-AMQP协议"><a href="#4-3-AMQP协议" class="headerlink" title="4.3 AMQP协议"></a>4.3 AMQP协议</h2><p>AMQP:(全称: Advanced Message Queuing Protocol)是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。Erlang中的实现有RabbitMQ等。</p>
<p>特性:<br>1:分布式事务支持。</p>
<p>2:消息的持久化支持。</p>
<p>3:高性能和高可靠的消息处理优势。</p>
<h2 id="4-4-MQTT协议"><a href="#4-4-MQTT协议" class="headerlink" title="4.4 MQTT协议"></a>4.4 MQTT协议</h2><p>MQTT协议: (Message Queueing Telemetry Transport)消息队列是IBM开放的一个即时通讯协议，物联网系统架构中的重要组成部分。</p>
<p><strong>特点:</strong></p>
<ul>
<li><p>轻量</p>
</li>
<li><p>结构简单</p>
</li>
<li><p>传输快，不支持事务</p>
</li>
<li><p>没有持久化设计</p>
</li>
</ul>
<p><strong>应用场景：</strong></p>
<ul>
<li><p>适用于计算能力有限</p>
</li>
<li><p>低带宽</p>
</li>
<li><p>网络不稳定的场景。支持者:</p>
</li>
</ul>
<h2 id="4-5-OpenMessage协议"><a href="#4-5-OpenMessage协议" class="headerlink" title="4.5 OpenMessage协议"></a>4.5 OpenMessage协议</h2><p>是近几年由阿里、雅r虎和滴滴出行、Stremalio等公司共同参与创立的分布式消息中间件、流处理等领域的应用开发标准。<br>特点:</p>
<p>1∶结构简单</p>
<p>2∶解析速度快</p>
<p>3:支持事务和持久化设计。</p>
<h2 id="4-6-Kafaka协议"><a href="#4-6-Kafaka协议" class="headerlink" title="4.6 Kafaka协议"></a>4.6 Kafaka协议</h2><p>Kafka协议是基于TCP/IP的二进制协议。消想内部是通过长度来分割，由一些基本数据类型组成特点是:<br>1:结构的单一</p>
<p>2:解析速度快</p>
<p>3:无事务支持</p>
<p>4:有持久化设计</p>
<h2 id="4-7-小结"><a href="#4-7-小结" class="headerlink" title="4.7 小结"></a>4.7 小结</h2><p>协议:是在tcp/ip协议基础之上构建的一种约定成俗的规范和机制、它的主要目的可以让客户端（应用程序java，go)进行沟通和通讯。并且这种协议下规范必须具有持久性，高可用，高可靠的性能。</p>
<h1 id="5，消息分发策略"><a href="#5，消息分发策略" class="headerlink" title="5，消息分发策略"></a>5，消息分发策略</h1><p><strong>MQ消息队列有如下几个角色</strong></p>
<p>1:生产者</p>
<p>2:存储消息</p>
<p>3∶消费者<br>那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢?一般获取数据的方式无外乎推(push）或者拉(pull)两种方式，典型的git就有推拉机制，我们发送的http请求就是一种典型的拉取数据库数据返回的过程。而消息队列MQ是一种推送的过程，而这些推机制会适用到很多的业务场景也有很多对应推机制策略。</p>
<h2 id="5-2-场景分析1"><a href="#5-2-场景分析1" class="headerlink" title="5.2 场景分析1"></a>5.2 场景分析1</h2><p><img src=""><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-18-03.png" alt="Snipaste_2021-04-15_21-18-03"></p>
<blockquote>
<p>比如我在APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被那个系统或者那些服务或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论。</p>
</blockquote>
<h2 id="5-2-场景分析2"><a href="#5-2-场景分析2" class="headerlink" title="5.2 场景分析2"></a>5.2 场景分析2</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-20-37.png"></p>
<blockquote>
<p>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持:出现问题和故障的情况下，消息不丢失还可以进行重发。</p>
</blockquote>
<h2 id="5-3-消息分发策略的机制和对比"><a href="#5-3-消息分发策略的机制和对比" class="headerlink" title="5.3 消息分发策略的机制和对比"></a>5.3 消息分发策略的机制和对比</h2><table>
<thead>
<tr>
<th></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>Kafaka</strong></th>
<th><strong>RocketMQ</strong></th>
</tr>
</thead>
<tbody><tr>
<td>发布订阅</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>轮询发布</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>/</td>
</tr>
<tr>
<td>公平分发</td>
<td>/</td>
<td>支持</td>
<td>支持</td>
<td>/</td>
</tr>
<tr>
<td>重发</td>
<td>支持</td>
<td>支持</td>
<td>/</td>
<td>支持</td>
</tr>
<tr>
<td>消息拉取</td>
<td>/</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h1 id="6，消息队列高可靠和高可用"><a href="#6，消息队列高可靠和高可用" class="headerlink" title="6，消息队列高可靠和高可用"></a>6，消息队列高可靠和高可用</h1><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力，当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件 比如CPU 内存 磁盘 的极限，一台消息服务器无法满足需求，消息中间件必须支持集群部署，来达到高可用</p>
<h2 id="6-1-集群模式1-Master-slave-主从共享数据的部署方式"><a href="#6-1-集群模式1-Master-slave-主从共享数据的部署方式" class="headerlink" title="6.1 集群模式1- Master-slave 主从共享数据的部署方式"></a>6.1 集群模式1- Master-slave 主从共享数据的部署方式</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-25-24.png"></p>
<blockquote>
<p>生产者将消费发送到Master节点,所有的都连接这个消息队列共享这块数据区域，Master节点负责写入，一旦Master挂掉，slave节点继续服务，形成高可用</p>
</blockquote>
<h2 id="6-2-集群模式2-Master-slave主从同步部署方式"><a href="#6-2-集群模式2-Master-slave主从同步部署方式" class="headerlink" title="6.2 集群模式2 Master-slave主从同步部署方式"></a>6.2 集群模式2 Master-slave主从同步部署方式</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-25-57.png"></p>
<blockquote>
<p>这种模式写入消息同样在Master主节点上，但是主节点会同步数据到slave节点形成副本，和zookeeper或者redis主从机制很类同，可以达到负载均衡的效果，如果消费者有多个这样可以去不同的节点进行消费，因为消费的拷贝和同步会回占用很大的带宽和网络资源，rabbitmq中有使用</p>
</blockquote>
<h2 id="6-3-集群模式3-多主集同步部署模式"><a href="#6-3-集群模式3-多主集同步部署模式" class="headerlink" title="6.3 集群模式3 多主集同步部署模式"></a>6.3 集群模式3 多主集同步部署模式</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-34-05.png"></p>
<blockquote>
<p>和上面差不多的模式</p>
</blockquote>
<h2 id="6-4-集群模式4-多主集群转发部署模式"><a href="#6-4-集群模式4-多主集群转发部署模式" class="headerlink" title="6.4 集群模式4 多主集群转发部署模式"></a>6.4 集群模式4 多主集群转发部署模式</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-35-51.png"></p>
<blockquote>
<p>解释:如果你插入的数据是broker-1中，元数据信息会存储数据的相关描述和记录存放的位置(队列)。<br>它会对描述信息也就是元数据信息就行同步，如果消费者在broker-2中进行消费，发现自己几点没有对应的消息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景:比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他会去联系其他的黄牛询问，如果有就返回。</p>
</blockquote>
<h2 id="6-5-集群模式5-Mater-slave-与Broker-cluster组合的方案"><a href="#6-5-集群模式5-Mater-slave-与Broker-cluster组合的方案" class="headerlink" title="6.5 集群模式5 Mater-slave 与Broker-cluster组合的方案"></a>6.5 集群模式5 Mater-slave 与Broker-cluster组合的方案</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-37-31.png"></p>
<blockquote>
<p>解释:实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。<br>这么集群模式，具体在后续的课程中会进行一个分析和讲解。他们的最终目的都是为保证︰消息服务器不会挂掉，出现了故障依然可以抱着消息服务继续使用。</p>
</blockquote>
<p><strong>三句话:</strong><br>1:要么消息共享</p>
<p>2:要么消息同步</p>
<p>3:要么元数据共享</p>
<h2 id="6-6-什么是高可靠机制"><a href="#6-6-什么是高可靠机制" class="headerlink" title="6.6 什么是高可靠机制"></a>6.6 什么是高可靠机制</h2><p>所谓高可用是指:是指系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为:高可靠。</p>
<p>在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。</p>
<p>如何保证中间件消息的可靠性呢?可以从两个方面考虑:<br>1:消息的传输:通过协议来保证系统间数据解析的正确性。</p>
<p>2:消息的存储可靠:通过持久化来保证消息的可靠性。</p>
<h2 id="7，RabbitMQ安装"><a href="#7，RabbitMQ安装" class="headerlink" title="7，RabbitMQ安装"></a>7，RabbitMQ安装</h2><p><strong>参考官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></strong></p>
<h2 id="7-1-Docker安装"><a href="#7-1-Docker安装" class="headerlink" title="7.1 Docker安装"></a>7.1 Docker安装</h2><p>一个命令搞定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p>然后通过IP地址+15672端口访问即可</p>
<p>用户名和密码都是guest</p>
<h1 id="8，RabbitMQ角色分类"><a href="#8，RabbitMQ角色分类" class="headerlink" title="8，RabbitMQ角色分类"></a>8，RabbitMQ角色分类</h1><h2 id="8-1-none"><a href="#8-1-none" class="headerlink" title="8.1 none"></a>8.1 none</h2><ul>
<li>不能访问management plugin</li>
</ul>
<h2 id="8-2-management-查看自己相关节点信息"><a href="#8-2-management-查看自己相关节点信息" class="headerlink" title="8.2 management:查看自己相关节点信息"></a>8.2 management:查看自己相关节点信息</h2><ul>
<li><p>列出自己可以通过AMQP登入的虚拟机</p>
</li>
<li><p>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</p>
</li>
<li><p>查看和关闭自己的channels和connections</p>
</li>
</ul>
<h2 id="8-3-Policymaker"><a href="#8-3-Policymaker" class="headerlink" title="8.3 Policymaker"></a>8.3 Policymaker</h2><ul>
<li><p>包含management所有权限</p>
</li>
<li><p>查看和创建和删除自己的virtual hosts所属的policies和parameters信息</p>
</li>
</ul>
<h2 id="8-4-Monitoring"><a href="#8-4-Monitoring" class="headerlink" title="8.4 Monitoring"></a>8.4 Monitoring</h2><ul>
<li>包含management所有权限</li>
<li>罗列出所有virtual hosts，包括不能登录的virtual hosts</li>
<li>查看其他用户的connections和channels信息</li>
<li>查看节点级别的数据如clustering和memory使用情况</li>
<li>查看所有的virtual hosts的全局统计信息</li>
</ul>
<h2 id="8-5-Administrator"><a href="#8-5-Administrator" class="headerlink" title="8.5  Administrator"></a>8.5  Administrator</h2><ul>
<li>最高权限</li>
<li>可以创建和删除virtual hosts·可以查看，创建和删除users</li>
<li>查看创建permisssions</li>
</ul>
<h1 id="9，入门案例-简单模式"><a href="#9，入门案例-简单模式" class="headerlink" title="9，入门案例 简单模式"></a>9，入门案例 简单模式</h1><p><strong>具体流程</strong></p>
<ul>
<li>生产者发送消息<ol>
<li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li>
<li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li>
<li>将路由键（空字符串）与队列绑定起来；</li>
<li>发送消息至RabbitMQ Broker；</li>
<li>关闭信道；</li>
<li>关闭连接；</li>
</ol>
</li>
<li>消费者接收消息<ol>
<li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li>
<li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li>
<li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li>
<li>确认（ack，自动确认）接收到的消息；</li>
<li>RabbitMQ从队列中删除相应已经被确认的消息；</li>
<li>关闭信道；</li>
<li>关闭连接；</li>
</ol>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_15-31-15.png"></p>
<p>先导入依赖 创建Maven工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写Producer类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            String queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            String message = <span class="string">&quot;hello kang xiao zhuang&quot;</span>;</span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写Consumer类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到的消息是&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行即可！</p>
<p>查看Web端控制器</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_16-45-31.png"></p>
<p><strong>先启动生产者会发现消息，再启动消费者 控制台打印出消费的消息</strong></p>
<h1 id="10，AMQP协议"><a href="#10，AMQP协议" class="headerlink" title="10，AMQP协议"></a>10，AMQP协议</h1><p>AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。Erlang中的实现有RabbitMQ等</p>
<h2 id="10-1-AMQP生产者流转过程"><a href="#10-1-AMQP生产者流转过程" class="headerlink" title="10.1 AMQP生产者流转过程"></a>10.1 AMQP生产者流转过程</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-58-26.png"></p>
<h2 id="10-2-AMQP消费者流转过程"><a href="#10-2-AMQP消费者流转过程" class="headerlink" title="10.2 AMQP消费者流转过程"></a>10.2 AMQP消费者流转过程</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_21-59-12.png"></p>
<h1 id="11，RabbitMQ核心功能部分"><a href="#11，RabbitMQ核心功能部分" class="headerlink" title="11，RabbitMQ核心功能部分"></a>11，RabbitMQ核心功能部分</h1><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_22-02-02.png"></p>
<h2 id="11-1-核心概念"><a href="#11-1-核心概念" class="headerlink" title="11.1 核心概念"></a>11.1 核心概念</h2><p>**Server:**又称Broker ,接受客户端的连接，实现AMQP实体服务。安装rabbitmq-serverConnection:连接，应用程序与Broker的网络连接TCP/IP/三次握手和四次挥手</p>
<p>**Channel :**网络信道，几乎所有的操作都在Channel中进行，Channel是进k%息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。</p>
<p>**Message :**消息:服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。</p>
<p><strong>Virtual Host：</strong>虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若千个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange</p>
<p>**Exchange:**交换机，接受消息，根据路由键发送消息到绑定的队列。(==不具备消息存储的能力==)Bindings : Exchange和Queue之问的虚拟连接，binding中可以保护多个routing key.</p>
<p>**Routing key :**是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。</p>
<p>**Queue :**队列:也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</p>
<h2 id="11-2-核心架构"><a href="#11-2-核心架构" class="headerlink" title="11.2 核心架构"></a>11.2 核心架构</h2><p><img src=""><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_22-04-54.png" alt="Snipaste_2021-04-15_22-04-54"></p>
<h2 id="11-3-运行流程"><a href="#11-3-运行流程" class="headerlink" title="11.3 运行流程"></a>11.3 运行流程</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_22-05-59.png"></p>
<h2 id="11-4-工作模式分类"><a href="#11-4-工作模式分类" class="headerlink" title="11.4 工作模式分类"></a>11.4 工作模式分类</h2><h3 id="11-4-1-简单模式-simple"><a href="#11-4-1-简单模式-simple" class="headerlink" title="11.4.1 简单模式 simple"></a>11.4.1 简单模式 simple</h3><ul>
<li>参考入门案例</li>
</ul>
<h3 id="11-4-2-工作模式-work"><a href="#11-4-2-工作模式-work" class="headerlink" title="11.4.2 工作模式 work"></a>11.4.2 工作模式 work</h3><ul>
<li>类型 ：无</li>
<li>特点：分发机制</li>
</ul>
<h3 id="11-4-3-发布订阅模式-fanout"><a href="#11-4-3-发布订阅模式-fanout" class="headerlink" title="11.4.3 发布订阅模式 fanout"></a>11.4.3 发布订阅模式 fanout</h3><ul>
<li>类型：fanout</li>
<li>特点：发布订阅模式，是一种广播机制，没有路由key</li>
</ul>
<h3 id="11-4-4-路由模式"><a href="#11-4-4-路由模式" class="headerlink" title="11.4.4 路由模式"></a>11.4.4 路由模式</h3><ul>
<li>类型 ：direct</li>
<li>特点：有routing-key 的匹配模式</li>
</ul>
<h3 id="11-4-5-主题模式"><a href="#11-4-5-主题模式" class="headerlink" title="11.4.5 主题模式"></a>11.4.5 主题模式</h3><ul>
<li>类型：topic</li>
<li>特点：模糊的routing-key的匹配模式</li>
</ul>
<h1 id="12，Fanout模式"><a href="#12，Fanout模式" class="headerlink" title="12，Fanout模式"></a>12，Fanout模式</h1><p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.routing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    String queueName = &quot;queue1&quot;;</span></span><br><span class="line"></span><br><span class="line">            String message = <span class="string">&quot;hello fanout！！！&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//准备交换机</span></span><br><span class="line">            String exchangeName=<span class="string">&quot;fanout_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义路由Key</span></span><br><span class="line">            String routeKey=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//定义交换机类型</span></span><br><span class="line">            String type=<span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">          <span class="comment">//  channel.queueDeclare(queueName, false, false, false, null);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            channel.basicPublish(exchangeName, routeKey, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue2&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到的消息是&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="13，Direct模式"><a href="#13，Direct模式" class="headerlink" title="13，Direct模式"></a>13，Direct模式</h1><p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.direct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消费者direct</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    String queueName = &quot;queue1&quot;;</span></span><br><span class="line"></span><br><span class="line">            String message = <span class="string">&quot;hello direct !!!&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//准备交换机</span></span><br><span class="line">            String exchangeName=<span class="string">&quot;direct_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义路由Key</span></span><br><span class="line">            String routeKey=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//定义交换机类型</span></span><br><span class="line">            String type=<span class="string">&quot;direct&quot;</span>;</span><br><span class="line">          <span class="comment">//  channel.queueDeclare(queueName, false, false, false, null);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            channel.basicPublish(exchangeName, routeKey, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> direct消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到的消息是&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="14，Topic模式"><a href="#14，Topic模式" class="headerlink" title="14，Topic模式"></a>14，Topic模式</h1><p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.topics;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 生产者主题模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    String queueName = &quot;queue1&quot;;</span></span><br><span class="line"></span><br><span class="line">            String message = <span class="string">&quot;hello topics !!!&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//准备交换机</span></span><br><span class="line">            String exchangeName=<span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义路由Key</span></span><br><span class="line">            String routeKey=<span class="string">&quot;com.order.user.test.xxxx&quot;</span>;</span><br><span class="line">            <span class="comment">//定义交换机类型</span></span><br><span class="line">            String type=<span class="string">&quot;topic&quot;</span>;</span><br><span class="line">          <span class="comment">//  channel.queueDeclare(queueName, false, false, false, null);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            channel.basicPublish(exchangeName, routeKey, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 主题模式的消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue3&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到的消息是&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_16-45-37.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_16-46-06.png" alt="Snipaste_2021-04-15_16-46-06"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_16-49-47.png" alt="Snipaste_2021-04-15_16-49-47"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-15_16-50-18.png" alt="Snipaste_2021-04-15_16-50-18"></p>
<p><strong>以上图片仅供参考，需要自己创建交换机，指定路由key</strong></p>
<h1 id="15，代码创建交换机"><a href="#15，代码创建交换机" class="headerlink" title="15，代码创建交换机"></a>15，代码创建交换机</h1><p>上面都是用web客户端创建的，现在用代码的方式创建交换机和定义队列！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.all;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明交换机名称</span></span><br><span class="line">            String exchangeName=<span class="string">&quot;all_message_exchange&quot;</span>;</span><br><span class="line">            <span class="comment">//交换机类型</span></span><br><span class="line">            String exchangeType=<span class="string">&quot;direct&quot;</span>;</span><br><span class="line">            <span class="comment">//定义一个交换机</span></span><br><span class="line">            channel.exchangeDeclare(exchangeName,exchangeType,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明队列</span></span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;queue5&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;queue6&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;queue7&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定队列和交换机的关系</span></span><br><span class="line">            channel.queueBind(<span class="string">&quot;queue5&quot;</span>,exchangeName,<span class="string">&quot;order&quot;</span>);</span><br><span class="line">            channel.queueBind(<span class="string">&quot;queue6&quot;</span>,exchangeName,<span class="string">&quot;order&quot;</span>);</span><br><span class="line">            channel.queueBind(<span class="string">&quot;queue7&quot;</span>,exchangeName,<span class="string">&quot;order&quot;</span>);</span><br><span class="line">          <span class="comment">//  String queueName = &quot;queue1&quot;;</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String message = <span class="string">&quot;hello kang xiao zhuang&quot;</span>;</span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            channel.basicPublish(exchangeName,<span class="string">&quot;order&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到web端创建了交换机和队列，关系也绑定上去了</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_13-19-13.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_13-19-56.png" alt="Snipaste_2021-04-17_13-19-56"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_13-20-20.png" alt="Snipaste_2021-04-17_13-20-20"></p>
<p>消费者代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 代码创建交换机的消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue5&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到的消息是&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码都是大同小异，主要是看用什么方式创建和定义交换机，队列</p>
<h1 id="16，Work模式-轮询模式"><a href="#16，Work模式-轮询模式" class="headerlink" title="16，Work模式-轮询模式"></a>16，Work模式-轮询模式</h1><p>当有多个消费者时，消息会被哪个消费者消费呢，主要有两种模式，如何均衡消费者消费的信息多少</p>
<p>1，轮询模式的分发：一个消费者一条，按均分配</p>
<p>2，公平分发：根据消费者的消费能力进行公平分发，处理快处理的多，慢处理的少，按劳分配！</p>
<p><strong>实战模拟</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.lunxun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            String queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                String message = <span class="string">&quot;hello kang xiao zhuang--&gt;轮询模式&quot;</span>+i;</span><br><span class="line">                <span class="comment">//发送消息给队列</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个消费者 同时运行看结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.lunxun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 轮询模式的案例 消费者1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 13:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Consumer1号收到消息是：&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer1号开始接收消息&quot;</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.lunxun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 轮询模式的案例 消费者2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 13:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Consumer2号收到消息是：&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer2号开始接收消息&quot;</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_13-49-05.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_13-48-58.png" alt="Snipaste_2021-04-17_13-48-58"></p>
<p><strong>总结 ：不会因为服务器的性能而影响消费的多少，都是对等！</strong></p>
<h1 id="17，Work模式-公平模式"><a href="#17，Work模式-公平模式" class="headerlink" title="17，Work模式-公平模式"></a>17，Work模式-公平模式</h1><p>改成手动应答机制，指标设置参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.fair;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/15 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            String queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            队列名称</span></span><br><span class="line"><span class="comment">            是否要持久化</span></span><br><span class="line"><span class="comment">            排他性</span></span><br><span class="line"><span class="comment">            是否自动删除</span></span><br><span class="line"><span class="comment">            携带附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                String message = <span class="string">&quot;hello kang xiao zhuang--&gt;公平模式&quot;</span>+i;</span><br><span class="line">                <span class="comment">//发送消息给队列</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.fair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 公平模式的案例 消费者1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 13:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            <span class="comment">//设定指标的值</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            Channel finalChannel = channel;</span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Consumer1号收到消息是：&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                        finalChannel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer1号开始接收消息&quot;</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.rabbitmq.work.fair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Consumer2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 公平模式的案例 消费者2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 13:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工程</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.152.130&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Connection</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接获得通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过交换机创建 声明队列 绑定关系 路由key 发送消息 和接收消息</span></span><br><span class="line">            <span class="comment">//设定指标的值</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            Channel finalChannel = channel;</span><br><span class="line">            channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s, Delivery delivery)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Consumer2号收到消息是：&quot;</span> + <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        finalChannel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接受失败...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer2号开始接收消息&quot;</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="18，RabbitMQ应用场景"><a href="#18，RabbitMQ应用场景" class="headerlink" title="18，RabbitMQ应用场景"></a>18，RabbitMQ应用场景</h1><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_14-26-09.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_14-27-07.png" alt="Snipaste_2021-04-17_14-27-07"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_14-28-53.png" alt="Snipaste_2021-04-17_14-28-53"></p>
<p><strong>好处：</strong></p>
<ul>
<li>完全解耦，用MQ建立桥接</li>
<li>有独立的线程池和运行模型</li>
<li>出现了消息可能会丢失，MQ有持久化功能</li>
<li>如何保证消息的可靠性，死信队列和消息转移功能</li>
<li>如果服务器承载不了，你需要自己去写高可用，HA镜像模型高可用</li>
</ul>
<p>按照上面约定，用户的响应时间相当于是订单信息的写入数据库的时间，也就是50毫秒，注册邮件，发送消息写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，架构改变后，比串行提高3倍，并行提高2倍</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_14-30-05.png" alt="Snipaste_2021-04-17_14-30-05"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_14-30-21.png" alt="Snipaste_2021-04-17_14-30-21"></p>
<p>场景</p>
<ul>
<li>流量的削峰</li>
<li>分布式事务的可靠消费和可靠生产</li>
<li>索引，缓存，静态化处理的数据同步</li>
<li>流量监控</li>
<li>日志监控</li>
<li>下单，订单分发，抢票</li>
</ul>
<h1 id="19，SpringBoot整合RabbitMQ"><a href="#19，SpringBoot整合RabbitMQ" class="headerlink" title="19，SpringBoot整合RabbitMQ"></a>19，SpringBoot整合RabbitMQ</h1><p>在Spring项目中，可以使用Spring-Rabbit去操作RabbitMQ<br><a href="https://github.com/spring-projects/spring-amqp">https://github.com/spring-projects/spring-amqp</a></p>
<p>尤其是在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p>
<p><em>一般在开发过程中</em>：</p>
<p><strong>生产者工程：</strong></p>
<ol>
<li><p>application.yml文件配置RabbitMQ相关信息；</p>
</li>
<li><p>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</p>
</li>
<li><p>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</p>
</li>
</ol>
<p><strong>消费者工程：</strong></p>
<ol>
<li><p>application.yml文件配置RabbitMQ相关信息</p>
</li>
<li><p>创建消息处理类，用于接收队列中的消息并进行处理</p>
</li>
</ol>
<p>新建一个模块 导入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.152</span><span class="number">.130</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>



<p>创建业务层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.springboot_rabbitmq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> OrderService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 业务层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟用户下单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid,String productid,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据商品id查询库存是否充足</span></span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//保存订单</span></span><br><span class="line">        System.out.println(<span class="string">&quot;订单生产成功&quot;</span>+orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过MQ来完成消息的分发</span></span><br><span class="line">        String exchangeName=<span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写配置类 定义交换机和队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.springboot_rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> RabbitMQConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> rabbitmq的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 14:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明注册fanout模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建三个消费者 类上添加注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.springboot_rabbitmq.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FanoutDuanXinConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FanoutDuanXinConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 15:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;duanxin.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutDuanXinConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dunaxin fanout --- 接受到了订单消息是：-&gt;&quot;</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.springboot_rabbitmq.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FanoutEmailConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FanoutEmailConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 15:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutEmailConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;email fanout --- 接受到了订单消息是：-&gt;&quot;</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.springboot_rabbitmq.service.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FanoutSMSConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FanoutSMSConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/17 15:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;sms.fanout.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSMSConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sms fanout --- 接受到了订单消息是：-&gt;&quot;</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-17_15-13-10.png"></p>
<p><strong>看到消息被创建而且被消费</strong></p>
<h1 id="20，RabbitMQ模式总结"><a href="#20，RabbitMQ模式总结" class="headerlink" title="20，RabbitMQ模式总结"></a>20，RabbitMQ模式总结</h1><p>RabbitMQ工作模式：<br><strong>1、简单模式 HelloWorld</strong><br>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p>
<p><strong>2、工作队列模式 Work Queue</strong><br>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p>
<p><strong>3、发布订阅模式 Publish/subscribe</strong><br>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p>
<p><strong>4、路由模式 Routing</strong><br>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p>
<p><strong>5、通配符模式 Topic</strong><br>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p>
<h1 id="21，RabbitMQ高级特性"><a href="#21，RabbitMQ高级特性" class="headerlink" title="21，RabbitMQ高级特性"></a>21，RabbitMQ高级特性</h1><h2 id="21-1-消息的可靠投递"><a href="#21-1-消息的可靠投递" class="headerlink" title="21.1 消息的可靠投递"></a>21.1 消息的可靠投递</h2><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p>
<ul>
<li><p>confirm 确认模式</p>
</li>
<li><p>return 退回模式</p>
</li>
</ul>
<p>rabbitmq 整个消息投递的路径为：</p>
<p>producer—&gt;rabbitmq broker—&gt;exchange—&gt;queue—&gt;consumer</p>
<ul>
<li><p>消息从 producer 到 exchange 则会返回一个 confirmCallback 。</p>
</li>
<li><p>消息从 exchange–&gt;queue 投递失败则会返回一个 returnCallback 。</p>
</li>
</ul>
<p>我们将利用这两个 callback 控制消息的可靠性投递</p>
<h2 id="21-2-Consumer-Ack"><a href="#21-2-Consumer-Ack" class="headerlink" title="21.2 Consumer Ack"></a>21.2 Consumer Ack</h2><p>ack指Acknowledge，确认。 表示消费端收到消息后的确认方式。</p>
<p>有三种确认方式：</p>
<ul>
<li><p>自动确认：acknowledge=”none”</p>
</li>
<li><p>手动确认：acknowledge=”manual”</p>
</li>
<li><p>根据异常情况确认：acknowledge=”auto”）</p>
</li>
</ul>
<p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。</p>
<h2 id="21-3-TTL"><a href="#21-3-TTL" class="headerlink" title="21.3 TTL"></a>21.3 TTL</h2><ul>
<li><p>TTL 全称 Time To Live（存活时间/过期时间）。</p>
</li>
<li><p>当消息到达存活时间后，还没有被消费，会被自动清除。</p>
</li>
<li><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-18_13-52-32.png"></p>
<p><strong>小结</strong></p>
<ul>
<li><p>设置队列过期时间使用参数：x-message-ttl，单位：ms(毫秒)，会对整个队列消息统一过期。</p>
</li>
<li><p>设置消息过期时间使用参数：expiration。单位：ms(毫秒)，当该消息在队列头部时（消费时），会单独判断这一消息是否过期。</p>
</li>
<li><p>如果两者都进行了设置，以时间短的为准。</p>
</li>
</ul>
<h2 id="21-4-死信队列"><a href="#21-4-死信队列" class="headerlink" title="21.4 死信队列"></a>21.4 死信队列</h2><p>死信队列，英文缩写：DLX 。Dead Letter Exchange（死信交换机），当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-18_13-54-09.png"></p>
<p><strong>消息成为死信的三种情况：</strong></p>
<ol>
<li><p>队列消息长度到达限制；</p>
</li>
<li><p>消费者拒接消费消息，basicNack/basicReject,并且不把消息重新放入原目标队列,requeue=false；</p>
</li>
<li><p>原队列存在消息过期设置，消息到达超时时间未被消费；</p>
</li>
</ol>
<p><strong>队列绑定死信交换机：</strong></p>
<p>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-18_13-55-53.png"></p>
<h2 id="21-5-日志监控"><a href="#21-5-日志监控" class="headerlink" title="21.5 日志监控"></a>21.5 日志监控</h2><p>配置详解见</p>
<p><a href="https://www.rabbitmq.com/configure.html">https://www.rabbitmq.com/configure.html</a></p>
<h3 id="21-5-1-rabbitmqctl管理和监控"><a href="#21-5-1-rabbitmqctl管理和监控" class="headerlink" title="21.5.1 rabbitmqctl管理和监控"></a>21.5.1 <strong>rabbitmqctl管理和监控</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看队列</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_queues</span></span><br><span class="line"></span><br><span class="line">查看exchanges</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_exchanges</span></span><br><span class="line"></span><br><span class="line">查看用户</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_users</span></span><br><span class="line"></span><br><span class="line">查看连接</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_connections</span></span><br><span class="line"></span><br><span class="line">查看消费者信息</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_consumers</span></span><br><span class="line"></span><br><span class="line">查看环境变量</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl environment</span></span><br><span class="line"></span><br><span class="line">查看未被确认的队列</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_queues  name messages_unacknowledged</span></span><br><span class="line"></span><br><span class="line">查看单个队列的内存使用</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_queues name memory</span></span><br><span class="line"></span><br><span class="line">查看准备就绪的队列</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl list_queues name messages_ready</span></span><br></pre></td></tr></table></figure>



<h1 id="22，RabbitMQ应用问题"><a href="#22，RabbitMQ应用问题" class="headerlink" title="22，RabbitMQ应用问题"></a>22，RabbitMQ应用问题</h1><ol>
<li>消息可靠性保障</li>
</ol>
<ul>
<li>消息补偿机制</li>
</ul>
<ol start="2">
<li>消息幂等性保障</li>
</ol>
<ul>
<li>乐观锁解决方案</li>
</ul>
<h2 id="22-1-消息可靠性保障"><a href="#22-1-消息可靠性保障" class="headerlink" title="22.1 消息可靠性保障"></a>22.1 <strong>消息可靠性保障</strong></h2><p><strong>消息补偿</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-18_13-59-14.png"></p>
<h2 id="22-2-消息幂等性保障"><a href="#22-2-消息幂等性保障" class="headerlink" title="22.2 消息幂等性保障"></a>22.2 消息幂等性保障</h2><p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p>
<p>在MQ中指，消费多条相同的消息，得到与消费该消息一次相同的结果。</p>
<p><strong>乐观锁机制</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/RabbitMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/RabbitMQSnipaste_2021-04-18_14-00-32.png"></p>
<h1 id="23，RabbitMQ集群搭建"><a href="#23，RabbitMQ集群搭建" class="headerlink" title="23，RabbitMQ集群搭建"></a>23，RabbitMQ集群搭建</h1><h2 id="此章节后续补上！"><a href="#此章节后续补上！" class="headerlink" title="此章节后续补上！"></a>此章节后续补上！</h2>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java正则表达式</title>
    <url>/2021/04/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h1><p><strong>写在前面</strong></p>
<p><strong>学习地址：</strong></p>
<p><strong><a href="https://www.bilibili.com/video/BV1Eq4y1E79W?p=1">【韩顺平讲Java】Java 正则表达式专题 </a></strong></p>
<p><strong><a href="https://www.runoob.com/java/java-regular-expressions.html">Java 正则表达式 | 菜鸟教程 (runoob.com)</a></strong></p>
<p><strong>感谢韩老师的讲解视频，十分感谢！！！</strong></p>
<h1 id="1-认识正则表达式"><a href="#1-认识正则表达式" class="headerlink" title="1. 认识正则表达式"></a>1. 认识正则表达式</h1><p>首先通过一个例子来体验正则表达式的威力</p>
<p><strong>随便找段话，找出所有4个连续数字的式子</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 体验正则表达式的威力</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 12:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用 3443 于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着 Java 的应用开始普及 9889 &quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//目标匹配所有四个数字</span></span><br><span class="line">        <span class="comment">// \\d表示任意一个数字</span></span><br><span class="line">        String regStr=<span class="string">&quot;\\d\\d\\d\\d&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建模式对象 即 正则表达式对象</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">// 创建匹配器 按照正则表达式的规则去匹配content字符串</span></span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        matcher.find();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到-&gt;&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_13-08-55.png"></p>
<p>通过几个式子，就可以精确的找到连续的四个数字！</p>
<p>接下来分析两个重要的表达式</p>
<ul>
<li><strong>matcher.find();</strong></li>
</ul>
<p>作用：考虑分组</p>
<p>什么是分组？ 比如(\\d)(\\d) 表达式中有()表示分组，第一个()表示第1组，第二表示第2组</p>
<ol>
<li>根据指定的规则，定位满足规则的子字符串 比如(20)(66)</li>
<li>找到后，将 <strong>子字符串的开始索引记录到matcher对象的属性</strong>  int[] groups；</li>
</ol>
<ul>
<li>2.1 groups[0] = 0 , 把该子字符串的结束的索引+1 的值记录到 groups[1] = 4 </li>
<li>2.2 记录 1 组()匹配到的字符串 groups[2] = 0 groups[3] = 2 </li>
<li>2.3 记录 2 组()匹配到的字符串 groups[4] = 2 groups[5] = 4</li>
<li>2.4.如果有更多的分组…..</li>
</ul>
<ol start="3">
<li>同时记录oldLast的值 子字符串的结束的 索引+1的值即 35 下次执行find时，就从35开始匹配</li>
</ol>
<ul>
<li><strong>matcher.group();</strong></li>
</ul>
<p>先看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">group</span><span class="params">(<span class="keyword">int</span> group)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No match found&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (group &lt; <span class="number">0</span> || group &gt; groupCount())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;No group &quot;</span> + group);</span><br><span class="line">        <span class="keyword">if</span> ((groups[group*<span class="number">2</span>] == -<span class="number">1</span>) || (groups[group*<span class="number">2</span>+<span class="number">1</span>] == -<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> getSubSequence(groups[group * <span class="number">2</span>], groups[group * <span class="number">2</span> + <span class="number">1</span>]).toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>根据 groups[0]=31 和 groups[1]=35 的记录的位置，从 content 开始截取子字符串返回 </p>
</li>
<li><p>就是 [31,35) 包含 31 但是不包含索引为 35 的位置 </p>
</li>
<li><p>如果再次指向 find 方法.仍然按照上面分析来执行</p>
</li>
</ul>
<p>我们将原来的代码修改下 看看分组的匹配情况</p>
<p>将 <code>String regStr=&quot;\\d\\d\\d\\d&quot;;</code> 改为<code>String regStr=&quot;(\\d\\d)(\\d\\d)&quot;;</code></p>
<p><strong>debug启动</strong> 断点位置如下</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_13-30-55.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 体验正则表达式的威力</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 12:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用 3443 于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着 Java 的应用开始普及 9889 &quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//目标匹配所有四个数字</span></span><br><span class="line">        <span class="comment">// \\d表示任意一个数字</span></span><br><span class="line">        String regStr=<span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建模式对象 即 正则表达式对象</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">// 创建匹配器 按照正则表达式的规则去匹配content字符串</span></span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        matcher.find();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到-&gt;&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第一组找到的值-&gt;&quot;</span>+matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第二组找到的值-&gt;&quot;</span>+matcher.group(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动后进入方法查看属性  <strong>看到groups中的索引元素在增加！</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_13-29-17.png"></p>
<p><strong>小结</strong></p>
<ol>
<li><p>如果正则表达式有() 即分组 </p>
</li>
<li><p>取出匹配的字符串规则如下 </p>
</li>
<li><p>group(0) 表示匹配到的子字符串 </p>
</li>
<li><p>group(1) 表示匹配到的子字符串的第一组字串 </p>
</li>
<li><p>group(2) 表示匹配到的子字符串的第 2 组字串 </p>
</li>
<li><p> 但是分组的数不能越界</p>
</li>
</ol>
<h1 id="2-正则表达式介绍"><a href="#2-正则表达式介绍" class="headerlink" title="2. 正则表达式介绍"></a>2. 正则表达式介绍</h1><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。</p>
<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
<p>元字符从功能上大概分为</p>
<ul>
<li>限定符</li>
<li>选择匹配符</li>
<li>分组组合和反向引用符</li>
<li>特殊字符</li>
<li>字符匹配符</li>
<li>定位符</li>
</ul>
<h2 id="2-1-元字符-转义号"><a href="#2-1-元字符-转义号" class="headerlink" title="2.1 元字符-转义号\\"></a>2.1 元字符-转义号\\</h2><p><code>\\</code>符号 说明：我们使用正则表达式检索某些特殊的字符的时候，需要用到转义符号，否则检索不到结果</p>
<p><font color="red">注意：Java的正则表达式中，两个<code>\\</code>代表其他语言中的一个<code>\</code></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示转义字符的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 13:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;abc$(a.bc(123( )&quot;</span>;</span><br><span class="line">        <span class="comment">//匹配( =&gt; \\(</span></span><br><span class="line">        <span class="comment">//匹配. =&gt; \\. //String regStr = &quot;\\.&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d\\d\\d&quot;;</span></span><br><span class="line">        String regStr = <span class="string">&quot;\\d&#123;3&#125;&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String regStr = <span class="string">&quot;\\d\\d\\d&quot;</span>;<span class="comment">//可以写成下面的方式</span></span><br><span class="line">String regStr = <span class="string">&quot;\\d&#123;3&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_13-43-52.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_13-44-19.png"></p>
<h2 id="2-2-元字符-字符匹配符"><a href="#2-2-元字符-字符匹配符" class="headerlink" title="2.2 元字符-字符匹配符"></a>2.2 元字符-字符匹配符</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-51-49.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-52-17.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示转义字符的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 13:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;a11c8abc _ABCy @&quot;</span>;</span><br><span class="line">        String regStr = <span class="string">&quot;[a-z]&quot;</span>;<span class="comment">//匹配 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[A-Z]&quot;;//匹配 A-Z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;abc&quot;;//匹配 abc 字符串[默认区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(?i)abc&quot;;//匹配 abc 字符串[不区分大小写</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[0-9]&quot;;//匹配 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^a-z]&quot;;//匹配 不在 a-z 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^0-9]&quot;;//匹配 不在 0-9 之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[abcd]&quot;;//匹配 在 abcd 中任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\D&quot;;//匹配 不在 0-9 的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\w&quot;;//匹配 大小写英文字母, 数字，下划线</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\W&quot;;//匹配 等价于 [^a-zA-Z0-9_]</span></span><br><span class="line">        <span class="comment">//\\s 匹配任何空白字符(空格,制表符等)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\s&quot;;</span></span><br><span class="line">        <span class="comment">//\\S 匹配任何非空白字符 ,和\\s 刚好相反</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\S&quot;;</span></span><br><span class="line">        <span class="comment">//. 匹配出 \n 之外的所有字符,如果要匹配.本身则需要使用 \\. </span></span><br><span class="line">        <span class="comment">// String regStr = &quot;.&quot;;</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. 当创建 Pattern 对象时，指定 Pattern.CASE_INSENSITIVE, 表示匹配是不区分字母大小写.</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr<span class="comment">/*, Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-3-元字符-选择匹配字符"><a href="#2-3-元字符-选择匹配字符" class="headerlink" title="2.3 元字符-选择匹配字符"></a>2.3 元字符-选择匹配字符</h2><p>在匹配某个字符串的时候是选择性的 既可以匹配这个，也可以匹配那个，需要用到匹配符号<code>|</code></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>符号</th>
<th>示例</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>匹配”|”之前或之后的表达式</td>
<td>ab|cd</td>
<td>ab或者cd</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 选择匹配符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;kangxiaozhuang 康 扛抗&quot;</span>;</span><br><span class="line">        String regStr = <span class="string">&quot;kang|康|扛&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regStr<span class="comment">/*, Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        Matcher matcher =pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_14-06-12.png"></p>
<h2 id="2-4-元字符-限定符"><a href="#2-4-元字符-限定符" class="headerlink" title="2.4 元字符-限定符"></a>2.4 元字符-限定符</h2><p>用于指定其前面的字符和组合项连续出现多少次</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-52-55.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;a211111aaaaaahello&quot;</span>;</span><br><span class="line">        <span class="comment">//a&#123;3&#125;,1&#123;4&#125;,\\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3&#125;&quot;;// 表示匹配 aaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4&#125;&quot;;// 表示匹配 1111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2&#125;&quot;;// 表示匹配 两位的任意数字字符</span></span><br><span class="line">        <span class="comment">//a&#123;3,4&#125;,1&#123;4,5&#125;,\\d&#123;2,5&#125;</span></span><br><span class="line">        <span class="comment">//细节：java 匹配默认贪婪匹配，即尽可能匹配多的</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3,4&#125;&quot;; //表示匹配 aaa 或者 aaaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4,5&#125;&quot;; //表示匹配 1111 或者 11111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2,5&#125;&quot;; //匹配 2 位数或者 3,4,5</span></span><br><span class="line">        <span class="comment">//1+</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1+&quot;; //匹配一个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d+&quot;; //匹配一个数字或者多个数字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1*&quot;; //匹配 0 个 1 或者多个 1</span></span><br><span class="line">        <span class="comment">//演示?的使用, 遵守贪婪匹配</span></span><br><span class="line">        String regStr = <span class="string">&quot;a1?&quot;</span>; <span class="comment">//匹配 a 或者 a1</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr<span class="comment">/*, Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到 &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-5-元字符-定位符"><a href="#2-5-元字符-定位符" class="headerlink" title="2.5 元字符-定位符"></a>2.5 元字符-定位符</h2><p>定位符，规定要匹配的字符串出现的位置，比如在字符串的开始还是在结束的位置</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>示例</th>
<th>说明</th>
<th>匹配输入</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>指定起始字符</td>
<td><code>^[0-9]+[a-z]*</code></td>
<td>以至少1个数字开头，后接任意个小写字母的字符串</td>
<td>123,6aa</td>
</tr>
<tr>
<td>$</td>
<td>指定结束字符</td>
<td><code>^[0-9]\\\\-[a-z]+$</code></td>
<td>以1个数字开头后连接字符”-“，并以至少1个小写字母结尾的字符串</td>
<td>1-a</td>
</tr>
<tr>
<td>\\b</td>
<td>匹配目标字符串的边界</td>
<td>kang\\b</td>
<td>这里说的字符串的边界指的是子串间有空格，或者是目标字符串的结束位置</td>
<td>spkang,hhkang</td>
</tr>
<tr>
<td>\\B</td>
<td>匹配目标字符串的非边界</td>
<td>kang\\B</td>
<td>和\\b的含义刚刚相反</td>
<td>kangzk,niukang</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示定位符的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;kangxiaozhuang spkang nnkang&quot;</span>;</span><br><span class="line">    <span class="comment">//String content = &quot;123-abc&quot;;</span></span><br><span class="line">    <span class="comment">//以至少 1 个数字开头，后接任意个小写字母的字符串</span></span><br><span class="line">    <span class="comment">//String regStr = &quot;^[0-9]+[a-z]*&quot;;</span></span><br><span class="line">    <span class="comment">//以至少 1 个数字开头, 必须以至少一个小写字母结束</span></span><br><span class="line">    <span class="comment">//String regStr = &quot;^[0-9]+\\-[a-z]+$&quot;;</span></span><br><span class="line">    <span class="comment">//表示匹配边界的 han[这里的边界是指：被匹配的字符串最后, // 也可以是空格的子字符串的后面]</span></span><br><span class="line">    String regStr = <span class="string">&quot;kang\\b&quot;</span>;</span><br><span class="line">    <span class="comment">//和\\b 的含义刚刚相反</span></span><br><span class="line"><span class="comment">//        String regStr = &quot;kang\\B&quot;;</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-分组"><a href="#3-分组" class="headerlink" title="3. 分组"></a>3. 分组</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-54-39.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-54-37.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 分组演示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String content = <span class="string">&quot;kangxiaozhuang s7789 nn1189h&quot;</span>;</span><br><span class="line">        <span class="comment">// 1. matcher.group(0) 得到匹配到的字符串</span></span><br><span class="line">        <span class="comment">// 2. matcher.group(1) 得到匹配到的字符串的第 1 个分组内容</span></span><br><span class="line">        <span class="comment">// 3. matcher.group(2) 得到匹配到的字符串的第 2 个分组内容</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(\\d\\d)(\\d\\d)&quot;;//匹配 4 个数字的字符串</span></span><br><span class="line">        <span class="comment">//命名分组： 即可以给分组取名</span></span><br><span class="line">        String regStr = <span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;<span class="comment">//匹配 4 个数字的字符串</span></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 1 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g1&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第 2 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_14-35-48.png"></p>
<h1 id="4-练习"><a href="#4-练习" class="headerlink" title="4. 练习"></a>4. 练习</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_14-37-53.png"></p>
<p>要求如上 对字符串进行验证！</p>
<p>注意 汉字的编码如下范围</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String regStr = <span class="string">&quot;^[\u0391-\uffe5]+$&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 应用实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;13588889999&quot;</span>;</span><br><span class="line">        <span class="comment">// 汉字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[\u0391-\uffe5]+$&quot;;</span></span><br><span class="line">        <span class="comment">// 邮政编码</span></span><br><span class="line">        <span class="comment">// 要求：是 1-9 开头的一个六位数. 比如：123890</span></span><br><span class="line">        <span class="comment">//  String regStr = &quot;^[1-9]\\d&#123;5&#125;$&quot;;</span></span><br><span class="line">        <span class="comment">// QQ 号码</span></span><br><span class="line">        <span class="comment">// 要求: 是 1-9 开头的一个(5 位数-10 位数) 比如: 12389 , 1345687 , 187698765</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[1-9]\\d&#123;4,9&#125;$&quot;;</span></span><br><span class="line">        <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="comment">// 要求: 必须以 13,14,15,18 开头的 11 位数 , 比如 13588889999</span></span><br><span class="line">        String regStr = <span class="string">&quot;^1[3|4|5|8]\\d&#123;9&#125;$&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不满足格式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配URL的思路</strong></p>
<ul>
<li>先确定 url 的开始部分 https:// | http://</li>
<li>然后通过 ([\w-]+.)+[\w-]+ 匹配<code>www.bilibili.com</code></li>
<li>/video/BV1fh411y7R8?from=sear 匹配(/[\w-?=&amp;/%.#]*)?</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 判断URL的表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String content = &quot;https://www.bilibili.com/video/BV1fh411y7R8?from=search&amp;seid=1831060912083761326&quot;;</span></span><br><span class="line">        String content =<span class="string">&quot;https://www.runoob.com/regexp/regexp-syntax.html&quot;</span>;</span><br><span class="line">        <span class="comment">//注意：[. ? *]表示匹配就是.本身</span></span><br><span class="line">        String regStr = <span class="string">&quot;^((http|https)://)?([\\w-]+\\.)+[\\w-]+(\\/[\\w-?=&amp;/%.#]*)?$&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不满足格式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里如果使用 Pattern 的 matches 整体匹配 比较简洁</span></span><br><span class="line">        System.out.println(Pattern.matches(regStr, content));<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-正则表达式常用的三个常用类"><a href="#5-正则表达式常用的三个常用类" class="headerlink" title="5. 正则表达式常用的三个常用类"></a>5. 正则表达式常用的三个常用类</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_14-48-48.png"></p>
<p>更多方法参考：<a href="https://www.runoob.com/java/java-regular-expressions.html">Java 正则表达式 | 菜鸟教程 (runoob.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PatternMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示 matches 方法，用于整体匹配, 在验证输入的字符串是否满足条件使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatternMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;hello abc hello, kang&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;hello&quot;;</span></span><br><span class="line">        String regStr = <span class="string">&quot;hello.*&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> matches = Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配= &quot;</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Matcher类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MatcherMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  Matcher常用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 14:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatcherMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;hello edu jack kangxiaohhh hello hhkxz hello kkxxaa kxzkxz&quot;</span>;</span><br><span class="line">        String regStr = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line">        <span class="comment">//完成如果 content 有 kang 替换成 康小庄！！！</span></span><br><span class="line">        regStr = <span class="string">&quot;kang&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span></span><br><span class="line">        String newContent = matcher.replaceAll(<span class="string">&quot;康小庄！！！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent=&quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_14-55-34.png"></p>
<h1 id="6-分组，捕获，反向引用"><a href="#6-分组，捕获，反向引用" class="headerlink" title="6.分组，捕获，反向引用"></a>6.分组，捕获，反向引用</h1><p><strong>分组</strong></p>
<ul>
<li>可以用圆括号组成一个比较复杂的匹配模式，那么一个圆括号的部分我们可以看做是一个子表达式/一个分组</li>
</ul>
<p><strong>捕获</strong></p>
<ul>
<li>把正则表达式中子表达式/分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左向右，以分组的左括号为标志，第一个出现的分组的组好为1，第二个位2，以此类推，组0代表的是整个正则式</li>
</ul>
<p><strong>反向引用</strong></p>
<ul>
<li>圆括号的内容被捕获后，可以在这个括号后使用，写出一个实用的匹配模式 <strong>称为反向引用</strong> 可以在表达式内部或者外部</li>
<li>内部反向引用<strong>\\分组号</strong>，外部反向引用的**$分组号**</li>
</ul>
<p>看几个案例</p>
<ul>
<li>要匹配两个连续的相同数字  <code>(\\d)\\1</code></li>
<li>要匹配五个连续的相同数字 <code>(\\d)\\1&#123;4&#125;</code></li>
<li>要匹配个位与千位相同，十位与百位相同的数，5225,1551  <code>(\\d)(\\d)\\2\\1</code></li>
<li>匹配 形如12321-333666999 这样的号码满足前面一个五位数<br> 然后一个- 然后是一个九位数，连续的每三位要相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 案例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 15:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content=<span class="string">&quot;h23423288888856666 jackangdaxxxiiit6886  65432-999888777&quot;</span>;</span><br><span class="line">        <span class="comment">// 匹配连续两个相同的数字</span></span><br><span class="line">       <span class="comment">// String regStr=&quot;(\\d)\\1&quot;;</span></span><br><span class="line">       <span class="comment">// 匹配连续五个相同的数字</span></span><br><span class="line">       <span class="comment">// String regStr=&quot;(\\d)\\1&#123;4&#125;&quot;;</span></span><br><span class="line">       <span class="comment">//匹配 个位和千位相同 十位和百位相同的数字</span></span><br><span class="line">       <span class="comment">//   String regStr=&quot;(\\d)(\\d)\\2\\1&quot;;</span></span><br><span class="line">        <span class="comment">// 匹配 形如12321-333666999 这样的号码满足前面一个五位数</span></span><br><span class="line"><span class="comment">//        然后一个- 然后是一个九位数，连续的每三位要相同</span></span><br><span class="line">        String regStr=<span class="string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;</span><br><span class="line">       Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到-&gt;&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-String-类中使用正则表达"><a href="#7-String-类中使用正则表达" class="headerlink" title="7.String 类中使用正则表达"></a>7.String 类中使用正则表达</h1><p>替换功能</p>
<p> StringReg.java String 类</p>
<ul>
<li>public String replaceAll(String regex,String replacement)</li>
</ul>
<p> 判断功能 </p>
<p>String 类 </p>
<ul>
<li>public boolean matches(String regex){} //使用 Pattern 和 Matcher 类 </li>
</ul>
<p>分割功能 </p>
<p>String 类 </p>
<ul>
<li>public String[] split(String regex)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Regex11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> String类中的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;2000 年 5 月，JDK1.3、JDK1.4 和 J2SE1.3 相继发布，几周后其&quot;</span> +</span><br><span class="line">                <span class="string">&quot;获得了 Apple 公司 Mac OS X 的工业标准的支持。2001 年 9 月 24 日，J2EE1.3 发&quot;</span> +</span><br><span class="line">                <span class="string">&quot;布。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;2002 年 2 月 26 日，J2SE1.4 发布。自此 Java 的计算能力有了大幅提升&quot;</span>;</span><br><span class="line"><span class="comment">//使用正则表达式方式，将 JDK1.3 和 JDK1.4 替换成 JDK</span></span><br><span class="line">        content = content.replaceAll(<span class="string">&quot;JDK1\\.3|JDK1\\.4&quot;</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line"><span class="comment">//要求 验证一个 手机号， 要求必须是以 138 139 开头的</span></span><br><span class="line">        content = <span class="string">&quot;13888889999&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (content.matches(<span class="string">&quot;1(38|39)\\d&#123;8&#125;&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要求按照 # 或者 - 或者 ~ 或者 数字 来分割</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        content = <span class="string">&quot;hello#abc-jack12smith~北京&quot;</span>;</span><br><span class="line">        String[] split = content.split(<span class="string">&quot;#|-|~|\\d+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-综合练习"><a href="#8-综合练习" class="headerlink" title="8. 综合练习"></a>8. 综合练习</h1><h2 id="8-1-验证电子邮件格式是否合法"><a href="#8-1-验证电子邮件格式是否合法" class="headerlink" title="8.1 验证电子邮件格式是否合法"></a>8.1 验证电子邮件格式是否合法</h2><ul>
<li><p>只能有一个@</p>
</li>
<li><p>@前面是用户名，可以是a-z，A-Z，0-9 - _ 字符</p>
</li>
<li><p>@后面是域名 并且域名只能是英文字母 比如 <code>itkxz@qq.com</code></p>
</li>
<li><p>写出对应的正则表达式验证输入的字符串是否满足规则</p>
</li>
</ul>
<blockquote>
<p>先写出简单的表达式，再逐步完善！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 案例1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 16:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content=<span class="string">&quot;itkxz@qq.com&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;[\\w-_]+@([a-zA-Z]+\\.)+[a-zA-Z]+&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (content.matches(regStr))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配成功！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-验证是不是整数或小数"><a href="#8-2-验证是不是整数或小数" class="headerlink" title="8.2 验证是不是整数或小数"></a>8.2 验证是不是整数或小数</h2><ul>
<li>考虑到正数和负数</li>
<li>123 34.55 0.58等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 案例2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 16:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content=<span class="string">&quot;-0.58&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;^[+-]?([1-9]\\d*|0)(\\.\\d+)?$&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (content.matches(regStr))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配成功 是正数或者小数！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-验证是否为URL"><a href="#8-3-验证是否为URL" class="headerlink" title="8.3 验证是否为URL"></a>8.3 验证是否为URL</h2><ul>
<li>协议</li>
<li>域名</li>
<li>端口</li>
<li>文件名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 案例3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/23 16:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content=<span class="string">&quot;http://space.bilibili.com:8080/abc/favlist&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;^([a-zA-Z]+)://([a-zA-Z.]+):(\\d+)[\\w-/]*/([\\w.]+)$&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Pattern pattern = Pattern.compile(regStr);</span><br><span class="line">        Matcher matcher = pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.matches())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配成功！！！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;协议-&gt;&quot;</span>+ matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;域名-&gt;&quot;</span>+ matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;端口-&gt;&quot;</span>+ matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名-&gt;&quot;</span>+ matcher.group(<span class="number">3</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%BE%E7%89%87/Snipaste_2021-05-23_16-37-48.png"></p>
<p><strong>写在最后：用韩老师的一句话来鞭策自己”我亦无他，惟手熟尔！”</strong></p>
<p><strong>若有错误，还请各位指出错误，及时更改！</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>23种设计模式学习笔记</title>
    <url>/2021/04/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>学习地址</strong></p>
<p><strong><a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></strong></p>
<p><strong><a href="https://www.bilibili.com/video/BV1Np4y1z7BU">https://www.bilibili.com/video/BV1Np4y1z7BU</a></strong></p>
<p><strong>参考文章</strong></p>
<p><strong><a href="http://c.biancheng.net/view/1317.html">http://c.biancheng.net/view/1317.html</a></strong></p>
<h1 id="1，设计模式概述"><a href="#1，设计模式概述" class="headerlink" title="1，设计模式概述"></a>1，设计模式概述</h1><h2 id="1-1-软件设计模式的产生背景"><a href="#1-1-软件设计模式的产生背景" class="headerlink" title="1.1 软件设计模式的产生背景"></a>1.1 软件设计模式的产生背景</h2><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p>
<p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p>
<p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。  </p>
<h2 id="1-2-软件设计模式的概念"><a href="#1-2-软件设计模式的概念" class="headerlink" title="1.2 软件设计模式的概念"></a>1.2 软件设计模式的概念</h2><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>
<h2 id="1-3-学习设计模式的必要性"><a href="#1-3-学习设计模式的必要性" class="headerlink" title="1.3 学习设计模式的必要性"></a>1.3 学习设计模式的必要性</h2><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>
<p>正确使用设计模式具有以下优点。</p>
<ul>
<li>可以提高程序员的思维能力、编程能力和设计能力。</li>
<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>
<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>
</ul>
<h2 id="1-4-设计模式分类"><a href="#1-4-设计模式分类" class="headerlink" title="1.4 设计模式分类"></a>1.4 设计模式分类</h2><ul>
<li><p><strong>创建型模式</strong></p>
<p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p>
</li>
<li><p><strong>结构型模式</strong></p>
<p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p>
</li>
<li><p><strong>行为型模式</strong></p>
<p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。<br><img src="https://pic.imgdb.cn/item/60c8bb16844ef46bb2444684.jpg"></p>
</li>
</ul>
<h1 id="2，UML图"><a href="#2，UML图" class="headerlink" title="2，UML图"></a>2，UML图</h1><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p>
<p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p>
<h2 id="2-1-类图概述"><a href="#2-1-类图概述" class="headerlink" title="2.1 类图概述"></a>2.1 类图概述</h2><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>
<h2 id="2-2-类图的作用"><a href="#2-2-类图的作用" class="headerlink" title="2.2 类图的作用"></a>2.2 类图的作用</h2><ul>
<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li>
<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>
</ul>
<h2 id="2-3-类图表示法"><a href="#2-3-类图表示法" class="headerlink" title="2.3 类图表示法"></a>2.3 类图表示法</h2><h3 id="2-3-1-类的表示方式"><a href="#2-3-1-类的表示方式" class="headerlink" title="2.3.1 类的表示方式"></a>2.3.1 类的表示方式</h3><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。 </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/Employee.jpg"></p>
<p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p>
<ul>
<li><p>+：表示public</p>
</li>
<li><p>-：表示private</p>
</li>
<li><p>#：表示protected</p>
</li>
</ul>
<p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p>
<p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p>
<blockquote>
<p>注意：</p>
<pre><code>1，中括号中的内容表示是可选的
                                                
2，也有将类型放在变量名前面，返回值类型放在方法名前面
</code></pre>
</blockquote>
<p><strong>举个栗子：</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/demo.png"></p>
<p>上图Demo类定义了三个方法：</p>
<ul>
<li>method()方法：修饰符为public，没有参数，没有返回值。</li>
<li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li>
<li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li>
</ul>
<h3 id="2-3-2-类与类之间关系的表示方式"><a href="#2-3-2-类与类之间关系的表示方式" class="headerlink" title="2.3.2 类与类之间关系的表示方式"></a>2.3.2 类与类之间关系的表示方式</h3><h4 id="2-3-2-1-关联关系"><a href="#2-3-2-1-关联关系" class="headerlink" title="2.3.2.1 关联关系"></a>2.3.2.1 关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p>
<p>关联又可以分为单向关联，双向关联，自关联。</p>
<p><strong>1，单向关联</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/customer_address.png"></p>
<p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p>
<p><strong>2，双向关联</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/customer_product.png"></p>
<p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p>
<p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p>
<p><strong>3，自关联</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/node.png"></p>
<p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p>
<h4 id="2-3-2-2-聚合关系"><a href="#2-3-2-2-聚合关系" class="headerlink" title="2.3.2.2 聚合关系"></a>2.3.2.2 聚合关系</h4><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p>
<p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p>
<p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20191229173422328.png"></p>
<h4 id="2-3-2-3-组合关系"><a href="#2-3-2-3-组合关系" class="headerlink" title="2.3.2.3 组合关系"></a>2.3.2.3 组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p>
<p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p>
<p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20191229173455149.png"></p>
<h4 id="2-3-2-4-依赖关系"><a href="#2-3-2-4-依赖关系" class="headerlink" title="2.3.2.4 依赖关系"></a>2.3.2.4 依赖关系</h4><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p>
<p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20191229173518926.png"></p>
<h4 id="2-3-2-5-继承关系"><a href="#2-3-2-5-继承关系" class="headerlink" title="2.3.2.5 继承关系"></a>2.3.2.5 继承关系</h4><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p>
<p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20191229173539838.png"></p>
<h4 id="2-3-2-6-实现关系"><a href="#2-3-2-6-实现关系" class="headerlink" title="2.3.2.6 实现关系"></a>2.3.2.6 实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p>
<p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20191229173554296.png"></p>
<h1 id="3，软件设计原则"><a href="#3，软件设计原则" class="headerlink" title="3，软件设计原则"></a>3，软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p>
<h2 id="3-1-开闭原则"><a href="#3-1-开闭原则" class="headerlink" title="3.1 开闭原则"></a>3.1 开闭原则</h2><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p>
<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>
<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>
<h2 id="3-2-里氏代换原则"><a href="#3-2-里氏代换原则" class="headerlink" title="3.2 里氏代换原则"></a>3.2 里氏代换原则</h2><p>里氏代换原则是面向对象设计的基本原则之一。</p>
<p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>
<p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p>
<p><strong>里氏代换原则错误示范</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.principle.liskov;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Liskov</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 里氏代换原则错误示范</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/15 13:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> +a.fun1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11-8=&quot;</span> +a.fun1(<span class="number">11</span>,<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span>+b.fun1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span>+b.fun1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9=&quot;</span>+b.fun2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">//返回两个数的差</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1-num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类继承A 增加新功能，完成两个数相加，然后和9求和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun1(a,b)+<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>里氏代换原则正确示范</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.principle.liskov;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Liskov2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 里氏代换原则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/15 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base base = <span class="keyword">new</span> Base();</span><br><span class="line">        base.add(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">        base.sub(<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        sub.mul(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">        sub.div(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通用加法运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用减法运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;-&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a - b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">//子类特有乘法运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;*&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a * b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类特有除法运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;/&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a / b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-依赖倒转原则"><a href="#3-3-依赖倒转原则" class="headerlink" title="3.3 依赖倒转原则"></a>3.3 依赖倒转原则</h2><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
<p><strong>依赖倒转原则错误示范</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.principle.inversion;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> DependenceInversion1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 依赖倒转原则错误示范</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/15 13:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversion1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">        person.receive(<span class="keyword">new</span> WeiXin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送微信消息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送邮件消息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对接口的依赖</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceiver receiver)</span></span>&#123;</span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>依赖倒转原则正确示范</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.principle.inversion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> DependenceInversion2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 依赖倒转原则正确示范</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/15 13:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversion2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        client.receive(<span class="keyword">new</span> Emailiml());</span><br><span class="line">        client.receive(<span class="keyword">new</span> WXimpl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceive</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WXimpl</span> <span class="keyword">implements</span> <span class="title">IReceive</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送微信消息&quot;</span>+uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emailiml</span> <span class="keyword">implements</span> <span class="title">IReceive</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件信息&quot;</span>+uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceive receive)</span></span>&#123;</span><br><span class="line">        receive.printInfo(<span class="number">12345</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>
<h2 id="3-4-接口隔离原则"><a href="#3-4-接口隔离原则" class="headerlink" title="3.4 接口隔离原则"></a>3.4 接口隔离原则</h2><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p><strong>接口隔离原则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.principle.segregation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Sergregation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 接口隔离原则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/15 13:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sergregation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> A());</span><br><span class="line">        c.depend2(<span class="keyword">new</span> A());<span class="comment">//C类通过接口去依赖A类</span></span><br><span class="line">        c.depend3(<span class="keyword">new</span> A());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line">        d.depend1(<span class="keyword">new</span> B());</span><br><span class="line">        d.depend4(<span class="keyword">new</span> B());<span class="comment">//D类通过接口去依赖B类</span></span><br><span class="line">        d.depend5(<span class="keyword">new</span> B());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">interface1</span>,<span class="title">interface2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A 实现了operation1.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A 实现了operation2......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A 实现了operation3......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">interface1</span>,<span class="title">interface3</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现了operation1.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现了operation4.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 实现了operation5.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C类通过接口interface1，interface2依赖使用A类 只会使用到1,2,3方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(interface2 i)</span></span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(interface2 i)</span></span>&#123;</span><br><span class="line">        i.operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//D类通过接口interface1，interface3 依赖使用B类，用到1,4,5方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(interface1 i)</span></span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(interface3 i)</span></span>&#123;</span><br><span class="line">        i.operation4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(interface3 i)</span></span>&#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-5-迪米特法则"><a href="#3-5-迪米特法则" class="headerlink" title="3.5 迪米特法则"></a>3.5 迪米特法则</h2><p>迪米特法则又叫最少知识原则。</p>
<p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p>
<p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p>
<p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p>
<p>下面看一个例子来理解迪米特法则</p>
<p>【例】明星与经纪人的关系实例</p>
<p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p>
<p>类图如下：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99.png"></p>
<p>代码如下：</p>
<p><strong>明星类（Star）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Star</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>粉丝类（Fans）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fans</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fans</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>媒体公司类（Company）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>经纪人类（Agent）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFans</span><span class="params">(Fans fans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-6-合成复用原则"><a href="#3-6-合成复用原则" class="headerlink" title="3.6 合成复用原则"></a>3.6 合成复用原则</h2><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p>
<p>通常类的复用分为继承复用和合成复用两种。</p>
<p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p>
<ol>
<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li>
<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li>
<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li>
</ol>
<p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p>
<ol>
<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li>
<li>对象间的耦合度低。可以在类的成员位置声明抽象。</li>
<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li>
</ol>
<p>下面看一个例子来理解合成复用原则</p>
<p>【例】汽车分类管理程序</p>
<p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下： </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99.png"></p>
<p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%991.png"></p>
<h1 id="4，创建者模式"><a href="#4，创建者模式" class="headerlink" title="4，创建者模式"></a>4，创建者模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p>
<p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p>
<p>创建型模式分为：</p>
<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工程模式</li>
<li>原型模式</li>
<li>建造者模式</li>
</ul>
<h1 id="5，单例模式"><a href="#5，单例模式" class="headerlink" title="5，单例模式"></a>5，单例模式</h1><h2 id="5-1-单例模式的定义和特点"><a href="#5-1-单例模式的定义和特点" class="headerlink" title="5.1 单例模式的定义和特点"></a>5.1 单例模式的定义和特点</h2><p><strong>单例（Singleton）模式的定义：</strong>指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>
<p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p>
<p>单例模式在现实生活中的应用也非常广泛，例如公司 CEO、部门经理等都属于单例模型。<strong>J2EE 标准中的 ServletgContext 和 ServletContextConfig、Spring 框架应用中的 ApplicationContext、数据库中的连接池等也都是单例模式。</strong></p>
<p><strong>单例模式有 3 个特点：</strong></p>
<ol>
<li>单例类只有一个实例对象；</li>
<li>该单例对象必须由单例类自行创建；</li>
<li>单例类对外提供一个访问该单例的全局访问点。</li>
</ol>
<p><strong>单例模式的优点</strong>：</p>
<ul>
<li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li>
<li>可以避免对资源的多重占用。</li>
<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>
</ul>
<p>  <strong>单例模式的缺点：</strong></p>
<ul>
<li>单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li>
<li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li>
<li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li>
</ul>
<h2 id="5-2-单例模式的结构与实现"><a href="#5-2-单例模式的结构与实现" class="headerlink" title="5.2 单例模式的结构与实现"></a>5.2 单例模式的结构与实现</h2><h3 id="5-2-1-单例模式的结构"><a href="#5-2-1-单例模式的结构" class="headerlink" title="5.2.1 单例模式的结构"></a>5.2.1 单例模式的结构</h3><ol>
<li>单例类：包含一个实例且能自行创建这个实例的类。</li>
<li>访问类：使用单例的类。</li>
</ol>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_14-52-45.png"></p>
<h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><blockquote>
<p>单例设计模式分类两种：</p>
<p>​    饿汉式：类加载就会导致该单实例对象被创建    </p>
<p>​    懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p>
</blockquote>
<p><strong>饿汉式(静态变量)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  饿汉式(静态变量)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化，外部能new、</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外部提供一个公有的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-40-53.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p>
<p><strong>静态代码块</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  静态代码块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton2 instance = Singleton2.getInstance();</span><br><span class="line">        Singleton2 instance2 = Singleton2.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化，外部能new、</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在静态代码块中创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外部提供一个公有的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-43-38.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，<strong>当然该方式也存在内存浪费问题。</strong></p>
<p><strong>懒汉式 线程不安全</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  懒汉式 线程不安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式，线程不安全！！！&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法 当使用到该方法时，才去创建instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-43-52.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p>
<p><strong>懒汉式(线程安全 ， 同步方法)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  懒汉式(线程安全 ， 同步方法)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式，线程安全！！！&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-44-06.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p>
<p><strong>懒汉式(线程安全 ， 同步代码块)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  懒汉式(线程安全 ， 同步代码块)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式，线程安全！,同步代码块&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-44-38.png"></p>
<p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p>
<p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  双重检查，推荐使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式，双重检查，推荐使用&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入双重检查代码，加入同步处理的代码，解决懒加载的问题</span></span><br><span class="line">    <span class="comment">//保证效率。推荐使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-45-29.png"></p>
<p><font color="red">小结：</font></p>
<p><strong>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式</strong>，能够保证在多线程的情况下线程安全也不会有性能问题。</p>
<p><strong>静态内部类实现单例模式！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type7;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  静态内部类实现单例模式！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 9:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态内部类实现单例模式&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个静态内部类，该类中有个静态属性，Singleton</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-45-43.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p>
<p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p>
<p><font color="red">小结：</font></p>
<p>​    静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p>
<p><strong>枚举的方式实现单例模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.singleton.type8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SingletonTest08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  枚举的方式实现单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/17 10:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举的方式实现单例模式，推荐使用&quot;</span>);</span><br><span class="line">        Singleton instance = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance2 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        <span class="comment">//判断是否为单例</span></span><br><span class="line">        System.out.println(instance == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance的哈希值&quot;</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;intstance2的哈希值&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method()方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-47-27.png"></p>
<p><font color='red'>说明：</font></p>
<p>​    枚举方式属于恶汉式方式。</p>
<h2 id="5-3-单例模式的应用场景"><a href="#5-3-单例模式的应用场景" class="headerlink" title="5.3 单例模式的应用场景"></a>5.3 单例模式的应用场景</h2><ul>
<li>需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少 GC。</li>
<li>某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。</li>
<li>某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用。</li>
<li>某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。</li>
<li>频繁访问数据库或文件的对象。</li>
<li>对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。</li>
<li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li>
</ul>
<h2 id="5-4-存在的问题"><a href="#5-4-存在的问题" class="headerlink" title="5.4 存在的问题"></a>5.4 存在的问题</h2><p>破坏单例模式：</p>
<p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p>
<ul>
<li><p>序列化反序列化</p>
<p><strong>Singleton类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//往文件中写对象</span></span><br><span class="line">        <span class="comment">//writeObject2File();</span></span><br><span class="line">        <span class="comment">//从文件中读取对象</span></span><br><span class="line">        Singleton s1 = readObjectFromFile();</span><br><span class="line">        Singleton s2 = readObjectFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象输入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\dell\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//第一个读取Singleton对象</span></span><br><span class="line">        Singleton instance = (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的对象</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\dell\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将instance对象写出到文件中</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。</p>
</blockquote>
</li>
<li><p>反射</p>
<p><strong>Singleton类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的字节码对象</span></span><br><span class="line">        Class clazz = Singleton.class;</span><br><span class="line">        <span class="comment">//获取Singleton类的私有无参构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Singleton类的对象s1</span></span><br><span class="line">        Singleton s1 = (Singleton) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建Singleton类的对象s2</span></span><br><span class="line">        Singleton s2 = (Singleton) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p>
</blockquote>
</li>
</ul>
<blockquote>
<p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p>
</blockquote>
<p><strong>问题的解决</strong></p>
<ul>
<li><p>序列化、反序列方式破坏单例模式的解决方法</p>
<p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p>
<p><strong>Singleton类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>源码解析：</strong></p>
<p>ObjectInputStream类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object obj = readObject0(<span class="keyword">false</span>);<span class="comment">//重点查看readObject0方法</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">			...</span><br><span class="line">			<span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">				<span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));<span class="comment">//重点查看readOrdinaryObject方法</span></span><br><span class="line">			...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class="line">    	<span class="comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class="line">    	<span class="comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class="line">    	Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">     	...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反射方式破解单例的解决方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           反射破解单例模式需要添加的代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">说明:</font></p>
<pre><code>这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。
</code></pre>
</li>
</ul>
<h2 id="5-5-JDK源码解析-Runtime类"><a href="#5-5-JDK源码解析-Runtime类" class="headerlink" title="5.5 JDK源码解析-Runtime类"></a>5.5 JDK源码解析-Runtime类</h2><p>Runtime类就是使用的单例设计模式。</p>
<ol>
<li><p>通过源代码查看使用的是哪儿种单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面源代码中可以看出Runtime类使用的是恶汉式（静态属性）方式来实现单例模式的。</p>
</li>
<li><p>使用Runtime类中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">        <span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        Process process = runtime.exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>* <span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> b = inputStream.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,b,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="6，原型模式"><a href="#6，原型模式" class="headerlink" title="6，原型模式"></a>6，原型模式</h1><h2 id="6-1原形模式的定义和特点"><a href="#6-1原形模式的定义和特点" class="headerlink" title="6.1原形模式的定义和特点"></a>6.1原形模式的定义和特点</h2><p>原型（Prototype）模式的定义如下：<strong>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。</strong>用这种方式创建对象非常高效，根本无须知道对象创建的细节。例如，Windows 操作系统的安装通常较耗时，如果复制就快了很多。</p>
<p><strong>原型模式的优点：</strong></p>
<ul>
<li>Java自带的原型模式基于内存二进制流的复制，在性能上比直接 new 一个对象更加优良。</li>
<li>可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可辅助实现撤销操作。</li>
</ul>
<p><strong>原型模式的缺点：</strong></p>
<ul>
<li>需要为每一个类都配置一个 clone 方法</li>
<li>clone 方法位于类的内部，当对已有类进行改造的时候，需要修改代码，违背了开闭原则。</li>
<li>当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来会比较麻烦。因此，深克隆、浅克隆需要运用得当。</li>
</ul>
<h2 id="6-2-原型模式的结构与实现"><a href="#6-2-原型模式的结构与实现" class="headerlink" title="6.2 原型模式的结构与实现"></a>6.2 原型模式的结构与实现</h2><h3 id="6-2-1-原形模式的结构"><a href="#6-2-1-原形模式的结构" class="headerlink" title="6.2.1 原形模式的结构"></a>6.2.1 原形模式的结构</h3><p>原型模式包含以下主要角色。</p>
<ol>
<li>抽象原型类：规定了具体原型对象必须实现的接口。</li>
<li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li>
<li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li>
</ol>
<h3 id="6-2-2-代码实现"><a href="#6-2-2-代码实现" class="headerlink" title="6.2.2 代码实现"></a>6.2.2 代码实现</h3><blockquote>
<p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p>
<p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p>
</blockquote>
<h4 id="6-2-2-1-浅拷贝"><a href="#6-2-2-1-浅拷贝" class="headerlink" title="6.2.2.1 浅拷贝"></a>6.2.2.1 浅拷贝</h4><p><strong>IdCard</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.shallowclone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IdCard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 浅拷贝的示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdCard</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IdCard&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.shallowclone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 浅拷贝的示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> IdCard idCard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdCard <span class="title">getIdCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdCard</span><span class="params">(IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard + <span class="string">&quot;, idCard.hashCode=&quot;</span> + idCard.hashCode() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PersonTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.shallowclone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PersonTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 浅拷贝测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> IdCard(<span class="string">&quot;10086&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Person person1 = (Person) person.clone();</span><br><span class="line">        Person person2 = (Person) person.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-51-19.png"></p>
<p>我们发现可以通过实现<code>implements Cloneable</code>来完成浅拷贝，基本变量是值传递克隆，而引用对象<code>IdCard</code>则是引用传递，这不符合我们面向对象思想，每一个<code>Person</code>应该都有一个独立的<code>IdCard</code>，而不是共用一个，而要解决这种问题，我们需要使用深克隆</p>
<h4 id="6-2-2-2-深拷贝-第一种"><a href="#6-2-2-2-深拷贝-第一种" class="headerlink" title="6.2.2.2 深拷贝(第一种)"></a>6.2.2.2 深拷贝(第一种)</h4><p><strong>IdCard</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.one;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IdCard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆的示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdCard</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IdCard&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.one;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆的示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> IdCard idCard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdCard <span class="title">getIdCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdCard</span><span class="params">(IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;personHashCode=&quot;</span> + <span class="keyword">this</span>.hashCode() +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard +</span><br><span class="line">                <span class="string">&quot;, idCardHashCode=&quot;</span> + idCard.hashCode() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深克隆需要自己手动实现，在对象引用中也要实现clone方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//完成基本数据类型的拷贝</span></span><br><span class="line">        <span class="comment">//通过new关键字创建的对象是引用类型</span></span><br><span class="line"></span><br><span class="line">        Object person = <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对引用类型单独处理</span></span><br><span class="line">        Person p = (Person) person;</span><br><span class="line">        IdCard idCard = (IdCard) p.getIdCard().clone(); <span class="comment">//实现自己的克隆</span></span><br><span class="line">        p.setIdCard(idCard);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PersonTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PersonTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> IdCard(<span class="string">&quot;10086&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Person person1 = (Person) person.clone();</span><br><span class="line">        Person person2 = (Person) person.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-51-19.png"></p>
<p>使用这种深克隆的方式，完美的解决了当数据类型为引用类型时，只是拷贝原引用对象地址而不是一个全新的引用对象的引用，但是这种实现有一个很大的弊端，需要在每一个对象中都实现clone方法，如果类全是你自己写的，那自然没问题，实现一下就行了，不过有点麻烦。但是，如果你引用的是第三方的一个类，无法修改源代码，这种方式，显然就无法实现深克隆了</p>
<h4 id="6-2-2-2-深拷贝-第二种"><a href="#6-2-2-2-深拷贝-第二种" class="headerlink" title="6.2.2.2 深拷贝(第二种)"></a>6.2.2.2 深拷贝(第二种)</h4><p><strong>IdCard</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.two;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IdCard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆的示例2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//实现Serializable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdCard</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IdCard&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆的示例2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> IdCard idCard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdCard <span class="title">getIdCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdCard</span><span class="params">(IdCard idCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;personHashCode=&quot;</span> + <span class="keyword">this</span>.hashCode() +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard +</span><br><span class="line">                <span class="string">&quot;, idCardHashCode=&quot;</span> + idCard.hashCode() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化的方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">deelClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            <span class="keyword">return</span> (Person) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ois.close();</span><br><span class="line">                bis.close();</span><br><span class="line">                oos.close();</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PersonTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.prototype.deepclone.two;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PersonTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 深克隆测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/19 12:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> IdCard(<span class="string">&quot;10086&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//克隆两个对象</span></span><br><span class="line">        Person person1 = (Person) person.deelClone();</span><br><span class="line">        Person person2 = (Person) person.deelClone();</span><br><span class="line">		System.out.println(<span class="string">&quot;深拷贝(第二种 实现序列化接口)&quot;</span>);</span><br><span class="line">        <span class="comment">//打印三人信息</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_07-52-49.png"></p>
<p>这种方式我们需要手动编写deepClone方法，使用Java流中的序列化与反序列化来实现深克隆，但是这种实现，需要在每一个类中都继承序列化Serializable接口，这种方式，如果你调用的是第三方类，也有可能第三方类上没有实现Serializable序列化接口，但是一般来说，大多都会实现，总的来说，这种比较推荐使用，而且效率也高</p>
<h2 id="6-3-原型模式的应用场景"><a href="#6-3-原型模式的应用场景" class="headerlink" title="6.3 原型模式的应用场景"></a>6.3 原型模式的应用场景</h2><ul>
<li>对象之间相同或相似，即只是个别的几个属性不同的时候。</li>
<li>创建对象成本较大，例如初始化时间长，占用CPU太多，或者占用网络资源太多等，需要优化资源。</li>
<li>创建一个对象需要繁琐的数据准备或访问权限等，需要提高性能或者提高安全性。</li>
<li>系统中大量使用该类对象，且各个调用者都需要给它的属性重新赋值。</li>
<li>在 Spring中，原型模式应用的非常广泛，<strong>例如 scope=’prototype’、JSON.parseObject()</strong> 等都是原型模式的具体应用。</li>
</ul>
<h2 id="6-4-原型模式的注意事项和细节"><a href="#6-4-原型模式的注意事项和细节" class="headerlink" title="6.4 原型模式的注意事项和细节"></a>6.4 原型模式的注意事项和细节</h2><ul>
<li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能提高效率</li>
<li>不用重新初始化对象，动态地获得对象运行时的状态</li>
<li>如果原始对象发生变化(增加或减少属性)，其他克隆对象也会发生相应的变化，无需修改代码</li>
</ul>
<h1 id="7，工厂模式"><a href="#7，工厂模式" class="headerlink" title="7，工厂模式"></a>7，工厂模式</h1><h2 id="7-1-工厂模式的定义和特点"><a href="#7-1-工厂模式的定义和特点" class="headerlink" title="7.1 工厂模式的定义和特点"></a>7.1 工厂模式的定义和特点</h2><p><strong>工厂模式的定义</strong>：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。</p>
<p>按实际业务场景划分，工厂模式有 3 种不同的实现方式，分别是简单工厂模式、工厂方法模式和抽象工厂模式。</p>
<p>我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”。</p>
<p>在简单工厂模式中创建实例的方法通常为静态（static）方法，因此简单工厂模式（Simple Factory Pattern）又叫作静态工厂方法模式（Static Factory Method Pattern）。</p>
<p>简单来说，简单工厂模式有一个具体的工厂类，可以生成多个不同的产品，属于创建型设计模式。简单工厂模式不在 GoF 23 种设计模式之列。</p>
<p>简单工厂模式每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度，违背了“开闭原则”。</p>
<p><strong>优点：</strong></p>
<ol>
<li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建出相应的产品。工厂和产品的职责区分明确。</li>
<li>客户端无需知道所创建具体产品的类名，只需知道参数即可。</li>
<li>也可以引入配置文件，在不修改客户端代码的情况下更换和添加新的具体产品类。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受影响。且工厂类代码会非常臃肿，违背高聚合原则。</li>
<li>使用简单工厂模式会增加系统中类的个数（引入新的工厂类），增加系统的复杂度和理解难度</li>
<li>系统扩展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂</li>
<li>简单工厂模式使用了 static 工厂方法，造成工厂角色无法形成基于继承的等级结构。</li>
</ol>
<h2 id="7-2-工厂模式的结构与实现"><a href="#7-2-工厂模式的结构与实现" class="headerlink" title="7.2 工厂模式的结构与实现"></a>7.2 工厂模式的结构与实现</h2><p>简单工厂模式的主要角色如下：</p>
<ul>
<li>简单工厂（SimpleFactory）：是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品（Product）：是简单工厂创建的所有对象的父类，负责描述所有实例共有的公共接口。</li>
<li>具体产品（ConcreteProduct）：是简单工厂模式的创建目标。</li>
</ul>
<p><strong>Shape</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Shape</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  产品接口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Circle</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Circle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Rectangle</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Rectangle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制长方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Square</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Square</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ShapeFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ShapeFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 简单工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">createShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Rectangle&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Circle&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Square&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ShapeFactoryTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ShapeFactoryTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 简单工厂测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape rectangle = ShapeFactory.createShape(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line"></span><br><span class="line">        Shape circle = ShapeFactory.createShape(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        Shape square = ShapeFactory.createShape(<span class="string">&quot;Square&quot;</span>);</span><br><span class="line">        square.draw();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-01-45.png"></p>
<p><strong>Java.util.Calendar 源码使用到了简单工厂模式</strong></p>
<h2 id="7-3-抽象工厂模式的定义和特点"><a href="#7-3-抽象工厂模式的定义和特点" class="headerlink" title="7.3 抽象工厂模式的定义和特点"></a>7.3 抽象工厂模式的定义和特点</h2><p>抽象工厂模式（Abstract Factory）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类，每个生成的工厂都能按照工厂模式提供对象。</p>
<p>使用抽象工厂模式一般要满足以下条件。</p>
<ul>
<li>系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</li>
<li>系统一次只可能消费其中某一族产品，即同族的产品一起使用。</li>
</ul>
<p><strong>主要优点如下：</strong></p>
<ul>
<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>
<li>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组。</li>
<li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。</li>
</ul>
<p><strong>其缺点是：</strong></p>
<ul>
<li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</li>
</ul>
<h3 id="7-4-抽象工厂模式的结构与实现"><a href="#7-4-抽象工厂模式的结构与实现" class="headerlink" title="7.4 抽象工厂模式的结构与实现"></a>7.4 抽象工厂模式的结构与实现</h3><h4 id="7-4-1-抽象工厂模式的结构"><a href="#7-4-1-抽象工厂模式的结构" class="headerlink" title="7.4.1 抽象工厂模式的结构"></a>7.4.1 抽象工厂模式的结构</h4><ol>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。</li>
<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ol>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_19-59-50.png"></p>
<h4 id="7-3-2-代码实现"><a href="#7-3-2-代码实现" class="headerlink" title="7.3.2 代码实现"></a>7.3.2 代码实现</h4><p><strong>Shape</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Shape</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  产品接口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Circle</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Circle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Square</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Square</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Rectangle</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Rectangle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle--&gt;绘制长方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ShapeFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ShapeFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 简单工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 15:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">createShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Rectangle&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Circle&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Square&quot;</span>.equalsIgnoreCase(shapeType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">createColor</span><span class="params">(String colorType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Color</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Color</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  颜色产品接口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Red</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Red</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  颜色产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Red--&gt;填充红色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Yellow</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Yellow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 颜色产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yellow</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Red--&gt;填充黄色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Black</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Black</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 颜色产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Black</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Red--&gt;填充黑色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ColorFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.factory.simplefactory.Circle;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.factory.simplefactory.Rectangle;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.factory.simplefactory.Square;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ColorFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 颜色工厂类的编写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">createShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">createColor</span><span class="params">(String colorType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Red&quot;</span>.equalsIgnoreCase(colorType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Black&quot;</span>.equalsIgnoreCase(colorType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Black();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Yellow&quot;</span>.equalsIgnoreCase(colorType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Yellow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AbstractFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 产品家族抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title">createShape</span><span class="params">(String shapeType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title">createColor</span><span class="params">(String colorType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AbstractFactoryProducer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractFactoryProducer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象类的工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">createFactory</span><span class="params">(String choice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Shape&quot;</span>.equalsIgnoreCase(choice)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Color&quot;</span>.equalsIgnoreCase(choice)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AbstractFactoryProducerTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.factory.absfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractFactoryProcucerTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象类的工厂类测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/18 16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryProducerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory shapeFactory = AbstractFactoryProducer.createFactory(<span class="string">&quot;Shape&quot;</span>);</span><br><span class="line">        <span class="keyword">assert</span> shapeFactory != <span class="keyword">null</span>;</span><br><span class="line">        Shape rectangle = shapeFactory.createShape(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">        Shape circle = shapeFactory.createShape(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">        Shape square = shapeFactory.createShape(<span class="string">&quot;Square&quot;</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">        circle.draw();</span><br><span class="line">        square.draw();</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        AbstractFactory colorFactory = AbstractFactoryProducer.createFactory(<span class="string">&quot;Color&quot;</span>);</span><br><span class="line">        Color red = colorFactory.createColor(<span class="string">&quot;Red&quot;</span>);</span><br><span class="line">        Color yellow = colorFactory.createColor(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line">        Color black = colorFactory.createColor(<span class="string">&quot;Black&quot;</span>);</span><br><span class="line">        red.fill();</span><br><span class="line">        yellow.fill();</span><br><span class="line">        black.fill();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-02-04.png"></p>
<h3 id="7-5-抽象工厂模式的应用场景"><a href="#7-5-抽象工厂模式的应用场景" class="headerlink" title="7.5 抽象工厂模式的应用场景"></a>7.5 抽象工厂模式的应用场景</h3><ol>
<li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</li>
<li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</li>
<li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</li>
</ol>
<h1 id="8，建造者模式"><a href="#8，建造者模式" class="headerlink" title="8，建造者模式"></a>8，建造者模式</h1><h2 id="8-1-建造者模式的定义和特点"><a href="#8-1-建造者模式的定义和特点" class="headerlink" title="8.1 建造者模式的定义和特点"></a>8.1 建造者模式的定义和特点</h2><p>建造者（Builder）模式的定义：<strong>指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示</strong>，这样的设计模式被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p>
<p><strong>该模式的主要优点如下：</strong></p>
<ol>
<li>封装性好，构建和表示分离。</li>
<li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦。</li>
<li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其它模块产生任何影响，便于控制细节风险。</li>
</ol>
<p><strong>其缺点如下：</strong></p>
<ol>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li>
</ol>
<h2 id="8-2-建造者模式的结构与实现"><a href="#8-2-建造者模式的结构与实现" class="headerlink" title="8.2 建造者模式的结构与实现"></a>8.2 建造者模式的结构与实现</h2><h3 id="8-2-1-建造者模式的结构"><a href="#8-2-1-建造者模式的结构" class="headerlink" title="8.2.1 建造者模式的结构"></a>8.2.1 建造者模式的结构</h3><ol>
<li>产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。</li>
<li>抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。</li>
<li>具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</li>
<li>指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li>
</ol>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_20-14-58.png"></p>
<h3 id="8-2-2-代码实现"><a href="#8-2-2-代码实现" class="headerlink" title="8.2.2 代码实现"></a>8.2.2 代码实现</h3><p><strong>House 产品角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> House</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  产品实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ground;</span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line">    <span class="keyword">private</span> String roofed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">House</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">House</span><span class="params">(String ground, String wall, String roofed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ground = ground;</span><br><span class="line">        <span class="keyword">this</span>.wall = wall;</span><br><span class="line">        <span class="keyword">this</span>.roofed = roofed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ground;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGround</span><span class="params">(String ground)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ground = ground;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWall</span><span class="params">(String wall)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wall = wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roofed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoofed</span><span class="params">(String roofed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roofed = roofed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;House&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ground=&#x27;&quot;</span> + ground + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, wall=&#x27;&quot;</span> + wall + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, roofed=&#x27;&quot;</span> + roofed + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HouseBuilder 抽象建造者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HouseBuilder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建产品对象</span></span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品流程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildGround</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildRoofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">getHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HighHouse 具体建造者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HighHouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setGround(<span class="string">&quot;100平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;高楼：打地基&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setWall(<span class="string">&quot;50米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;高楼：砌墙50米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setRoofed(<span class="string">&quot;天窗&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;别墅：盖天窗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>VillaHouse 具体建造者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> VillaHouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  具体建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VillaHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGround</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setGround(<span class="string">&quot;200平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;别墅：打地基&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setWall(<span class="string">&quot;10米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;别墅：砌墙10米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setRoofed(<span class="string">&quot;天花板&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;别墅：盖天花板&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HouseDirector 指挥者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HouseDirector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  工程指挥者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HouseBuilder houseBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        houseBuilder.buildGround();</span><br><span class="line">        houseBuilder.buildWall();</span><br><span class="line">        houseBuilder.buildRoofed();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.getHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  产品试用客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/20 11:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        House house1 = <span class="keyword">new</span> HouseDirector(<span class="keyword">new</span> VillaHouse()).build();</span><br><span class="line">        System.out.println(house1);</span><br><span class="line">        System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">        House house2 = <span class="keyword">new</span> HouseDirector(<span class="keyword">new</span> HighHouse()).build();</span><br><span class="line">        System.out.println(house2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-06-26.png"></p>
<h2 id="8-3-建造者模式的应用场景"><a href="#8-3-建造者模式的应用场景" class="headerlink" title="8.3 建造者模式的应用场景"></a>8.3 建造者模式的应用场景</h2><ul>
<li>相同的方法，不同的执行顺序，产生不同的结果。</li>
<li>多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。</li>
<li>产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。</li>
<li>初始化一个对象特别复杂，参数多，而且很多参数都具有默认值。</li>
</ul>
<h1 id="9，创建者模式对比"><a href="#9，创建者模式对比" class="headerlink" title="9，创建者模式对比"></a>9，创建者模式对比</h1><h3 id="9-1-工厂方法模式VS建造者模式"><a href="#9-1-工厂方法模式VS建造者模式" class="headerlink" title="9.1  工厂方法模式VS建造者模式"></a>9.1  工厂方法模式VS建造者模式</h3><p>工厂方法模式注重的是<strong>整体对象的创建方式</strong>；而建造者模式注重的是<strong>部件构建的过程</strong>，意在通过一步一步地精确构造创建出一个复杂的对象。</p>
<p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p>
<h3 id="9-2-抽象工厂模式VS建造者模式"><a href="#9-2-抽象工厂模式VS建造者模式" class="headerlink" title="9.2 抽象工厂模式VS建造者模式"></a>9.2 抽象工厂模式VS建造者模式</h3><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p>
<p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p>
<p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p>
<ul>
<li>建造者模式<strong>更加注重方法的调用顺序</strong>，工厂模式<strong>注重创建对象</strong>。</li>
<li>创建对象的力度不同，建造者模式创建复杂的对象，由各种复杂的部件组成，工厂模式创建出来的对象都一样</li>
<li>关注重点不一样，工厂模式只需要把对象创建出来就可以了，而建造者模式不仅要创建出对象，还要知道对象由哪些部件组成。</li>
<li>建造者模式根据建造过程中的顺序不一样，最终对象部件组成也不一样。</li>
</ul>
<h1 id="10，适配器模式"><a href="#10，适配器模式" class="headerlink" title="10，适配器模式"></a>10，适配器模式</h1><h2 id="10-1-适配器模式的定义和特点"><a href="#10-1-适配器模式的定义和特点" class="headerlink" title="10.1 适配器模式的定义和特点"></a>10.1 适配器模式的定义和特点</h2><p>适配器模式（Adapter）的定义如下：<strong>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</strong>适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高。</p>
<p><strong>该模式的主要优点如下：</strong></p>
<ul>
<li>客户端通过适配器可以透明地调用目标接口。</li>
<li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。</li>
<li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li>
<li>在很多业务场景中符合开闭原则。</li>
</ul>
<p><strong>其缺点是：</strong></p>
<ul>
<li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li>
<li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。</li>
</ul>
<h2 id="10-2-适配器模式的结构与实现"><a href="#10-2-适配器模式的结构与实现" class="headerlink" title="10.2 适配器模式的结构与实现"></a>10.2 适配器模式的结构与实现</h2><h3 id="10-2-1-适配器模式的结构"><a href="#10-2-1-适配器模式的结构" class="headerlink" title="10.2.1 适配器模式的结构"></a>10.2.1 适配器模式的结构</h3><ol>
<li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li>
<li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li>
<li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li>
</ol>
<h3 id="10-2-2-代码实现"><a href="#10-2-2-代码实现" class="headerlink" title="10.2.2 代码实现"></a>10.2.2 代码实现</h3><h4 id="10-2-2-1类适配器模式"><a href="#10-2-2-1类适配器模式" class="headerlink" title="10.2.2.1类适配器模式"></a>10.2.2.1<strong>类适配器模式</strong></h4><p><strong>Voltage5V 目标接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Voltage5V</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  定义直流电</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个标准充电器来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Voltage220V</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Voltage220V</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建交流电</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;voltage 输出220伏&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>VoltageAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> VoltageAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建充电器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取交流电220V</span></span><br><span class="line">        <span class="keyword">int</span> output220V = output220V();</span><br><span class="line">        <span class="comment">//转为5V</span></span><br><span class="line">        <span class="keyword">int</span> output5V = output220V / <span class="number">44</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;VoltageAdapter 输出5伏&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> output5V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Phone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Phone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 手机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(Voltage5V voltage5V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (voltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压5伏，可以充电&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (voltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压过大，不可以充电&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  客户端类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==类适配器==&quot;</span>);</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-07-10.png"></p>
<p><strong>类适配器模式注意事项和细节</strong></p>
<ul>
<li>Java是单继承机制，所以类适配器需要继承适配者（Adaptee，指Voltage220V）类，这点算是一个缺点，除此之外还必须要求目标（Target，指Voltage5V）必须是接口，有一定局限性；</li>
<li>适配者Voltage220V类的方法在适配器VoltageAdapter类中都会暴露出来，也增加了使用的成本。但是由于其继承了适配者Voltage220V类，所以它可以根据需求重写该类的方法，使得适配器VoltageAdapter类的灵活性增强了。</li>
</ul>
<h4 id="10-2-2-2-对象适配器模式"><a href="#10-2-2-2-对象适配器模式" class="headerlink" title="10.2.2.2 对象适配器模式"></a>10.2.2.2 对象适配器模式</h4><p><strong>Voltage5V</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Voltage5V</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 充电5V</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个标准充电器来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Voltage220V</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Voltage220V</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 输出220V类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;voltage 输出220伏&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>VoltageAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> VoltageAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 适配器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Voltage220V voltage220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.voltage220V = voltage220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取交流电220V</span></span><br><span class="line">        <span class="keyword">int</span> output220V = voltage220V.output220V();</span><br><span class="line">        <span class="comment">//转为5V</span></span><br><span class="line">        <span class="keyword">int</span> output5V = output220V / <span class="number">44</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;VoltageAdapter 输出5伏&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> output5V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Phone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Phone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 手机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(Voltage5V voltage5V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (voltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压5伏，可以充电&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (voltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压过大，不可以充电&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 对象适配器测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==对象适配器==&quot;</span>);</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charging(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-07-31.png"></p>
<p><strong>对象适配器模式注意事项和细节</strong></p>
<ul>
<li><p>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。 </p>
</li>
<li><p>根据合成复用原则，使用组合替代继承， 所以它解决了类适配器中VoltageAdapter必须继承Voltage220V的局限性问题，也不再强制要求Voltage5V必须是接口。使用成本更低，更灵活。因此，对象适配器模式是适配器模式常用的一种。</p>
</li>
</ul>
<h4 id="10-2-2-3-接口适配器模式"><a href="#10-2-2-3-接口适配器模式" class="headerlink" title="10.2.2.3 接口适配器模式"></a>10.2.2.3 接口适配器模式</h4><p><strong>Animation</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Animation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 动画接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AnimationAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AnimationAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  接口适配器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimationAdapter</span> <span class="keyword">implements</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//全部都空实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JFrameAnimation</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> JFrameAnimation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 适配器子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFrameAnimation</span> <span class="keyword">extends</span> <span class="title">AnimationAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1()被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2()被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  客户端类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrameAnimation animation = <span class="keyword">new</span> JFrameAnimation();</span><br><span class="line">        animation.method1();</span><br><span class="line">        animation.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-07-44.png"></p>
<h2 id="10-3-SpringMVC源码解析"><a href="#10-3-SpringMVC源码解析" class="headerlink" title="10.3 SpringMVC源码解析"></a>10.3 SpringMVC源码解析</h2><p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  springmvc的Controller源码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多种Controller实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHttpHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;http...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSimplerHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;simple...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnnotationHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;annotation...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DispatchServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> DispatchServlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  springmvc的DispatchServlet源码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HandlerAdapter&gt; handlerAdapters = <span class="keyword">new</span> ArrayList&lt;HandlerAdapter&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatchServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> AnnotationHandlerAdapter());</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> HttpHandlerAdapter());</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> SimpleHandlerAdapter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处模拟SpringMVC从request取handler的对象，</span></span><br><span class="line">        <span class="comment">// 适配器可以获取到希望的Controller</span></span><br><span class="line">        HttpController controller = <span class="keyword">new</span> HttpController();</span><br><span class="line">        <span class="comment">// AnnotationController controller = new AnnotationController();</span></span><br><span class="line">        <span class="comment">//SimpleController controller = new SimpleController();</span></span><br><span class="line">        <span class="comment">// 得到对应适配器</span></span><br><span class="line">        HandlerAdapter adapter = getHandler(controller);</span><br><span class="line">        <span class="comment">// 通过适配器执行对应的controller对应方法</span></span><br><span class="line">        adapter.handle(controller);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">getHandler</span><span class="params">(Controller controller)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历：根据得到的controller(handler), 返回对应适配器</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adapter.supports(controller)) &#123;</span><br><span class="line">                <span class="keyword">return</span> adapter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DispatchServlet().doDispatch(); <span class="comment">// http...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HandlerAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.adapter.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HandlerAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  springmvc的HandlerAdapter源码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/21 14:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///定义一个Adapter接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多种适配器类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        ((SimpleController) handler).doSimplerHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> SimpleController);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        ((HttpController) handler).doHttpHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> HttpController);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        ((AnnotationController) handler).doAnnotationHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> AnnotationController);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-08-41.png"></p>
<h1 id="11，桥接模式"><a href="#11，桥接模式" class="headerlink" title="11，桥接模式"></a>11，桥接模式</h1><h2 id="11-1-桥接模式的定义和特点"><a href="#11-1-桥接模式的定义和特点" class="headerlink" title="11.1 桥接模式的定义和特点"></a>11.1 桥接模式的定义和特点</h2><p>桥接（Bridge）模式的定义如下：<strong>将抽象与实现分离，使它们可以独立变化。</strong>它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p>
<p>通过上面的讲解，我们能很好的感觉到桥接模式遵循了里氏替换原则和依赖倒置原则，最终实现了开闭原则，对修改关闭，对扩展开放。</p>
<p><strong>桥接（Bridge）模式的优点是：</strong></p>
<ul>
<li>抽象与实现分离，扩展能力强</li>
<li>符合开闭原则</li>
<li>符合合成复用原则</li>
<li>其实现细节对客户透明</li>
</ul>
<p><strong>缺点是：</strong></p>
<p>由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。</p>
<h2 id="11-2-桥接模式的结构与实现"><a href="#11-2-桥接模式的结构与实现" class="headerlink" title="11.2 桥接模式的结构与实现"></a>11.2 桥接模式的结构与实现</h2><h3 id="11-2-1-桥接模式的结构"><a href="#11-2-1-桥接模式的结构" class="headerlink" title="11.2.1 桥接模式的结构"></a>11.2.1 桥接模式的结构</h3><ol>
<li>抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。</li>
<li>扩展抽象化（Refined Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li>
<li>实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。</li>
<li>具体实现化（Concrete Implementor）角色：给出实现化角色接口的具体实现。</li>
</ol>
<h3 id="11-2-2-代码实现"><a href="#11-2-2-代码实现" class="headerlink" title="11.2.2 代码实现"></a>11.2.2 代码实现</h3><p><strong>Brand 抽象化角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 品牌类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Vivo 拓展抽象化角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Vivo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 手机品牌 实现品牌接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo手机开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo手机关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>XiaoMi 拓展抽象化角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> XiaoMi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  手机品牌 实现品牌接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XiaoMi手机开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XiaoMi手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XiaoMi手机关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Phone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Phone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  手机类 抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//组合品牌</span></span><br><span class="line">    <span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FoldedPhone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FoldedPhone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 折叠手机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoldedPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FoldedPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UpRightPhone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> UpRightPhone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 直立手机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpRightPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpRightPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">&quot;直立手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;直立手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;直立手机样式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  客户端类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/22 9:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone1 = <span class="keyword">new</span> FoldedPhone(<span class="keyword">new</span> XiaoMi());</span><br><span class="line">        phone1.open();</span><br><span class="line">        phone1.call();</span><br><span class="line">        phone1.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        Phone phone2 = <span class="keyword">new</span> UpRightPhone(<span class="keyword">new</span> Vivo());</span><br><span class="line">        phone2.open();</span><br><span class="line">        phone2.call();</span><br><span class="line">        phone2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-09-15.png"></p>
<h2 id="11-3-桥接模式的应用场景"><a href="#11-3-桥接模式的应用场景" class="headerlink" title="11.3 桥接模式的应用场景"></a>11.3 桥接模式的应用场景</h2><p>当一个类内部具备两种或多种变化维度时，使用桥接模式可以解耦这些变化的维度，使高层代码架构稳定。</p>
<ol>
<li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li>
<li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li>
<li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。</li>
</ol>
<h1 id="12，装饰器模式"><a href="#12，装饰器模式" class="headerlink" title="12，装饰器模式"></a>12，装饰器模式</h1><h2 id="12-1-装饰器模式的定义和特点"><a href="#12-1-装饰器模式的定义和特点" class="headerlink" title="12.1 装饰器模式的定义和特点"></a>12.1 装饰器模式的定义和特点</h2><p>装饰器（Decorator）模式的定义：<strong>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</strong>，它属于对象结构型模式。</p>
<p><strong>装饰器模式的主要优点有：</strong></p>
<ul>
<li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用</li>
<li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果</li>
<li>装饰器模式完全遵守开闭原则</li>
</ul>
<p><strong>其主要缺点是：</strong></p>
<ul>
<li>装饰器模式会增加许多子类，过度使用会增加程序得复杂性。</li>
</ul>
<h2 id="12-2-装饰器模式的结构与实现"><a href="#12-2-装饰器模式的结构与实现" class="headerlink" title="12.2 装饰器模式的结构与实现"></a>12.2 装饰器模式的结构与实现</h2><p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会很膨胀。如果使用组合关系来创建一个包装对象（即装饰对象）来包裹真实对象，并在保持真实对象的类结构不变的前提下，为其提供额外的功能，这就是装饰器模式的目标</p>
<h3 id="12-2-1-装饰器模式的结构"><a href="#12-2-1-装饰器模式的结构" class="headerlink" title="12.2.1 装饰器模式的结构"></a>12.2.1 装饰器模式的结构</h3><ol>
<li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li>
<li>具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li>
<li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>
<li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>
</ol>
<h3 id="12-2-2-代码实现"><a href="#12-2-2-代码实现" class="headerlink" title="12.2.2 代码实现"></a>12.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_20-52-56.png"></p>
<p><strong>FastFood 抽象构件角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FastFood</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  快餐类 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line">    <span class="keyword">private</span> String desc; <span class="comment">//描述</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastFood</span><span class="params">(<span class="keyword">float</span> price, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法  获取价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FiredRice 具体构建角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FiredRice</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  炒饭类  继承快餐类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiredRice</span> <span class="keyword">extends</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FiredRice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">10</span>, <span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FiredNoodles 具体构建角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FiredNoodles</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  炒面类 继承 快餐类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiredNoodles</span> <span class="keyword">extends</span> <span class="title">FastFood</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FiredNoodles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">15</span>, <span class="string">&quot;炒面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Garnish 抽象装饰角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Garnish</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  抽象配料类 继承快餐类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Garnish</span> <span class="keyword">extends</span> <span class="title">FastFood</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FastFood fastFood;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FastFood <span class="title">getFastFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFastFood</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Garnish</span><span class="params">(FastFood fastFood,<span class="keyword">float</span> price,String desc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(price,desc);</span><br><span class="line">        <span class="keyword">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Egg 具体装饰角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Egg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  鸡蛋配料类 继承配料类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Egg</span> <span class="keyword">extends</span> <span class="title">Garnish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//鸡蛋1元</span></span><br><span class="line">        <span class="keyword">super</span>(fastFood, <span class="number">1</span>, <span class="string">&quot;鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Bacon 具体装饰角色</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Bacon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  培根类 继承配料类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 22:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bacon</span> <span class="keyword">extends</span> <span class="title">Garnish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bacon</span><span class="params">(FastFood fastFood)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//培根2元</span></span><br><span class="line">        <span class="keyword">super</span>(fastFood, <span class="number">2</span>, <span class="string">&quot;培根&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  装饰器模式测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//点一份炒饭</span></span><br><span class="line">        FastFood rice = <span class="keyword">new</span> FiredRice();</span><br><span class="line">        <span class="comment">//价格</span></span><br><span class="line">        System.out.println(rice.getDesc() + <span class="string">&quot;--&gt;&quot;</span> + rice.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点一份加鸡蛋的炒饭</span></span><br><span class="line">        FastFood eggRice = <span class="keyword">new</span> FiredRice();</span><br><span class="line">        <span class="comment">//加鸡蛋</span></span><br><span class="line">        eggRice = <span class="keyword">new</span> Egg(eggRice);</span><br><span class="line">        System.out.println(eggRice.getDesc() + <span class="string">&quot;--&gt;&quot;</span> + eggRice.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点一份加培根的炒面</span></span><br><span class="line">        FastFood baconNoodles = <span class="keyword">new</span> FiredNoodles();</span><br><span class="line">        <span class="comment">//加培根</span></span><br><span class="line">        baconNoodles = <span class="keyword">new</span> Bacon(baconNoodles);</span><br><span class="line">        System.out.println(baconNoodles.getDesc() + <span class="string">&quot;--&gt;&quot;</span> + baconNoodles.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-09-51.png"></p>
<h2 id="12-3-装饰器模式的应用场景"><a href="#12-3-装饰器模式的应用场景" class="headerlink" title="12.3 装饰器模式的应用场景"></a>12.3 装饰器模式的应用场景</h2><ul>
<li><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p>
<p>不能采用继承的情况主要有两类：</p>
<ul>
<li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；</li>
<li>第二类是因为类定义不能继承（如final类）</li>
</ul>
</li>
<li><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p>
</li>
<li><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p>
</li>
</ul>
<h2 id="12-4-JDK源码解析"><a href="#12-4-JDK源码解析" class="headerlink" title="12.4 JDK源码解析"></a>12.4 JDK源码解析</h2><p>IO流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。</p>
<p>我们以BufferedWriter举例来说明，先看看如何使用BufferedWriter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建BufferedWriter对象</span></span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\dell\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;hello Buffered&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_20-59-18.png"></p>
<p><strong>BufferedWriter使用装饰者模式对Writer子实现类进行了增强，添加了缓冲区，提高了写数据的效率。</strong></p>
<p>静态代理和装饰者模式的区别：</p>
<ul>
<li>相同点：<ul>
<li>都要实现与目标类相同的业务接口</li>
<li>在两个类中都要声明目标对象</li>
<li>都可以在不修改目标类的前提下增强目标方法</li>
</ul>
</li>
<li>不同点：<ul>
<li>目的不同 装饰者是为了增强目标对象 静态代理是为了保护和隐藏目标对象</li>
<li>获取目标对象构建的地方不同 装饰者是由外界传递进来，可以通过构造方法传递 静态代理是在代理类内部创建，以此来隐藏目标对象</li>
</ul>
</li>
</ul>
<h1 id="13，外观模式"><a href="#13，外观模式" class="headerlink" title="13，外观模式"></a>13，外观模式</h1><h2 id="13-1-外观模式的定义和特点"><a href="#13-1-外观模式的定义和特点" class="headerlink" title="13.1 外观模式的定义和特点"></a>13.1 外观模式的定义和特点</h2><p>外观（Facade）模式又叫作门面模式，<strong>是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。</strong>该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>
<p>外观（Facade）模式是“迪米特法则”的典型应用，<strong>它有以下主要优点。</strong></p>
<ol>
<li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li>
<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>
<li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li>
</ol>
<p><strong>外观（Facade）模式的主要缺点如下。</strong></p>
<ol>
<li>不能很好地限制客户使用子系统类，很容易带来未知风险。</li>
<li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>
</ol>
<h2 id="13-2-外观模式的结构与实现"><a href="#13-2-外观模式的结构与实现" class="headerlink" title="13.2 外观模式的结构与实现"></a>13.2 外观模式的结构与实现</h2><h3 id="13-2-1-外观模式的结构"><a href="#13-2-1-外观模式的结构" class="headerlink" title="13.2.1 外观模式的结构"></a>13.2.1 外观模式的结构</h3><p>外观（Facade）模式包含以下主要角色。</p>
<ol>
<li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li>
<li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li>
<li>客户（Client）角色：通过一个外观角色访问各个子系统的功能。</li>
</ol>
<h3 id="13-2-2-代码实现"><a href="#13-2-2-代码实现" class="headerlink" title="13.2.2 代码实现"></a>13.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_21-03-54.png"></p>
<p><strong>AirCondition</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AirCondition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 空调类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 19:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirCondition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;空调打开...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;空调关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Light</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Light</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 电灯类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 19:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯打开...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TV</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> TV</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 电视类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 19:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电视打开...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电视关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SmartAppliancesFacade</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SmartAppliancesFacade</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 智能音箱类  外观类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 19:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartAppliancesFacade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="keyword">private</span> TV tv;</span><br><span class="line">    <span class="keyword">private</span> AirCondition airCondition;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmartAppliancesFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light = <span class="keyword">new</span> Light();</span><br><span class="line">        tv = <span class="keyword">new</span> TV();</span><br><span class="line">        airCondition = <span class="keyword">new</span> AirCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有打开方法 外界访问不了</span></span><br><span class="line">    <span class="comment">//一键打开</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">        tv.on();</span><br><span class="line">        airCondition.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有关闭方法 外界访问不了</span></span><br><span class="line">    <span class="comment">//一键关闭</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">        tv.off();</span><br><span class="line">        airCondition.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message.contains(<span class="string">&quot;打开&quot;</span>)) &#123;</span><br><span class="line">            on();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.contains(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">            off();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你说的指令我听不懂！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.facade;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 外观模式测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 19:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmartAppliancesFacade smartAppliancesFacade = <span class="keyword">new</span> SmartAppliancesFacade();</span><br><span class="line">        smartAppliancesFacade.say(<span class="string">&quot;打开家电&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        smartAppliancesFacade.say(<span class="string">&quot;关闭家电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-10-37.png"></p>
<h2 id="13-3-外观模式的应用场景"><a href="#13-3-外观模式的应用场景" class="headerlink" title="13.3 外观模式的应用场景"></a>13.3 外观模式的应用场景</h2><ul>
<li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li>
<li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li>
<li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li>
</ul>
<h2 id="13-4-源码解析"><a href="#13-4-源码解析" class="headerlink" title="13.4 源码解析"></a>13.4 源码解析</h2><p>使用tomcat作为web容器时，接收浏览器发送过来的请求，tomcat会将请求信息封装成ServletRequest对象，如下图①处对象。但是大家想想ServletRequest是一个接口，它还有一个子接口HttpServletRequest，而我们知道该request对象肯定是一个HttpServletRequest对象的子实现类对象，到底是哪个类的对象呢？可以通过输出request对象，我们就会发现是一个名为RequestFacade的类的对象。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_21-09-43.png"></p>
<p>RequestFacade类就使用了外观模式</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_21-10-14.png"></p>
<p><strong>为什么在此处使用外观模式呢？</strong></p>
<p>定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request 的实现。然后，将 RequestFacade上转为 ServletRequest 传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。</p>
<h1 id="14，享元模式"><a href="#14，享元模式" class="headerlink" title="14，享元模式"></a>14，享元模式</h1><h2 id="14-1-享元模式的定义和特点"><a href="#14-1-享元模式的定义和特点" class="headerlink" title="14.1 享元模式的定义和特点"></a>14.1 享元模式的定义和特点</h2><p>享元（Flyweight）模式的定义：<strong>运用共享技术来有效地支持大量细粒度对象的复用。</strong>它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。</p>
<p>享元模式的主要优点是：相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p>
<p>其主要缺点是：</p>
<ol>
<li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li>
<li>读取享元模式的外部状态会使得运行时间稍微变长。</li>
</ol>
<h2 id="14-2-享元模式的结构与实现"><a href="#14-2-享元模式的结构与实现" class="headerlink" title="14.2 享元模式的结构与实现"></a>14.2 享元模式的结构与实现</h2><h3 id="14-2-1-享元模式的结构"><a href="#14-2-1-享元模式的结构" class="headerlink" title="14.2.1 享元模式的结构"></a>14.2.1 享元模式的结构</h3><p>享元（Flyweight ）模式中存在以下两种状态：</p>
<ol>
<li>内部状态，即不会随着环境的改变而改变的可共享部分。</li>
<li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li>
</ol>
<p>享元模式的主要有以下角色：</p>
<ul>
<li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li>
<li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li>
<li>非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li>
<li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li>
</ul>
<h3 id="14-2-1代码实现"><a href="#14-2-1代码实现" class="headerlink" title="14.2.1代码实现"></a>14.2.1代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_21-14-51.png"></p>
<p><strong>IBox 定义不同的形状</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IBox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> I图形类(具体享元角色)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/25 15:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBox</span> <span class="keyword">extends</span> <span class="title">AbstractBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>LBox 定义不同的形状</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IBox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> L图形类(具体享元角色)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/25 15:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LBox</span> <span class="keyword">extends</span> <span class="title">AbstractBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;L&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OBox 定义不同的形状</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> IBox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> O图形类(具体享元角色)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/25 15:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OBox</span> <span class="keyword">extends</span> <span class="title">AbstractBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;O&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BoxFactory 提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BoxFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 工厂类 将类设计为单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/25 15:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, AbstractBox&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在构造方法中初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BoxFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;String, AbstractBox&gt;();</span><br><span class="line">        IBox iBox = <span class="keyword">new</span> IBox();</span><br><span class="line">        LBox lBox = <span class="keyword">new</span> LBox();</span><br><span class="line">        OBox oBox = <span class="keyword">new</span> OBox();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, iBox);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, lBox);</span><br><span class="line">        map.put(<span class="string">&quot;O&quot;</span>, oBox);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个方法获取工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BoxFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BoxFactory INSTANCE = <span class="keyword">new</span> BoxFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据图形名称获取图形对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractBox <span class="title">getShape</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AbstractBox 对这些形状向上抽取出AbstractBox，用来定义共性的属性和行为</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractBox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象享元角色 抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/25 15:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBox</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取图形的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示图形及颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方块形状：&quot;</span> + <span class="keyword">this</span>.getShape() + <span class="string">&quot;颜色：&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-11-07.png"></p>
<h2 id="14-3-享元模式的应用场景"><a href="#14-3-享元模式的应用场景" class="headerlink" title="14.3 享元模式的应用场景"></a>14.3 享元模式的应用场景</h2><p>当系统中多处需要同一组信息时，可以把这些信息封装到一个对象中，然后对该对象进行缓存，这样，一个对象就可以提供给多出需要使用的地方，避免大量同一对象的多次创建，降低大量内存空间的消耗。</p>
<p>享元模式其实是工厂方法模式的一个改进机制，享元模式同样要求创建一个或一组对象，并且就是通过工厂方法模式生成对象的，只不过享元模式为工厂方法模式增加了缓存这一功能。</p>
<p>前面分析了享元模式的结构与特点，下面分析它适用的应用场景。<strong>享元模式是通过减少内存中对象的数量来节省内存空间的</strong>，所以以下几种情形适合采用享元模式。</p>
<ol>
<li>系统中存在大量相同或相似的对象，这些对象耗费大量的内存资源。</li>
<li>大部分的对象可以按照内部状态进行分组，且可将不同部分外部化，这样每一个组只需保存一个内部状态。</li>
<li>由于享元模式需要额外维护一个保存享元的数据结构，所以应当在有足够多的享元实例时才值得使用享元模式</li>
</ol>
<h2 id="14-4-JDK源码解析"><a href="#14-4-JDK源码解析" class="headerlink" title="14.4 JDK源码解析"></a>14.4 JDK源码解析</h2><p>Integer类使用了享元模式。我们先看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">127</span>;</span><br><span class="line">        Integer i2 = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i1和i2对象是否是同一个对象？&quot;</span> + (i1 == i2));</span><br><span class="line"></span><br><span class="line">        Integer i3 = <span class="number">128</span>;</span><br><span class="line">        Integer i4 = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i3和i4对象是否是同一个对象？&quot;</span> + (i3 == i4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果是 true  false </p>
</blockquote>
<p>为什么第一个输出语句输出的是true，第二个输出语句输出的是false？通过反编译软件进行反编译，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = Integer.valueOf((<span class="keyword">int</span>)<span class="number">127</span>);</span><br><span class="line">        Integer i2 Integer.valueOf((<span class="keyword">int</span>)<span class="number">127</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> StringBuilder().append((String)<span class="string">&quot;i1\u548ci2\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="keyword">boolean</span>)(i1 == i2)).toString());</span><br><span class="line">        Integer i3 = Integer.valueOf((<span class="keyword">int</span>)<span class="number">128</span>);</span><br><span class="line">        Integer i4 = Integer.valueOf((<span class="keyword">int</span>)<span class="number">128</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> StringBuilder().append((String)<span class="string">&quot;i3\u548ci4\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="keyword">boolean</span>)(i3 == i4)).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码可以看到，直接给Integer类型的变量赋值基本数据类型数据的操作底层使用的是 <code>valueOf()</code> ，所以只需要看该方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>Integer</code> 默认先创建并缓存 <code>-128 ~ 127</code> 之间数的 <code>Integer</code> 对象，当调用 <code>valueOf</code> 时如果参数在 <code>-128 ~ 127</code> 之间则计算下标并从缓存中返回，否则创建一个新的 <code>Integer</code> 对象。</p>
<h1 id="15，模板方法模式"><a href="#15，模板方法模式" class="headerlink" title="15，模板方法模式"></a>15，模板方法模式</h1><h2 id="15-1-模板方法模式的定义和特点"><a href="#15-1-模板方法模式的定义和特点" class="headerlink" title="15.1 模板方法模式的定义和特点"></a>15.1 模板方法模式的定义和特点</h2><p>模板方法（Template Method）模式的定义如下：<strong>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</strong>它是一种类行为型模式。</p>
<p><strong>该模式的主要优点如下。</strong></p>
<ol>
<li>它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。</li>
<li>它在父类中提取了公共的部分代码，便于代码复用。</li>
<li>部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li>
</ol>
<p><strong>该模式的主要缺点如下。</strong></p>
<ol>
<li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。</li>
<li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li>
<li>由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。</li>
</ol>
<h2 id="15-2-模板方法模式的结构与实现"><a href="#15-2-模板方法模式的结构与实现" class="headerlink" title="15.2 模板方法模式的结构与实现"></a>15.2 模板方法模式的结构与实现</h2><h3 id="15-2-1-模板方法模式的结构"><a href="#15-2-1-模板方法模式的结构" class="headerlink" title="15.2.1 模板方法模式的结构"></a>15.2.1 模板方法模式的结构</h3><p>模板方法（Template Method）模式包含以下主要角色：</p>
<ul>
<li><p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p>
<ul>
<li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p>
</li>
<li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p>
<ul>
<li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p>
</li>
<li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p>
</li>
<li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p>
<p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_21-25-01.png"></p>
<h3 id="15-2-2-代码实现"><a href="#15-2-2-代码实现" class="headerlink" title="15.2.2 代码实现"></a>15.2.2 代码实现</h3><p><strong>AbstractClass</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//起床</span></span><br><span class="line">        <span class="keyword">this</span>.wake();</span><br><span class="line">        <span class="comment">//刷牙</span></span><br><span class="line">        <span class="keyword">this</span>.brush();</span><br><span class="line">        <span class="comment">//吃早饭</span></span><br><span class="line">        <span class="keyword">this</span>.breakfast();</span><br><span class="line">        <span class="comment">//交通工具</span></span><br><span class="line">        <span class="keyword">this</span>.transport();</span><br><span class="line">        <span class="comment">//睡觉</span></span><br><span class="line">        <span class="keyword">this</span>.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刷牙...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤不一样 (一个是吃面包 一个是喝牛奶)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤不一样 (一个是开车 一个是坐地铁)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteClass_BreakFast</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ConcreteClass_BreakFast</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体类 早饭类 继承</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass_BreakFast</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;坐公交...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteClass_Transport</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ConcreteClass_Transport</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 交通工具类 继承</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass_Transport</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝牛奶...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乘地铁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 模板方法模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//吃面包 坐公交</span></span><br><span class="line">        System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">        AbstractClass breakFast = <span class="keyword">new</span> ConcreteClass_BreakFast();</span><br><span class="line">        breakFast.work();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;周五&quot;</span>);</span><br><span class="line">        AbstractClass transport = <span class="keyword">new</span> ConcreteClass_Transport();</span><br><span class="line">        transport.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-11-39.png"></p>
<p><strong>钩子方法</strong></p>
<p><strong>AbstractClass</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template.hook_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//起床</span></span><br><span class="line">        <span class="keyword">this</span>.wake();</span><br><span class="line">        <span class="comment">//刷牙</span></span><br><span class="line">        <span class="keyword">this</span>.brush();</span><br><span class="line">        <span class="comment">//吃早饭</span></span><br><span class="line">        <span class="keyword">this</span>.breakfast();</span><br><span class="line">        <span class="comment">//交通工具</span></span><br><span class="line">        <span class="keyword">if</span> (isSunday()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.transport();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//睡觉</span></span><br><span class="line">        <span class="keyword">this</span>.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刷牙...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤不一样 (一个是吃面包 一个是喝牛奶)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤不一样 (一个是开车 一个是坐地铁)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤一样 直接实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子方法 是否为周末 周末不用交通工具</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSunday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteClass_BreakFast</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template.hook_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ConcreteClass_BreakFast</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体类 早饭类 继承</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass_BreakFast</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;坐公交...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteClass_Transport</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template.hook_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ConcreteClass_Transport</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 交通工具类 继承</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass_Transport</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝牛奶...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乘地铁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConcreteClass_Sunday</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template.hook_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ConcreteClass_Sunday</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 周末 不用上班 空实现交通方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass_Sunday</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包或者喝牛奶...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSunday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天周末，休息...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.template.hook_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 模板方法 测试钩子方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 20:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass sunday = <span class="keyword">new</span> ConcreteClass_Sunday();</span><br><span class="line">        sunday.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-3-模板方法模式的应用场景"><a href="#15-3-模板方法模式的应用场景" class="headerlink" title="15.3 模板方法模式的应用场景"></a>15.3 模板方法模式的应用场景</h2><ol>
<li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li>
<li>当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。</li>
<li>当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展。</li>
</ol>
<h2 id="15-4-JDK源码解析"><a href="#15-4-JDK源码解析" class="headerlink" title="15.4 JDK源码解析"></a>15.4 JDK源码解析</h2><p>InputStream类就使用了模板方法模式。在InputStream类中定义了多个 <code>read()</code> 方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法，要求子类必须重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (off &lt; <span class="number">0</span> || len &lt; <span class="number">0</span> || len &gt; b.length - off) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c = read(); <span class="comment">//调用了无参的read方法，该方法是每次读取一个字节数据</span></span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        b[off] = (<span class="keyword">byte</span>)c;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len ; i++) &#123;</span><br><span class="line">                c = read();</span><br><span class="line">                <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b[off + i] = (<span class="keyword">byte</span>)c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ee) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看到，无参的 <code>read()</code> 方法是抽象方法，要求子类必须实现。而 <code>read(byte b[])</code> 方法调用了 <code>read(byte b[], int off, int len)</code> 方法，所以在此处重点看的方法是带三个参数的方法。 </p>
<p>在该方法中第18行、27行，可以看到调用了无参的抽象的 <code>read()</code> 方法。</p>
<p><strong>总结如下： 在InputStream父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取len个字节数据。具体如何读取一个字节数据呢？由子类实现</strong>。</p>
<h1 id="16，组合模式"><a href="#16，组合模式" class="headerlink" title="16，组合模式"></a>16，组合模式</h1><h2 id="16-1-组合模式的定义和特点"><a href="#16-1-组合模式的定义和特点" class="headerlink" title="16.1 组合模式的定义和特点"></a>16.1 组合模式的定义和特点</h2><p>组合（Composite Pattern）模式的定义：有时又叫作整体-部分（Part-Whole）模式，它是一种将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性，属于结构型设计模式。</p>
<p>组合模式一般用来描述整体与部分的关系，它将对象组织到树形结构中，顶层的节点被称为根节点，根节点下面可以包含树枝节点和叶子节点，树枝节点下面又可以包含树枝节点和叶子节点，树形结构图如下</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-22-40.png"></p>
<p>由上图可以看出，其实根节点和树枝节点本质上属于同一种数据类型，可以作为容器使用；而叶子节点与树枝节点在语义上不属于用一种类型。但是在组合模式中，会把树枝节点和叶子节点看作属于同一种数据类型（用统一接口定义），让它们具备一致行为。</p>
<p>这样，在组合模式中，整个树形结构中的对象都属于同一种类型，带来的好处就是用户不需要辨别是树枝节点还是叶子节点，可以直接进行操作，给用户的使用带来极大的便利。</p>
<p>组合模式的主要优点有：</p>
<ol>
<li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；</li>
<li>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；</li>
</ol>
<p>其主要缺点是：</p>
<ol>
<li>设计较复杂，客户端需要花更多时间理清类之间的层次关系；</li>
<li>不容易限制容器中的构件；</li>
<li>不容易用继承的方法来增加构件的新功能；</li>
</ol>
<h2 id="16-2-组合模式的结构与实现"><a href="#16-2-组合模式的结构与实现" class="headerlink" title="16.2 组合模式的结构与实现"></a>16.2 组合模式的结构与实现</h2><h3 id="16-2-1-组合模式的结构"><a href="#16-2-1-组合模式的结构" class="headerlink" title="16.2.1 组合模式的结构"></a>16.2.1 组合模式的结构</h3><ol>
<li>抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。（总的抽象类或接口，定义一些通用的方法，比如新增、删除）</li>
<li>树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，用于继承或实现抽象构件。</li>
<li>树枝构件（Composite）角色 / 中间构件：是组合中的分支节点对象，它有子节点，用于继承和实现抽象构件。它的主要作用是存储和管理子部件，通常包含 Add()、Remove()、GetChild() 等方法。</li>
</ol>
<h3 id="16-2-2-代码实现"><a href="#16-2-2-代码实现" class="headerlink" title="16.2.2 代码实现"></a>16.2.2 代码实现</h3><p>如下图，我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-23-54.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-24-18.png"></p>
<p><strong>MenuComponent MenuComponent定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu和MenuItem类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu类可以包含子菜单，因此需要覆盖add()、remove()、getChild()方法，但是MenuItem就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.combination;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MenuComponent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 菜单组件 不管菜单还是菜单项，都应该继承该类  抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 17:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的子菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取菜单名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Menu类已经实现了除了getName方法的其他所有方法，因为Menu类具有添加菜单，移除菜单和获取子菜单的功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.combination;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Menu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 菜单类 继承菜单组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Menu</span><span class="params">(String name, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        menuComponentList = <span class="keyword">new</span> ArrayList&lt;MenuComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MenuItem是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.combination;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MenuItem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 菜单选项 继承菜单组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/24 17:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-16-43.png"></p>
<p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。</p>
<ul>
<li><p>透明组合模式</p>
<p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 <code>MenuComponent</code> 声明了 <code>add</code>、<code>remove</code> 、<code>getChild</code> 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p>
<p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</p>
</li>
<li><p>安全组合模式</p>
<p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 <code>Menu</code> 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-27-51.png"></p>
<h2 id="16-3-组合模式的应用场景"><a href="#16-3-组合模式的应用场景" class="headerlink" title="16.3 组合模式的应用场景"></a>16.3 组合模式的应用场景</h2><ol>
<li>在需要表示一个对象整体与部分的层次结构的场合。</li>
<li>要求对用户隐藏组合对象与单个对象的不同，用户可以用统一的接口使用组合结构中的所有对象的场合。</li>
</ol>
<h1 id="17，代理模式"><a href="#17，代理模式" class="headerlink" title="17，代理模式"></a>17，代理模式</h1><h2 id="17-1-代理模式的定义和特点"><a href="#17-1-代理模式的定义和特点" class="headerlink" title="17.1 代理模式的定义和特点"></a>17.1 代理模式的定义和特点</h2><p>代理模式的定义：<strong>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。</strong>这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>
<p><strong>代理模式的主要优点有：</strong></p>
<ul>
<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>
<li>代理对象可以扩展目标对象的功能；</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度，增加了程序的可扩展性</li>
</ul>
<p><strong>其主要缺点是：</strong></p>
<ul>
<li>代理模式会造成系统设计中类的数量增加</li>
<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>
<li>增加了系统的复杂度；</li>
</ul>
<h2 id="17-2-代理模式的结构与实现"><a href="#17-2-代理模式的结构与实现" class="headerlink" title="17.2 代理模式的结构与实现"></a>17.2 代理模式的结构与实现</h2><h3 id="17-2-1-代理模式的结构"><a href="#17-2-1-代理模式的结构" class="headerlink" title="17.2.1 代理模式的结构"></a>17.2.1 代理模式的结构</h3><ol>
<li>抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>
<li>真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li>
<li>代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
</ol>
<p>根据代理的创建时期，代理模式分为静态代理和动态代理。</p>
<ul>
<li>静态：由程序员创建代理类或特定工具自动生成源代码再对其编译，在程序运行前代理类的 .class 文件就已经存在了。</li>
<li>动态：在程序运行时，运用反射机制动态创建而成</li>
</ul>
<h3 id="17-2-2-代码实现"><a href="#17-2-2-代码实现" class="headerlink" title="17.2.2 代码实现"></a>17.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-35-52.png"></p>
<h4 id="17-2-2-1静态代理"><a href="#17-2-2-1静态代理" class="headerlink" title="17.2.2.1静态代理"></a>17.2.2.1<strong>静态代理</strong></h4><p><strong>SellTickets</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SellTickets</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 卖票接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Transition</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Transition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 火车站，具有卖票功能，实现接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transition</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProxyPoint</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ProxyPoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 代售点 实现接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPoint</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Transition transition = <span class="keyword">new</span> Transition();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代售点收取服务费&quot;</span>);</span><br><span class="line">        transition.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 静态代理客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyPoint proxyPoint = <span class="keyword">new</span> ProxyPoint();</span><br><span class="line">        proxyPoint.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-18-39.png"></p>
<p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强</p>
<h4 id="17-2-2-2-JDK动态代理"><a href="#17-2-2-2-JDK动态代理" class="headerlink" title="17.2.2.2 JDK动态代理"></a>17.2.2.2 <strong>JDK动态代理</strong></h4><p>使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p>
<p><strong>SellTickets</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.jdk_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SellTickets</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 卖票接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Transition</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.jdk_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Transition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 火车站，具有卖票功能，实现接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transition</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProxyFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.jdk_proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ProxyFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 代理工厂 用来创建代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Transition transition = <span class="keyword">new</span> Transition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Proxy获取代理对象</span></span><br><span class="line">        <span class="comment">/* newProxyInstance</span></span><br><span class="line"><span class="comment">        ClassLoader loader, 类加载器</span></span><br><span class="line"><span class="comment">        Class&lt;?&gt;[] interfaces, 接口</span></span><br><span class="line"><span class="comment">        InvocationHandler h 方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        invoke 方法参数说明</span></span><br><span class="line"><span class="comment">        proxy 代理对象</span></span><br><span class="line"><span class="comment">        method 对应于在代理对象调用的接口方法的Method实例</span></span><br><span class="line"><span class="comment">        args 代理对象调用接口方法时传递的实际参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(transition.getClass().getClassLoader(),</span><br><span class="line">                transition.getClass().getInterfaces()</span><br><span class="line">                , <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;代售点收取服务费(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="comment">//执行真实对象</span></span><br><span class="line">                        Object result = method.invoke(transition, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.jdk_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> JDK动态代理 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line"></span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-20-12.png"></p>
<p><font color="red">使用了动态代理，我们思考下面问题：</font></p>
<ul>
<li><p>ProxyFactory是代理类吗？</p>
<p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.proxy.dynamic.jdk.SellTickets;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的类中，我们可以看到以下几个信息：</p>
<ul>
<li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li>
<li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li>
</ul>
</li>
<li><p>动态代理的执行流程是什么样？</p>
<p>下面是摘取的重点代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序运行过程中动态生成的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java提供的动态代理相关类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line">	 </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">Proxy</span><span class="params">(InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        Object result = method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>执行流程如下：</p>
<ol>
<li>在测试类中通过代理对象调用sell()方法</li>
<li>根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法</li>
<li>代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法</li>
<li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</li>
</ol>
<h4 id="17-2-2-3-CGLB代理"><a href="#17-2-2-3-CGLB代理" class="headerlink" title="17.2.2.3 CGLB代理"></a>17.2.2.3 <strong>CGLB代理</strong></h4><p><strong>TrainStation</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.cglib_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> TrainStation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 火车站类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProxyFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.cglib_proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ProxyFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 代理工厂 实现MethodInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation target = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象  类似于JDK动态代理</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TrainStation obj = (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代收点收取一些代理费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class="line">        Object result = methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.proxy.cglib_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> CGLIB动态代理模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/26 8:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建代理工厂对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        TrainStation proxyObject = factory.getProxyObject();</span><br><span class="line"></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-20-23.png"></p>
<h3 id="17-2-3-三种代理的对比"><a href="#17-2-3-三种代理的对比" class="headerlink" title="17.2.3 三种代理的对比"></a>17.2.3 三种代理的对比</h3><ul>
<li><p>jdk代理和CGLIB代理</p>
<p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p>
<p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代理，如果没有接口使用CGLIB代理。</p>
</li>
<li><p>动态代理和静态代理</p>
<p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p>
<p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p>
</li>
</ul>
<h2 id="17-3-代理模式应用场景"><a href="#17-3-代理模式应用场景" class="headerlink" title="17.3 代理模式应用场景"></a>17.3 代理模式应用场景</h2><ul>
<li><p>远程（Remote）代理</p>
<p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p>
</li>
<li><p>防火墙（Firewall）代理</p>
<p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p>
</li>
<li><p>保护（Protect or Access）代理</p>
<p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p>
</li>
</ul>
<h1 id="18，命令模式"><a href="#18，命令模式" class="headerlink" title="18，命令模式"></a>18，命令模式</h1><h2 id="18-1-命令模式的定义和特点"><a href="#18-1-命令模式的定义和特点" class="headerlink" title="18.1 命令模式的定义和特点"></a>18.1 命令模式的定义和特点</h2><p>命令（Command）模式的定义如下：<strong>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</strong>这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p>
<p><strong>命令模式的主要优点如下。</strong></p>
<ol>
<li>通过引入中间件（抽象接口）降低系统的耦合度。</li>
<li>扩展性良好，增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，且满足“开闭原则”。</li>
<li>可以实现宏命令。命令模式可以与<strong>组合模式</strong>结合，将多个命令装配成一个组合命令，即宏命令。</li>
<li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li>
<li>可以在现有命令的基础上，增加额外功能。比如日志记录，结合装饰器模式会更加灵活。</li>
</ol>
<p>其缺点是：</p>
<ol>
<li>可能产生大量具体的命令类。因为每一个具体操作都需要设计一个具体命令类，这会增加系统的复杂性。</li>
<li>命令模式的结果其实就是接收方的执行结果，但是为了以命令的形式进行架构、解耦请求与实现，引入了额外类型结构（引入了请求方与抽象命令接口），增加了理解上的困难。不过这也是设计模式的通病，抽象必然会额外增加类的数量，代码抽离肯定比代码聚合更加难理解。</li>
</ol>
<h2 id="18-2-命令模式的结构与实现"><a href="#18-2-命令模式的结构与实现" class="headerlink" title="18.2 命令模式的结构与实现"></a>18.2 命令模式的结构与实现</h2><h3 id="18-2-1-命令模式的结构"><a href="#18-2-1-命令模式的结构" class="headerlink" title="18.2.1 命令模式的结构"></a>18.2.1 命令模式的结构</h3><ol>
<li>抽象命令类（Command）角色：声明执行命令的接口，拥有执行命令的抽象方法 execute()。</li>
<li>具体命令类（Concrete Command）角色：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li>
<li>实现者/接收者（Receiver）角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li>
<li>调用者/请求者（Invoker）角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。</li>
</ol>
<h3 id="18-2-2-代码实现"><a href="#18-2-2-代码实现" class="headerlink" title="18.2.2 代码实现"></a>18.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_22-49-15.png"></p>
<p><strong>Command</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Command</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>; <span class="comment">// 只需要定义一个统一的执行方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrderCommand</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> OrderCommand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  具体命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有接受者对象</span></span><br><span class="line">    <span class="keyword">private</span> SeniorChef receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderCommand</span><span class="params">(SeniorChef receiver, Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(order.getDiningTable()+<span class="string">&quot;桌的订单：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : order.getFoodDic().keySet()) &#123;</span><br><span class="line">            receiver.makefood(order.getFoodDic().get(key),key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">//模拟做饭 睡眠1秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(order.getDiningTable()+<span class="string">&quot;桌的饭弄好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Order</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Order</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 订单类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 餐桌号码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> diningTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来存储餐名并记录</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; foodDic = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDiningTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiningTable</span><span class="params">(<span class="keyword">int</span> diningTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.diningTable = diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getFoodDic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foodDic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoodDic</span><span class="params">(String name, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        foodDic.put(name, num);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SeniorChef</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SeniorChef</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 厨师类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeniorChef</span> </span>&#123;</span><br><span class="line">    <span class="comment">//大厨师类 是命令的Receiver</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makefood</span><span class="params">(<span class="keyword">int</span> num, String foodName)</span> </span>&#123;</span><br><span class="line">        System.out.println(num + <span class="string">&quot;份&quot;</span> + foodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Waitor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Waitor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 服务员类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以持有很多命令对象</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Command&gt; commands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        commands = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommands</span><span class="params">(Command cmd)</span> </span>&#123;</span><br><span class="line">        commands.add(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发出命令 订单来了 大厨师开始执行命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来活了...&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commands.size(); i++) &#123;</span><br><span class="line">            Command cmd = commands.get(i);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cmd.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 命令模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 10:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建order</span></span><br><span class="line">        Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">        order1.setDiningTable(<span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;西红柿炒鸡蛋&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;罐装可乐&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">        order2.setDiningTable(<span class="number">2</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;酸溜土豆丝&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;王老吉&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建接受者</span></span><br><span class="line">        SeniorChef receiver = <span class="keyword">new</span> SeniorChef();</span><br><span class="line">        <span class="comment">//将订单和接受者封装成命令对象</span></span><br><span class="line">        OrderCommand cmd1 = <span class="keyword">new</span> OrderCommand(receiver, order1);</span><br><span class="line">        OrderCommand cmd2 = <span class="keyword">new</span> OrderCommand(receiver, order2);</span><br><span class="line">        <span class="comment">//创建调用者 waitor</span></span><br><span class="line">        Waitor invoke = <span class="keyword">new</span> Waitor();</span><br><span class="line">        invoke.setCommands(cmd1);</span><br><span class="line">        invoke.setCommands(cmd2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将订单给柜台 呼叫厨师</span></span><br><span class="line">        invoke.orderUp();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-20-52.png"></p>
<h2 id="18-3-命令模式应用场景"><a href="#18-3-命令模式应用场景" class="headerlink" title="18.3 命令模式应用场景"></a>18.3 命令模式应用场景</h2><ul>
<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li>
<li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li>
<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li>
</ul>
<h2 id="18-4-JDK源码解析"><a href="#18-4-JDK源码解析" class="headerlink" title="18.4 JDK源码解析"></a>18.4 JDK源码解析</h2><p>Runable是一个典型命令模式，Runnable担当命令的角色，Thread充当的是调用者，start方法就是其执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令接口(抽象命令角色)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会调用一个native方法start0(),调用系统方法，开启一个线程。而接收者是对程序员开放的，可以自己定义接收者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk Runnable 命令模式</span></span><br><span class="line"><span class="comment"> *		TurnOffThread ： 属于具体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnOffThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">TurnOffThread</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">     	<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     	receiver.turnOFF();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">         TurnOffThread turnOffThread = <span class="keyword">new</span> TurnOffThread(receiver);</span><br><span class="line">         Thread thread = <span class="keyword">new</span> Thread(turnOffThread);</span><br><span class="line">         thread.start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="19，访问者模式"><a href="#19，访问者模式" class="headerlink" title="19，访问者模式"></a>19，访问者模式</h1><h2 id="19-1-访问者模式的定义和特点"><a href="#19-1-访问者模式的定义和特点" class="headerlink" title="19.1 访问者模式的定义和特点"></a>19.1 访问者模式的定义和特点</h2><p>访问者（Visitor）模式的定义：<strong>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</strong>它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。</p>
<p><strong>访问者（Visitor）模式是一种对象行为型模式，其主要优点如下。</strong></p>
<ol>
<li>扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</li>
<li>复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。</li>
<li>灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。</li>
<li>符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。</li>
</ol>
<p><strong>访问者（Visitor）模式的主要缺点如下。</strong></p>
<ol>
<li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</li>
<li>破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。</li>
<li>违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。</li>
</ol>
<h2 id="19-2-访问者模式的结构与实现"><a href="#19-2-访问者模式的结构与实现" class="headerlink" title="19.2 访问者模式的结构与实现"></a>19.2 访问者模式的结构与实现</h2><h3 id="19-2-1-访问者模式的结构"><a href="#19-2-1-访问者模式的结构" class="headerlink" title="19.2.1 访问者模式的结构"></a>19.2.1 访问者模式的结构</h3><ol>
<li>抽象访问者（Visitor）角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit() ，该操作中的参数类型标识了被访问的具体元素。</li>
<li>具体访问者（ConcreteVisitor）角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。</li>
<li>抽象元素（Element）角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数。</li>
<li>具体元素（ConcreteElement）角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this) ，另外具体元素中可能还包含本身业务逻辑的相关操作。</li>
<li>对象结构（Object Structure）角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。</li>
</ol>
<h3 id="19-2-2-代码实现"><a href="#19-2-2-代码实现" class="headerlink" title="19.2.2 代码实现"></a>19.2.2 代码实现</h3><p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。</p>
<ul>
<li>访问者角色：给宠物喂食的人</li>
<li>具体访问者角色：主人、其他人</li>
<li>抽象元素角色：动物抽象类</li>
<li>具体元素角色：宠物狗、宠物猫</li>
<li>结构对象角色：主人家</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-00-33.png"></p>
<p><strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象访问者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//喂宠物狗</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">feed</span><span class="params">(Dog dog)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//喂宠物猫</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">feed</span><span class="params">(Cat cat)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Owner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Owner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体访问者角色 主人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Owner</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食宠物狗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食宠物猫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Someone</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Someone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体访问者角色 其他人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Someone</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食宠物狗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食宠物猫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Animal</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Animal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义抽象节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Person person)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Dog</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Dog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体节点 实现Animal接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        person.feed(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;真香~，汪汪汪！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cat</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Cat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        person.feed(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;真香~，喵喵喵！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Home</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Home</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义对象结构  主人的家</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Animal&gt; nodeList = <span class="keyword">new</span> ArrayList&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        nodeList.add(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aciton</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Animal node : nodeList) &#123;</span><br><span class="line">            node.accept(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.visitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 访问者模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/27 16:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Home home = <span class="keyword">new</span> Home();</span><br><span class="line">        home.add(<span class="keyword">new</span> Dog());</span><br><span class="line">        home.add(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">        Owner owner = <span class="keyword">new</span> Owner();</span><br><span class="line">        home.aciton(owner);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">        Someone someone = <span class="keyword">new</span> Someone();</span><br><span class="line">        home.aciton(someone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-23-25.png"></p>
<h2 id="19-3-扩展"><a href="#19-3-扩展" class="headerlink" title="19.3 扩展"></a>19.3 扩展</h2><p>访问者模式用到了一种双分派的技术。</p>
<p><strong>1，分派：</strong></p>
<p>变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的真实类型又叫做变量的实际类型。比如 <code>Map map = new HashMap()</code> ，map变量的静态类型是 <code>Map</code> ，实际类型是 <code>HashMap</code> 。根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派(Dispatch)又分为两种，即静态分派和动态分派。</p>
<p><strong>静态分派(Static Dispatch)</strong> 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。</p>
<p><strong>动态分派(Dynamic Dispatch)</strong> 发生在运行时期，动态分派动态地置换掉某个方法。Java通过方法的重写支持动态分派。</p>
<p><strong>2，动态分派：</strong></p>
<p>通过方法的重写支持动态分派。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.execute();</span><br><span class="line">        </span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        a1.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-27-14.png"></p>
<p>上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。</p>
<p>Java编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。</p>
<p><strong>3，静态分派：</strong></p>
<p>通过方法重载支持静态分派。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Execute</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Dog d)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Cat c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Dog();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">        Execute exe = <span class="keyword">new</span> Execute();</span><br><span class="line">        exe.execute(a);</span><br><span class="line">        exe.execute(a1);</span><br><span class="line">        exe.execute(a2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-29-35.png"></p>
<p>这个结果可能出乎一些人的意料了，为什么呢？</p>
<p><strong>重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。</strong></p>
<p><strong>4，双分派：</strong></p>
<p>所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别，还要根据参数的运行时区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Execute exe)</span> </span>&#123;</span><br><span class="line">        exe.execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Execute exe)</span> </span>&#123;</span><br><span class="line">        exe.execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Execute exe)</span> </span>&#123;</span><br><span class="line">        exe.execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Execute</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Dog d)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Cat c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        Animal d = <span class="keyword">new</span> Dog();</span><br><span class="line">        Animal c = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">        Execute exe = <span class="keyword">new</span> Execute();</span><br><span class="line">        a.accept(exe);</span><br><span class="line">        d.accept(exe);</span><br><span class="line">        c.accept(exe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面代码中，客户端将Execute对象做为参数传递给Animal类型的变量调用的方法，这里完成第一次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也<code>将自己this作为参数传递进去，这里就完成了第二次分派</code>，这里的Execute类中有多个重载的方法，而传递进行的是this，就是具体的实际类型的对象。</p>
<p>说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定，我们可以对上面的程序进行修改。</p>
<p>运行结果如下：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-29-35.png"></p>
<p><strong>双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动态的，所以重载就是动态的了。</strong></p>
<h1 id="20，迭代器模式"><a href="#20，迭代器模式" class="headerlink" title="20，迭代器模式"></a>20，迭代器模式</h1><h2 id="20-1-迭代器模式的定义和特点"><a href="#20-1-迭代器模式的定义和特点" class="headerlink" title="20.1 迭代器模式的定义和特点"></a>20.1 迭代器模式的定义和特点</h2><p>迭代器（Iterator）模式的定义：<strong>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</strong>迭代器模式是一种对象行为型模式，<strong>其主要优点如下</strong>。</p>
<ol>
<li>访问一个聚合对象的内容而无须暴露它的内部表示。</li>
<li>遍历任务交由迭代器完成，这简化了聚合类。</li>
<li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li>
<li>增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li>
<li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li>
</ol>
<p><strong>其主要缺点是：</strong></p>
<ul>
<li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li>
</ul>
<h2 id="20-2-迭代器模式的结构与实现"><a href="#20-2-迭代器模式的结构与实现" class="headerlink" title="20.2 迭代器模式的结构与实现"></a>20.2 迭代器模式的结构与实现</h2><h3 id="20-2-1-迭代器模式的结构"><a href="#20-2-1-迭代器模式的结构" class="headerlink" title="20.2.1 迭代器模式的结构"></a>20.2.1 迭代器模式的结构</h3><ol>
<li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li>
<li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li>
<li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、first()、next() 等方法。</li>
<li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li>
</ol>
<h3 id="20-2-2-代码实现"><a href="#20-2-2-代码实现" class="headerlink" title="20.2.2 代码实现"></a>20.2.2 代码实现</h3><p>定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-08-48.png"></p>
<p><strong>Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Student</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 学生类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, number=&#x27;&quot;</span> + number + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StudentIterator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StudentIterator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 迭代器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Student <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StudentIteratorImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StudentIteratorImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体的迭代器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentIteratorImpl</span> <span class="keyword">implements</span> <span class="title">StudentIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentIteratorImpl</span><span class="params">(List&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student currentStudent = list.get(position);</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> currentStudent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StudentAggregate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StudentAggregate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象容器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentAggregate</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加学生的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除学生的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取迭代器功能的对象</span></span><br><span class="line">    <span class="function">StudentIterator <span class="title">getStudentIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StudentAggregateImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StudentAggregateImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体的容器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAggregateImpl</span> <span class="keyword">implements</span> <span class="title">StudentAggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentIterator <span class="title">getStudentIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentIteratorImpl(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 迭代器模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 12:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentAggregateImpl aggregate = <span class="keyword">new</span> StudentAggregateImpl();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        aggregate.addStudent(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;001&quot;</span>));</span><br><span class="line">        aggregate.addStudent(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;002&quot;</span>));</span><br><span class="line">        aggregate.addStudent(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;003&quot;</span>));</span><br><span class="line">        aggregate.addStudent(<span class="keyword">new</span> Student(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;004&quot;</span>));</span><br><span class="line">        aggregate.addStudent(<span class="keyword">new</span> Student(<span class="string">&quot;田七&quot;</span>, <span class="string">&quot;005&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历聚合对象</span></span><br><span class="line">        StudentIterator iterator = aggregate.getStudentIterator();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Student student = iterator.next();</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-29-54.png"></p>
<h2 id="20-3-迭代器模式的应用场景"><a href="#20-3-迭代器模式的应用场景" class="headerlink" title="20.3 迭代器模式的应用场景"></a>20.3 迭代器模式的应用场景</h2><ul>
<li>当需要为聚合对象提供多种遍历方式时。</li>
<li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li>
<li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li>
</ul>
<h2 id="20-4-JDK源码解析"><a href="#20-4-JDK源码解析" class="headerlink" title="20.4 JDK源码解析"></a>20.4 JDK源码解析</h2><p>迭代器模式在JAVA的很多集合类中被广泛应用，接下来看看JAVA源码中是如何使用迭代器模式的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); <span class="comment">//list.iterator()方法返回的肯定是Iterator接口的子实现类对象</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看完这段代码是不是很熟悉，与我们上面代码基本类似。单列集合都使用到了迭代器，我们以ArrayList举例来说明</p>
<ul>
<li>List：抽象聚合类</li>
<li>ArrayList：具体的聚合类</li>
<li>Iterator：抽象迭代器</li>
<li>list.iterator()：返回的是实现了 <code>Iterator</code> 接口的具体迭代器对象</li>
</ul>
<p>具体的来看看 ArrayList的代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// 下一个要返回元素的索引</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// 上一个返回元素的索引</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//判断是否还有元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这部分代码还是比较简单，大致就是在 <code>iterator</code> 方法中返回了一个实例化的 <code>Iterator</code> 对象。Itr是一个内部类，它实现了 <code>Iterator</code> 接口并重写了其中的抽象方法。</p>
<blockquote>
<p>注意： </p>
<pre><code>当我们在使用JAVA开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现`java.util.Iterable`并实现其中的iterator()方法使其返回一个 `java.util.Iterator` 的实现类就可以了。
</code></pre>
</blockquote>
<h1 id="21，观察者模式"><a href="#21，观察者模式" class="headerlink" title="21，观察者模式"></a>21，观察者模式</h1><h2 id="21-1-观察者模式的定义和特点"><a href="#21-1-观察者模式的定义和特点" class="headerlink" title="21.1 观察者模式的定义和特点"></a>21.1 观察者模式的定义和特点</h2><p>观察者（Observer）模式的定义：<strong>指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</strong>这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p>
<p>观察者模式是一种对象行为型模式，<strong>其主要优点如下</strong>。</p>
<ol>
<li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。</li>
<li>目标与观察者之间建立了一套触发机制。</li>
</ol>
<p><strong>它的主要缺点如下。</strong></p>
<ol>
<li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li>
<li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li>
</ol>
<h2 id="21-2-观察者模式的结构与实现"><a href="#21-2-观察者模式的结构与实现" class="headerlink" title="21.2 观察者模式的结构与实现"></a>21.2 观察者模式的结构与实现</h2><p>实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用，否则将使两者之间紧密耦合起来，这违反了面向对象的设计原则</p>
<h3 id="21-2-1-观察者模式的结构"><a href="#21-2-1-观察者模式的结构" class="headerlink" title="21.2.1 观察者模式的结构"></a>21.2.1 观察者模式的结构</h3><ol>
<li>抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li>
<li>具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>
<li>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>
<li>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>
</ol>
<h3 id="21-2-1-代码实现"><a href="#21-2-1-代码实现" class="headerlink" title="21.2.1 代码实现"></a>21.2.1 代码实现</h3><p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-16-00.png"></p>
<p><strong>Observer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Observer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//更新的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String messages)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>WexinUser</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> WexinUser</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体观察者类 实现更新的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WexinUser</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WexinUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WexinUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String messages)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;--&gt;&quot;</span> + messages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Subject</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象主题类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加订阅者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除订阅者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知订阅者更新消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String messages)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SubscriptionSubject</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SubscriptionSubject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体主题(具体被观察者)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储订阅公众号的微信用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        weixinUserList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        weixinUserList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String messages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : weixinUserList) &#123;</span><br><span class="line">            observer.update(messages);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 观察者模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubscriptionSubject subject = <span class="keyword">new</span> SubscriptionSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建微信用户</span></span><br><span class="line">        WexinUser user1 = <span class="keyword">new</span> WexinUser(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        WexinUser user2 = <span class="keyword">new</span> WexinUser(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        WexinUser user3 = <span class="keyword">new</span> WexinUser(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅公众号</span></span><br><span class="line">        subject.attach(user1);</span><br><span class="line">        subject.attach(user2);</span><br><span class="line">        subject.attach(user3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过订阅用户</span></span><br><span class="line">        subject.notify(<span class="string">&quot;您关注的公众号更新啦~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-30-09.png"></p>
<h2 id="20-3-观察者模式应用场景"><a href="#20-3-观察者模式应用场景" class="headerlink" title="20.3 观察者模式应用场景"></a>20.3 观察者模式应用场景</h2><ol>
<li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li>
<li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</li>
<li>实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。</li>
<li>多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。</li>
</ol>
<h2 id="20-4-JDK源码解析-1"><a href="#20-4-JDK源码解析-1" class="headerlink" title="20.4 JDK源码解析"></a>20.4 JDK源码解析</h2><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p>
<p><strong>1，Observable类</strong></p>
<p>Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。</p>
<ul>
<li><p>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</p>
</li>
<li><p>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</p>
</li>
<li><p>void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为true时，notifyObservers() 才会通知观察者。</p>
</li>
</ul>
<p><strong>2，Observer 接口</strong></p>
<p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p>
<p>【例】警察抓小偷</p>
<p>警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：</p>
<p>小偷是一个被观察者，所以需要继承Observable类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer.observable_example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Thief</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 小偷类 继承Observable接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thief</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thief</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小偷：我偷东西，有没有人来抓我！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.setChanged();<span class="comment">//默认为true</span></span><br><span class="line">        <span class="keyword">super</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>警察是一个观察者，所以需要让其实现Observer接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer.observable_example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Policemen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 警察类 实现Observe类  实现update方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Policemen</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Policemen</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Policemen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;警察：&quot;</span> + ((Thief) o).getName() + <span class="string">&quot;你被我抓到了哈哈哈哈！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.observer.observable_example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 14:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//小偷对象</span></span><br><span class="line">        Thief thief = <span class="keyword">new</span> Thief(<span class="string">&quot;法外狂徒张三&quot;</span>);</span><br><span class="line">        <span class="comment">//警察对象</span></span><br><span class="line">        Policemen policemen = <span class="keyword">new</span> Policemen(<span class="string">&quot;小庄警察&quot;</span>);</span><br><span class="line">        <span class="comment">//警察盯着小偷</span></span><br><span class="line">        thief.addObserver(policemen);</span><br><span class="line">        <span class="comment">//小偷行窃</span></span><br><span class="line">        thief.steal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-30-19.png"></p>
<h1 id="22，中介者模式"><a href="#22，中介者模式" class="headerlink" title="22，中介者模式"></a>22，中介者模式</h1><p>一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象1发生变化，那么将会有4个对象受到影响。如果对象2发生变化，那么将会有5个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。</p>
<p>如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。</p>
<h2 id="22-1-中介者模式的定义和特点"><a href="#22-1-中介者模式的定义和特点" class="headerlink" title="22.1 中介者模式的定义和特点"></a>22.1 中介者模式的定义和特点</h2><p>中介者（Mediator）模式的定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p>
<p>中介者模式是一种对象行为型模式，其主要优点如下。</p>
<ol>
<li>类之间各司其职，符合迪米特法则。</li>
<li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li>
<li>将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展。</li>
</ol>
<p>其主要缺点是：中介者模式将原本多个对象直接的相互依赖变成了中介者和多个同事类的依赖关系。当同事类越多时，中介者就会越臃肿，变得复杂且难以维护。</p>
<h2 id="22-2-中介者模式的结构与实现"><a href="#22-2-中介者模式的结构与实现" class="headerlink" title="22.2 中介者模式的结构与实现"></a>22.2 中介者模式的结构与实现</h2><h3 id="22-2-1-中介者模式的结构"><a href="#22-2-1-中介者模式的结构" class="headerlink" title="22.2.1 中介者模式的结构"></a>22.2.1 中介者模式的结构</h3><ul>
<li>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li>
<li>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li>
<li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li>
<li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li>
</ul>
<h3 id="22-2-2-代码实现"><a href="#22-2-2-代码实现" class="headerlink" title="22.2.2 代码实现"></a>22.2.2 代码实现</h3><p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-24-04.png"></p>
<p><strong>Mediator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Mediator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象中介者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明一个联络方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message, Person person)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HouseOwner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HouseOwner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体同事类 房屋拥有者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseOwner</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseOwner</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        mediator.constact(message,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房主&quot;</span>+name+<span class="string">&quot;获取的信息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Tenant</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Tenant</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 具体同事类 承租人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tenant</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        mediator.constact(message,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租房者&quot;</span>+name+<span class="string">&quot;获取的信息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MediatorStructure</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MediatorStructure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 中介机构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorStructure</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中介结构必须知道所有房主和租房者的信息</span></span><br><span class="line">    <span class="keyword">private</span> HouseOwner houseOwner;</span><br><span class="line">    <span class="keyword">private</span> Tenant tenant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HouseOwner <span class="title">getHouseOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseOwner</span><span class="params">(HouseOwner houseOwner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseOwner = houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tenant <span class="title">getTenant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTenant</span><span class="params">(Tenant tenant)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tenant = tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message, Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person == houseOwner) &#123;</span><br><span class="line">            <span class="comment">//如果是房主，则租房者获得信息</span></span><br><span class="line">            tenant.getMessage(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之是房主获得信息</span></span><br><span class="line">            houseOwner.getMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 中介者模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/28 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房主 租房者 中介机构</span></span><br><span class="line">        MediatorStructure mediator = <span class="keyword">new</span> MediatorStructure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房主和租房者只需要知道中介机构即可</span></span><br><span class="line">        HouseOwner houseOwner = <span class="keyword">new</span> HouseOwner(<span class="string">&quot;张三&quot;</span>, mediator);</span><br><span class="line">        Tenant tenant = <span class="keyword">new</span> Tenant(<span class="string">&quot;李四&quot;</span>, mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中介机构需要知道房主和租房者</span></span><br><span class="line">        mediator.setHouseOwner(houseOwner);</span><br><span class="line">        mediator.setTenant(tenant);</span><br><span class="line"></span><br><span class="line">        tenant.constact(<span class="string">&quot;需要租一间房子&quot;</span>);</span><br><span class="line">        houseOwner.constact(<span class="string">&quot;我有一间房子，你要租吗？？？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-30-43.png"></p>
<h2 id="22-3-中介者模式应用场景"><a href="#22-3-中介者模式应用场景" class="headerlink" title="22.3 中介者模式应用场景"></a>22.3 中介者模式应用场景</h2><ul>
<li>当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。</li>
<li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li>
</ul>
<h2 id="22-4-中介者模式的注意事项和细节"><a href="#22-4-中介者模式的注意事项和细节" class="headerlink" title="22.4 中介者模式的注意事项和细节"></a>22.4 中介者模式的注意事项和细节</h2><ul>
<li>多个类相互耦合，会形成网状结构，使用中介者模式将网状结构分离为星型结构，进行解耦</li>
<li>减少类间依赖，降低了耦合，符合迪米特法则</li>
<li>中介者承担较多责任，出问题，系统会受到影响</li>
<li>设计不当，实际使用，特别注意</li>
</ul>
<h1 id="23，备忘录模式"><a href="#23，备忘录模式" class="headerlink" title="23，备忘录模式"></a>23，备忘录模式</h1><h2 id="23-1-中介者模式的定义和特点"><a href="#23-1-中介者模式的定义和特点" class="headerlink" title="23.1 中介者模式的定义和特点"></a>23.1 中介者模式的定义和特点</h2><p>备忘录（Memento）模式的定义：<strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</strong>该模式又叫快照模式。</p>
<p>备忘录模式是一种对象行为型模式，<strong>其主要优点如下。</strong></p>
<ul>
<li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li>
<li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li>
<li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li>
</ul>
<p><strong>其主要缺点是：</strong></p>
<ul>
<li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li>
</ul>
<h2 id="23-2-备忘录模式的结构与实现"><a href="#23-2-备忘录模式的结构与实现" class="headerlink" title="23.2 备忘录模式的结构与实现"></a>23.2 备忘录模式的结构与实现</h2><h3 id="23-2-1-备忘录模式的结构"><a href="#23-2-1-备忘录模式的结构" class="headerlink" title="23.2.1 备忘录模式的结构"></a>23.2.1 备忘录模式的结构</h3><ol>
<li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li>
<li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li>
<li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li>
<li>备忘录有两个等效的接口：<ul>
<li><strong>窄接口</strong>：管理者(Caretaker)对象（和其他发起人对象之外的任何对象）看到的是备忘录的窄接口(narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。</li>
<li><strong>宽接口</strong>：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口(wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。</li>
</ul>
</li>
</ol>
<h3 id="23-2-2-代码实现"><a href="#23-2-2-代码实现" class="headerlink" title="23.2.2 代码实现"></a>23.2.2 代码实现</h3><p>游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打Boss前和后一定会不一样的，我们允许玩家如果感觉与Boss决斗的效果不理想可以让游戏恢复到决斗之前的状态。</p>
<p>要实现上述案例，有两种方式：</p>
<ul>
<li>“白箱”备忘录模式</li>
<li>“黑箱”备忘录模式</li>
</ul>
<h4 id="23-2-2-1“白箱”备忘录模式"><a href="#23-2-2-1“白箱”备忘录模式" class="headerlink" title="23.2.2.1“白箱”备忘录模式"></a>23.2.2.1<strong>“白箱”备忘录模式</strong></h4><p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-34-20.png"></p>
<p><strong>GameRole</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.white_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> GameRole</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 游戏角色类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameRole</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;<span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> atk;<span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;<span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RoleStateMemento <span class="title">saveState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoleStateMemento(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复角色状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverState</span><span class="params">(RoleStateMemento roleStateMemento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="keyword">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="keyword">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力&quot;</span> + def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAtk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAtk</span><span class="params">(<span class="keyword">int</span> atk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>RoleStateMemento</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.white_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> RoleStateMemento</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 游戏状态存储类 备忘录类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateMemento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> atk;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleStateMemento</span><span class="params">(<span class="keyword">int</span> vit, <span class="keyword">int</span> atk, <span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">        <span class="keyword">this</span>.atk = atk;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAtk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAtk</span><span class="params">(<span class="keyword">int</span> atk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>RoleStateCaretaker</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.white_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> RoleStateCaretaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 角色状态管理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateCaretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RoleStateMemento roleStateMemento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RoleStateMemento <span class="title">getRoleStateMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleStateMemento</span><span class="params">(RoleStateMemento roleStateMemento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleStateMemento = roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.white_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 备忘录模式 白箱 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------大战Boss前------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        GameRole gameRole = <span class="keyword">new</span> GameRole();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        RoleStateCaretaker roleStateCaretaker = <span class="keyword">new</span> RoleStateCaretaker();</span><br><span class="line">        roleStateCaretaker.setRoleStateMemento(gameRole.saveState());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------大战Boss后------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss 损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------满血复活------------------------&quot;</span>);</span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getRoleStateMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-32-42.png"></p>
<h4 id="23-2-2-2黑箱备忘录模式"><a href="#23-2-2-2黑箱备忘录模式" class="headerlink" title="23.2.2.2黑箱备忘录模式"></a>23.2.2.2<strong>黑箱备忘录模式</strong></h4><p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重接口的办法就是将<strong>备忘录类</strong>设计成<strong>发起人类</strong>的内部成员类。</p>
<p>将 <code>RoleStateMemento</code> 设为 <code>GameRole</code> 的内部类，从而将 <code>RoleStateMemento</code> 对象封装在 <code>GameRole</code> 里面；在外面提供一个标识接口 <code>Memento</code> 给 <code>RoleStateCaretaker</code> 及其他对象使用。这样 <code>GameRole</code> 类看到的是 <code>RoleStateMemento</code> 所有的接口，而<code>RoleStateCaretaker</code> 及其他对象看到的仅仅是标识接口 <code>Memento</code> 所暴露出来的接口，从而维护了封装型。类图如下：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-30_23-39-26.png"></p>
<p><strong>GameRole</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.black_box;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.memento.white_box.RoleStateMemento;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> GameRole</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 游戏角色类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameRole</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;<span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> atk;<span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;<span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">saveState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoleStateMemento(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复角色状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverState</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        RoleStateMemento roleStateMemento = (RoleStateMemento) memento;</span><br><span class="line">        <span class="keyword">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="keyword">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="keyword">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力&quot;</span> + def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAtk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAtk</span><span class="params">(<span class="keyword">int</span> atk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在内部定义备忘录内部类 RoleStateMemento（该内部类设置为私有的）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateMemento</span> <span class="keyword">implements</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> atk;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> def;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RoleStateMemento</span><span class="params">(<span class="keyword">int</span> vit, <span class="keyword">int</span> atk, <span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.vit = vit;</span><br><span class="line">            <span class="keyword">this</span>.atk = atk;</span><br><span class="line">            <span class="keyword">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.vit = vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAtk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAtk</span><span class="params">(<span class="keyword">int</span> atk)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.atk = atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Memento</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.black_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Memento</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 窄接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>RoleStateCaretaker</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.black_box;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> RoleStateCaretaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 角色状态管理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateCaretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.memento.black_box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 备忘录模式 黑箱 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/29 10:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------大战Boss前------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        GameRole gameRole = <span class="keyword">new</span> GameRole();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        RoleStateCaretaker roleStateCaretaker = <span class="keyword">new</span> RoleStateCaretaker();</span><br><span class="line">        roleStateCaretaker.setMemento(gameRole.saveState());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------大战Boss后------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss 损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------满血复活------------------------&quot;</span>);</span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_08-32-54.png"></p>
<h2 id="23-3-备忘录模式应用场景"><a href="#23-3-备忘录模式应用场景" class="headerlink" title="23.3 备忘录模式应用场景"></a>23.3 备忘录模式应用场景</h2><ul>
<li>需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</li>
<li>需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</li>
</ul>
<h2 id="23-4-备忘录模式的注意事项和细节"><a href="#23-4-备忘录模式的注意事项和细节" class="headerlink" title="23.4 备忘录模式的注意事项和细节"></a>23.4 备忘录模式的注意事项和细节</h2><ul>
<li>给用户提供一种可以恢复的机制，可以使用户能够比较方便回到某个历史的状态</li>
<li>实现了信息的封装，使用户不需要关心保存细节</li>
<li>类成员变量过多，占用比较大的资源，每一次保存都会消耗一定内存</li>
</ul>
<h1 id="24，解释器模式"><a href="#24，解释器模式" class="headerlink" title="24，解释器模式"></a>24，解释器模式</h1><p>设计一个软件用来进行加减计算。我们第一想法就是使用工具类，提供对应的加法和减法的工具方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于两个整数相加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于两个整数相加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于n个整数相加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Integer ... arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer i : arr) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的形式比较单一、有限，如果形式变化非常多，这就不符合要求，因为加法和减法运算，两个运算符与数值可以有无限种组合方式。比如 1+2+3+4+5、1+2+3-4等等。   </p>
<p>显然，现在需要一种翻译识别机器，能够解析由数字以及 + - 符号构成的合法的运算序列。如果把运算符和数字都看作节点的话，能够逐个节点的进行读取解析运算，这就是解释器模式的思维。</p>
<h2 id="24-1-解释器模式的定义和特点"><a href="#24-1-解释器模式的定义和特点" class="headerlink" title="24.1 解释器模式的定义和特点"></a>24.1 解释器模式的定义和特点</h2><p>解释器（Interpreter）模式的定义：<strong>给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。</strong>也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文。</p>
<p>这里提到的文法和句子的概念同编译原理中的描述相同，“文法”指语言的语法规则，而“句子”是语言集中的元素。例如，汉语中的句子有很多，“我是中国人”是其中的一个句子，可以用一棵语法树来直观地描述语言中的句子。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_12-22-17.png"></p>
<p><strong>解释器模式是一种类行为型模式，其主要优点如下。</strong></p>
<ol>
<li>扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。</li>
<li>容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。</li>
</ol>
<p><strong>解释器模式的主要缺点如下。</strong></p>
<ol>
<li>执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦。</li>
<li>会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护。</li>
<li>可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到。</li>
</ol>
<h2 id="24-2-解释器模式的结构与实现"><a href="#24-2-解释器模式的结构与实现" class="headerlink" title="24.2 解释器模式的结构与实现"></a>24.2 解释器模式的结构与实现</h2><h3 id="24-2-1-解释器模式的结构"><a href="#24-2-1-解释器模式的结构" class="headerlink" title="24.2.1 解释器模式的结构"></a>24.2.1 解释器模式的结构</h3><ul>
<li>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。</li>
<li>终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</li>
<li>非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li>
<li>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</li>
<li>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li>
</ul>
<h3 id="24-2-2-代码实现"><a href="#24-2-2-代码实现" class="headerlink" title="24.2.2 代码实现"></a>24.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_12-22-58.png"></p>
<p><strong>AbstractExpression</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AbstractExpression</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Value</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 终结符表达式角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(value).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Plus</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Plus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 非终结符表达式角色 加法表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Plus</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) + right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + left.toString() + <span class="string">&quot; + &quot;</span> + right.toString() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Minus</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Minus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 非终结符表达式角色 减法表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Minus</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) - right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + left.toString() + <span class="string">&quot; - &quot;</span> + right.toString() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Variable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Variable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 终结符表达式角色 变量表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Variable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getValue(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Context</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 环境类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Variable, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Variable, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(Variable <span class="keyword">var</span>, Integer value)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="keyword">var</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(Variable <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        Integer value = map.get(<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 解释权模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line">        Variable a = <span class="keyword">new</span> Variable(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Variable b = <span class="keyword">new</span> Variable(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        Variable c = <span class="keyword">new</span> Variable(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Variable d = <span class="keyword">new</span> Variable(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        Variable e = <span class="keyword">new</span> Variable(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line">        context.assign(a, <span class="number">2</span>);</span><br><span class="line">        context.assign(b, <span class="number">3</span>);</span><br><span class="line">        context.assign(c, <span class="number">4</span>);</span><br><span class="line">        context.assign(d, <span class="number">5</span>);</span><br><span class="line">        context.assign(e, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        AbstractExpression expression = <span class="keyword">new</span> Minus(<span class="keyword">new</span> Plus(<span class="keyword">new</span> Plus(<span class="keyword">new</span> Plus(a, b), c), d), e);</span><br><span class="line"></span><br><span class="line">        System.out.println(expression + <span class="string">&quot;=&quot;</span> + expression.interpret(context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_09-59-41.png"></p>
<h2 id="24-3-解释器模式使用场景"><a href="#24-3-解释器模式使用场景" class="headerlink" title="24.3 解释器模式使用场景"></a>24.3 解释器模式使用场景</h2><ul>
<li>当语言的文法较为简单，且执行效率不是关键问题时。</li>
<li>当问题重复出现，且可以用一种简单的语言来进行表达时。</li>
<li>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。</li>
</ul>
<h1 id="25，状态模式"><a href="#25，状态模式" class="headerlink" title="25，状态模式"></a>25，状态模式</h1><h2 id="25-1-状态模式的定义和特点"><a href="#25-1-状态模式的定义和特点" class="headerlink" title="25.1 状态模式的定义和特点"></a>25.1 状态模式的定义和特点</h2><p>状态（State）模式的定义：<strong>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</strong></p>
<p><strong>状态模式是一种对象行为型模式，其主要优点如下。</strong></p>
<ol>
<li>结构清晰，状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足“单一职责原则”。</li>
<li>将状态转换显示化，减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖。</li>
<li>状态类职责明确，有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换。</li>
</ol>
<p><strong>状态模式的主要缺点如下。</strong></p>
<ol>
<li>状态模式的使用必然会增加系统的类与对象的个数。</li>
<li>状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。</li>
<li>状态模式对开闭原则的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源码，否则无法切换到新增状态，而且修改某个状态类的行为也需要修改对应类的源码。</li>
</ol>
<h2 id="25-2-状态模式的结构与实现"><a href="#25-2-状态模式的结构与实现" class="headerlink" title="25.2 状态模式的结构与实现"></a>25.2 状态模式的结构与实现</h2><p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_12-31-24.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILift</span> </span>&#123;</span><br><span class="line">    <span class="comment">//电梯的4个状态</span></span><br><span class="line">    <span class="comment">//开门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> OPENING_STATE = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//关门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLOSING_STATE = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//运行状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RUNNING_STATE = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//停止状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STOPPING_STATE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置电梯的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯的动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lift</span> <span class="keyword">implements</span> <span class="title">ILift</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行关门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯关门了。。。&quot;</span>);<span class="comment">//只有开门状态可以关闭电梯门，可以对应电梯状态表来看</span></span><br><span class="line">                <span class="keyword">this</span>.setState(CLOSING_STATE);<span class="comment">//关门之后电梯就是关闭状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //已经是关门状态，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //运行时电梯门是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //停止时电梯也是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行开门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//门已经开了，不能再开门了</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门状态，门打开:</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门打开了。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 运行时电梯不能开门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门开了。。。&quot;</span>);<span class="comment">//电梯停了，可以开门了</span></span><br><span class="line">                <span class="keyword">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行运行动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//电梯不能开着门就走</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//门关了，可以运行了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.setState(RUNNING_STATE);<span class="comment">//现在是运行状态</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 已经是运行状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.setState(RUNNING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行停止动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE: <span class="comment">//开门的电梯已经是是停止的了(正常情况下)</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门时才可以停止</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:<span class="comment">//运行时当然可以停止了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lift lift = <span class="keyword">new</span> Lift();</span><br><span class="line">        lift.setState(ILift.STOPPING_STATE);<span class="comment">//电梯是停止的</span></span><br><span class="line">        lift.open();<span class="comment">//开门</span></span><br><span class="line">        lift.close();<span class="comment">//关门</span></span><br><span class="line">        lift.run();<span class="comment">//运行</span></span><br><span class="line">        lift.stop();<span class="comment">//停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_10-46-54.png"></p>
<p><strong>问题分析</strong></p>
<ul>
<li>使用了大量的switch…case这样的判断（if…else也是一样)，使程序的可阅读性变差。</li>
<li>扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑</li>
</ul>
<h3 id="25-2-1-状态模式的结构"><a href="#25-2-1-状态模式的结构" class="headerlink" title="25.2.1 状态模式的结构"></a>25.2.1 状态模式的结构</h3><ul>
<li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li>
<li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li>
<li>具体状态（Concrete State）角色：实现抽象状态所对应的行为。</li>
</ul>
<h3 id="25-2-2-代码实现"><a href="#25-2-2-代码实现" class="headerlink" title="25.2.2 代码实现"></a>25.2.2 代码实现</h3><p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_12-33-29.png"></p>
<p><strong>LiftState</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> LiftState</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 抽象状态类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftState</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个环境角色，也就是封装状态的变化引起的功能变化</span></span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯开门动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯关门动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯运行动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯停止动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Context</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义所有电梯门状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义出所有的电梯状态</span></span><br><span class="line">    <span class="comment">//开门状态，这时候电梯只能关闭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> OpeningState OPENNING_STATE = <span class="keyword">new</span> OpeningState();</span><br><span class="line">    <span class="comment">//关闭状态，这时候电梯可以运行、停止和开门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> ClosingState CLOSEING_STATE = <span class="keyword">new</span> ClosingState();</span><br><span class="line">    <span class="comment">//运行状态，这时候电梯只能停止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> RunningState RUNNING_STATE = <span class="keyword">new</span> RunningState();</span><br><span class="line">    <span class="comment">//停止状态，这时候电梯可以开门、运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> StoppingState STOPPING_STATE = <span class="keyword">new</span> StoppingState();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个当前电梯状态</span></span><br><span class="line">    <span class="keyword">private</span> LiftState liftState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiftState <span class="title">getLiftState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.liftState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLiftState</span><span class="params">(LiftState liftState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前环境改变</span></span><br><span class="line">        <span class="keyword">this</span>.liftState = liftState;</span><br><span class="line">        <span class="comment">//把当前的环境通知到各个实现类中</span></span><br><span class="line">        <span class="keyword">this</span>.liftState.setContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liftState.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liftState.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liftState.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liftState.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OpeningState</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> OpeningState</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 开启状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpeningState</span> <span class="keyword">extends</span> <span class="title">LiftState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启当然可以关闭了，我就想测试一下电梯门开关功能</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门开启...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.CLOSEING_STATE);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="keyword">super</span>.context.getLiftState().close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门不能开着就跑，这里什么也不做</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开门状态已经是停止的了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ClosingState</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ClosingState</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 关闭状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosingState</span> <span class="keyword">extends</span> <span class="title">LiftState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//电梯门关闭，这是关闭状态要实现的动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了再打开，逗你玩呢，那这个允许呀</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.OPENNING_STATE);</span><br><span class="line">        <span class="keyword">super</span>.context.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了就跑，这是再正常不过了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.RUNNING_STATE);</span><br><span class="line">        <span class="keyword">super</span>.context.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关着，我就不按楼层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.STOPPING_STATE);</span><br><span class="line">        <span class="keyword">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>RunningState</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> RunningState</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 运行状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunningState</span> <span class="keyword">extends</span> <span class="title">LiftState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯正在运行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//停止</span></span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.OPENNING_STATE);</span><br><span class="line">        <span class="keyword">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StoppingState</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StoppingState</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 停止状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoppingState</span> <span class="keyword">extends</span> <span class="title">LiftState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.OPENNING_STATE);</span><br><span class="line">        <span class="comment">//动作委托给CloseState来执行 也就是委托给了ClosingState子类执行动作</span></span><br><span class="line">        <span class="keyword">super</span>.context.getLiftState().open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.CLOSEING_STATE);</span><br><span class="line">        <span class="comment">//动作委托给CloseState来执行 也就是委托给了ClosingState子类执行动作</span></span><br><span class="line">        <span class="keyword">super</span>.context.getLiftState().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="keyword">super</span>.context.setLiftState(Context.RUNNING_STATE);</span><br><span class="line">        <span class="comment">//动作委托给CloseState来执行 也就是委托给了ClosingState子类执行动作</span></span><br><span class="line">        <span class="keyword">super</span>.context.getLiftState().run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯停止了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.state.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 状态模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 10:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开门状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开门状态--&gt;&quot;</span>);</span><br><span class="line">        Context context1 = <span class="keyword">new</span> Context();</span><br><span class="line">        context1.setLiftState(<span class="keyword">new</span> OpeningState());</span><br><span class="line">        context1.open();</span><br><span class="line">        context1.close();</span><br><span class="line">        context1.run();</span><br><span class="line">        context1.stop();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="comment">//关门状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;关门状态--&gt;&quot;</span>);</span><br><span class="line">        Context context2 = <span class="keyword">new</span> Context();</span><br><span class="line">        context2.setLiftState(<span class="keyword">new</span> ClosingState());</span><br><span class="line">        context2.open();</span><br><span class="line">        context2.close();</span><br><span class="line">        context2.run();</span><br><span class="line">        context2.stop();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="comment">//运行状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;运行状态--&gt;&quot;</span>);</span><br><span class="line">        Context context3 = <span class="keyword">new</span> Context();</span><br><span class="line">        context3.setLiftState(<span class="keyword">new</span> RunningState());</span><br><span class="line">        context3.open();</span><br><span class="line">        context3.close();</span><br><span class="line">        context3.run();</span><br><span class="line">        context3.stop();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="comment">//停止状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;停止状态--&gt;&quot;</span>);</span><br><span class="line">        Context context4 = <span class="keyword">new</span> Context();</span><br><span class="line">        context4.setLiftState(<span class="keyword">new</span> StoppingState());</span><br><span class="line">        context4.open();</span><br><span class="line">        context4.close();</span><br><span class="line">        context4.run();</span><br><span class="line">        context4.stop();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_12-17-58.png"></p>
<h2 id="25-3-状态模式应用场景"><a href="#25-3-状态模式应用场景" class="headerlink" title="25.3 状态模式应用场景"></a>25.3 状态模式应用场景</h2><ul>
<li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。</li>
<li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li>
</ul>
<h1 id="26，策略模式"><a href="#26，策略模式" class="headerlink" title="26，策略模式"></a>26，策略模式</h1><h2 id="26-1-策略模式的定义和特点"><a href="#26-1-策略模式的定义和特点" class="headerlink" title="26.1 策略模式的定义和特点"></a>26.1 策略模式的定义和特点</h2><p>策略（Strategy）模式的定义：<strong>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。</strong>策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p>
<p><strong>策略模式的主要优点如下。</strong></p>
<ol>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if…else 语句、switch…case 语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ol>
<p><strong>其主要缺点如下。</strong></p>
<ol>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类，增加维护难度。</li>
</ol>
<h2 id="26-2-策略模式的结构与实现"><a href="#26-2-策略模式的结构与实现" class="headerlink" title="26.2 策略模式的结构与实现"></a>26.2 策略模式的结构与实现</h2><h3 id="26-2-1-策略模式的结构"><a href="#26-2-1-策略模式的结构" class="headerlink" title="26.2 .1 策略模式的结构"></a>26.2 .1 策略模式的结构</h3><ol>
<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>
<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>
</ol>
<h3 id="26-2-2-代码实现"><a href="#26-2-2-代码实现" class="headerlink" title="26.2.2 代码实现"></a>26.2.2 代码实现</h3><p>针对不同节日不同的促销活动</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_17-39-00.png"></p>
<p><strong>Strategy</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义共同接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StrategyA</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StrategyA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义具体策略角色 每个节日的具体促销活动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A促销 买一送一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StrategyB</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StrategyB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义具体策略角色 每个节日的具体促销活动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B促销 满100减20&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StrategyC</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StrategyC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义具体策略角色 每个节日的具体促销活动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyC</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C促销 满500元可兑换小礼品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SalesMan</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SalesMan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义环境角色 用于连接上下文 把促销活动推销给顾客</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有抽象策略角色的引用</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SalesMan</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示促销活动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">salesManShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 策略模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 15:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SalesMan salesMan = <span class="keyword">new</span> SalesMan(<span class="keyword">new</span> StrategyA());</span><br><span class="line">        <span class="comment">//儿童节</span></span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="comment">//劳动节</span></span><br><span class="line">        salesMan.setStrategy(<span class="keyword">new</span> StrategyB());</span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="comment">//端午节</span></span><br><span class="line">        salesMan.setStrategy(<span class="keyword">new</span> StrategyC());</span><br><span class="line">        salesMan.salesManShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_15-37-23.png"></p>
<h2 id="26-3-策略模式应用场景"><a href="#26-3-策略模式应用场景" class="headerlink" title="26.3 策略模式应用场景"></a>26.3 策略模式应用场景</h2><ul>
<li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li>
<li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li>
<li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li>
<li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li>
<li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li>
</ul>
<h2 id="26-4-JDK源码解析"><a href="#26-4-JDK源码解析" class="headerlink" title="26.4 JDK源码解析"></a>26.4 JDK源码解析</h2><p><code>Comparator</code> 中的策略模式。在Arrays类中有一个 <code>sort()</code> 方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrays</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sort(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">                legacyMergeSort(a, c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Arrays就是一个环境角色类，这个sort方法可以传一个新策略让Arrays根据这个策略来进行排序。就比如下面的测试类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 实现降序排序</span></span><br><span class="line">        Arrays.sort(data, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(data)); <span class="comment">//[12, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们在调用Arrays的sort方法时，第二个参数传递的是Comparator接口的子实现类对象。所以Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays类的sort方法到底有没有使用Comparator子实现类中的 <code>compare()</code> 方法吗？让我们继续查看TimSort类的 <code>sort()</code> 方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, Comparator&lt;? <span class="keyword">super</span> T&gt; c,</span></span></span><br><span class="line"><span class="function"><span class="params">                         T[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="keyword">null</span> &amp;&amp; a != <span class="keyword">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nRemaining  = hi - lo;</span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If array is small, do a &quot;mini-TimSort&quot; with no merges</span></span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">            <span class="keyword">int</span> initRunLen = countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">int</span> <span class="title">countRunAndMakeAscending</span><span class="params">(T[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi,Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> lo &lt; hi;</span><br><span class="line">        <span class="keyword">int</span> runHi = lo + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (runHi == hi)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find end of run, and reverse range if descending</span></span><br><span class="line">        <span class="keyword">if</span> (c.compare(a[runHi++], a[lo]) &lt; <span class="number">0</span>) &#123; <span class="comment">// Descending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">            reverseRange(a, lo, runHi);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                              <span class="comment">// Ascending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> runHi - lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中最终会跑到 <code>countRunAndMakeAscending()</code> 这个方法中。我们可以看见，只用了compare方法，所以在调用Arrays.sort方法只传具体compare重写方法的类对象就行，这也是Comparator接口中必须要子类实现的一个方法。</p>
<h1 id="27，责任链模式"><a href="#27，责任链模式" class="headerlink" title="27，责任链模式"></a>27，责任链模式</h1><h2 id="27-1-责任链模式的定义和特点"><a href="#27-1-责任链模式的定义和特点" class="headerlink" title="27.1 责任链模式的定义和特点"></a>27.1 责任链模式的定义和特点</h2><p>责任链（Chain of Responsibility）模式的定义：<strong>为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</strong></p>
<p>注意：责任链模式也叫职责链模式。</p>
<p>在责任链模式中，客户只需要将请求发送到责任链上即可，无须关心请求的处理细节和请求的传递过程，请求会自动进行传递。所以责任链将请求的发送者和请求的处理者解耦了。</p>
<p><strong>责任链模式是一种对象行为型模式，其主要优点如下。</strong></p>
<ol>
<li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li>
<li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li>
<li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li>
<li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。</li>
<li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li>
</ol>
<p><strong>其主要缺点如下。</strong></p>
<ol>
<li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li>
<li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li>
<li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li>
</ol>
<h2 id="27-2-责任链模式的结构与实现"><a href="#27-2-责任链模式的结构与实现" class="headerlink" title="27.2 责任链模式的结构与实现"></a>27.2 责任链模式的结构与实现</h2><h3 id="27-2-1-责任链模式的结构"><a href="#27-2-1-责任链模式的结构" class="headerlink" title="27.2.1 责任链模式的结构"></a>27.2.1 责任链模式的结构</h3><ol>
<li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li>
<li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li>
<li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li>
</ol>
<h3 id="27-2-1-代码实现"><a href="#27-2-1-代码实现" class="headerlink" title="27.2.1 代码实现"></a>27.2.1 代码实现</h3><p>开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假1天到3天的假还需要部门经理同意；请求3天到7天还需要总经理同意才行</p>
<p><strong>关系类图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_17-45-53.png"></p>
<p><strong>LeaveRequest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> LeaveRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 请假条</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 请假天数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">// 请假内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LeaveRequest</span><span class="params">(String name, <span class="keyword">int</span> num, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Handler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_ONE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_THREE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_SEVEN = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该领导处理的请假天数区间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numEnd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//领导上还有领导</span></span><br><span class="line">    <span class="keyword">private</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">int</span> numStart)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numStart = numStart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">int</span> numStart, <span class="keyword">int</span> numEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numStart = numStart;</span><br><span class="line">        <span class="keyword">this</span>.numEnd = numEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置上级领导</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(Handler nextHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextHandler = nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交请假条</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(LeaveRequest leaveRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.numStart == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//请假天数达到领导处理要求</span></span><br><span class="line">        <span class="keyword">if</span> (leaveRequest.getNum() &gt;= <span class="keyword">this</span>.numStart) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleLeave(leaveRequest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果还有上级 并且请假天数超过当前领导的处理范围</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nextHandler != <span class="keyword">null</span> &amp;&amp; leaveRequest.getNum() &gt; numEnd) &#123;</span><br><span class="line">                <span class="comment">//继续提交</span></span><br><span class="line">                <span class="keyword">this</span>.nextHandler.submit(leaveRequest);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流程结束！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//各级领导处理请假条方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleLeave</span><span class="params">(LeaveRequest leave)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>GroupLeader</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> GroupLeader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 小组长类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupLeader</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1-3天的假</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Handler.NUM_ONE, Handler.NUM_THREE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLeave</span><span class="params">(LeaveRequest leave)</span> </span>&#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天，&quot;</span> + leave.getContent() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小组长审批通过：同意！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Manager</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Manager</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 部门经理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3-7天的假</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Handler.NUM_THREE, Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLeave</span><span class="params">(LeaveRequest leave)</span> </span>&#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天，&quot;</span> + leave.getContent() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;部门经理审批通过：同意！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>GeneralManager</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> GeneralManager</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 总经理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="comment">//7天以上的假</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Handler.NUM_THREE, Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLeave</span><span class="params">(LeaveRequest leave)</span> </span>&#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天，&quot;</span> + leave.getContent() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总经理审批通过：同意！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.responsibility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 责任链模式 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/31 16:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请假条</span></span><br><span class="line">        LeaveRequest leave = <span class="keyword">new</span> LeaveRequest(<span class="string">&quot;小庄&quot;</span>, <span class="number">3</span>, <span class="string">&quot;出去旅游&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//各位领导</span></span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        GroupLeader groupLeader = <span class="keyword">new</span> GroupLeader();</span><br><span class="line">        GeneralManager generalManager = <span class="keyword">new</span> GeneralManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        小组长上司是经理 经理上司是总经理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        groupLeader.setNextHandler(manager);</span><br><span class="line">        manager.setNextHandler(generalManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        groupLeader.submit(leave);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FSnipaste_2021-03-31_16-50-58.png"></p>
<h2 id="27-3-责任链模式的应用场景"><a href="#27-3-责任链模式的应用场景" class="headerlink" title="27.3 责任链模式的应用场景"></a>27.3 责任链模式的应用场景</h2><ol>
<li>多个对象可以处理一个请求，但具体由哪个对象处理该请求在运行时自动确定。</li>
<li>可动态指定一组对象处理请求，或添加新的处理者。</li>
<li>需要在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap集合</title>
    <url>/2021/04/09/HashMap%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="HashMap集合-入门"><a href="#HashMap集合-入门" class="headerlink" title="HashMap集合(入门)"></a>HashMap集合(入门)</h1><p><strong>学习地址：<a href="https://www.bilibili.com/video/BV1nJ411J7AA">https://www.bilibili.com/video/BV1nJ411J7AA</a></strong><br><strong>个人博客地址：<a href="https://itkxz.cn/">https://itkxz.cn</a></strong></p>
<h2 id="1-什么是HashMap"><a href="#1-什么是HashMap" class="headerlink" title="1.什么是HashMap"></a>1.什么是HashMap</h2><ul>
<li><p>HashMap 与 HashSet 一样，不保证存储的顺序，因为底层是以 hash 表的方式存储的；</p>
</li>
<li><p>HashMap 底层存储结构为 数组 + 链表+红黑树 （Java 8）；</p>
</li>
<li><p>HashMap 存储的 key-value 数据类型为 HashMap$Node 类型，该类型实现了 Map$Entry 接口；</p>
</li>
<li><p>HashMap 没有实现同步，因此是线程不安全的；</p>
</li>
</ul>
<h2 id="2-HashMap中常用的变量-常量"><a href="#2-HashMap中常用的变量-常量" class="headerlink" title="2. HashMap中常用的变量/常量"></a>2. HashMap中常用的变量/常量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// 默认的 table 数组容量 aka 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;  <span class="comment">// 默认加载因子为 0.75</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">// 集合最大容量的上限是：2的30次幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; <span class="comment">// 链表树化临界值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>; <span class="comment">// 树转成链表的临界值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>; <span class="comment">// 树化时数组的最小长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;  <span class="comment">// 存放元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;  <span class="comment">// 存放元素的缓存</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;  <span class="comment">// HashMap 中实际元素个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;  <span class="comment">// HashMap 修改次数，每个扩容和更改map结构的计数器</span></span><br><span class="line"><span class="keyword">int</span> threshold;  <span class="comment">// table 扩容临界值 数组长度 * 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;  <span class="comment">// table 加载因子</span></span><br></pre></td></tr></table></figure>



<h2 id="3-初始化及扩容机制"><a href="#3-初始化及扩容机制" class="headerlink" title="3.初始化及扩容机制"></a>3.初始化及扩容机制</h2><ul>
<li>HashMap 是用一个 Node 类型的数组 table 来存储元素的，每一个元素的类型为 Node；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 HashMap 对象时，数组 table 默认为 null，加载因子 loadfactor 默认为 0.75；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一次添加元素时，判断 table 为空数组，默认将 table 扩容到 16，阈值 threshold 为数组长度与加载因子的积 12（resize() 方法）；</p>
</li>
<li><p>当添加元素 key-value 时，通过 key 的 hash 值计算该元素在 table 中的索引位置，判断该索引位置是否存在 Node 结点，没有则直接添加；</p>
</li>
<li><p>如果索引位置有结点，则判断要添加的元素的 key 与该节点的 key 是否相同，如果相同，则将 value 替换到当前结点，如果不相同，则判断当前结点是否是树结构，是树结构则执行添加树结点操作；</p>
</li>
<li><p>如果不是，判断为链表结构，且要添加的元素和链表第一个结点不同，遍历链表判断 key 是否存在，不存在则向链表插入元素，并判断当前链表是否满足树化条件（链表长度大于等于8），如果存在执行替换操作；</p>
</li>
<li><p>当 table 长度达到阈值 threshold 时，则执行 resize() 方法给 table 进行扩容，扩容大小为原来的 2 倍，同时阈值更新为当前数组长度乘以加载因子；</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// putVal() 添加元素成功,table长度加1, 判断是否扩容</span></span><br><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当 table 某个节点的链表长度超过 TREEIFY_THRESHOLD（默认 8）后，判断 table 的容量是否达到 MIN_TREEIFY_CAPACITY（默认 64），达到则对当前结点的链表进行树化；否则对 table 扩容；</p>
</li>
<li><p>当树的元素减少到 UNTREEIFY_THRESHOLD = 6 时，会进行剪枝操作（转回链表）</p>
</li>
</ul>
<h2 id="3-阿里巴巴编码规约-初始化指定容量"><a href="#3-阿里巴巴编码规约-初始化指定容量" class="headerlink" title="3. 阿里巴巴编码规约-初始化指定容量"></a>3. 阿里巴巴编码规约-初始化指定容量</h2><p>【推荐】集合初始化时，指定集合初始值大小。</p>
<p>说明：HashMap 使用 HashMap(int initialCapacity) 初始化。</p>
<p>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。</p>
<p>注意负载因子（即 loader factor）默认 为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</p>
<p>反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被 迫扩大，resize 需要重建 hash 表，严重影响性能</p>
<h2 id="4-主要源码及常用方法分析"><a href="#4-主要源码及常用方法分析" class="headerlink" title="4. 主要源码及常用方法分析"></a>4. 主要源码及常用方法分析</h2><h3 id="4-1-HashMap构造器"><a href="#4-1-HashMap构造器" class="headerlink" title="4.1 HashMap构造器"></a>4.1 HashMap构造器</h3><p> 1.无参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>指定初始容量的构造器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>指定初始容量和加载因子的构造器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>) <span class="comment">// 异常:初始容量小于0 </span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="comment">// 指定容量大于数组最大容量,初始化为最大容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) <span class="comment">// 异常:加载因子小于0 or NaN Not a Number</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;  <span class="comment">// 指定加载因子大小</span></span><br><span class="line">    <span class="comment">// 计算 table 的大小,确保为2的n次幂,</span></span><br><span class="line">    <span class="comment">// 这里赋值给临界值,在第一次添加元素的时候会初始化为table大小</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-putVal-添加元素的方法"><a href="#4-2-putVal-添加元素的方法" class="headerlink" title="4.2 putVal()-添加元素的方法"></a>4.2 putVal()-添加元素的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;  <span class="comment">// 定义辅助变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 0. 这里是判断table是否初始化，table = null or table.length = 0 初始化table</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">// table:存放元素的Node[]数组</span></span><br><span class="line">        n = (tab = resize()).length;  <span class="comment">// resize():扩容-数组为空给table初始化16个空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据key的hash值计算索引值,将table中该索引位置的结点赋值给p,并判断p是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//若p为null(当前位置没有元素)则创建新的结点Node保存当前要添加的数据,存储到当前索引位置</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里说明table当前索引位置的结点已经存在数据，下面分情况判断添加元素</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 1. 判断要添加的元素(key)与table中当前索引位置的Node结点是否相同</span></span><br><span class="line">		<span class="comment">// condition: ① hash 值相等 &amp;&amp; (② 引用相同 || ③ equals判断相等)</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p; <span class="comment">// 元素重复</span></span><br><span class="line">        <span class="comment">// 2. 判断当前索引位置元素结点是否是红黑树类型</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 3. 说明当前索引位置结点为链表,且第一个结点与要添加的元素key不同,就遍历链表判断key是否存在</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果key和链表中所有节点元素都不相同，则添加到链表最后</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 添加元素后判断当前链表是否已经有了8个节点，够8个则将当前链表转成红黑树</span></span><br><span class="line">                    <span class="comment">// 这里调用treeifyBin()方法会判断table大小是否足够64个，到达64个才会树化</span></span><br><span class="line">                    <span class="comment">// 不满 64 个空间，会先给 table 扩容</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 退出 for 循环</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果要添加的元素key在链表中已经存在，则直接退出循环</span></span><br><span class="line">				<span class="comment">// condition: ① hash 值相等 &amp;&amp; (② 引用相同 || ③ equals判断相等)</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e; <span class="comment">// 当前节点后移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 要添加的元素 key 已存在，则将重复的元素返回</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// 将要添加的 value 替换掉旧值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount; <span class="comment">// 修改次数</span></span><br><span class="line">    <span class="comment">// 添加元素成功,table长度加1, 判断是否扩容 数组长度是否大于阈值</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict); <span class="comment">// HashMap 没有实现该方法, 供子类实现扩充功能</span></span><br><span class="line">    <span class="comment">// return null 表示要添加的元素在table中不存在, 添加成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-resize-集合扩容"><a href="#4-3-resize-集合扩容" class="headerlink" title="4.3 resize()-集合扩容"></a>4.3 resize()-集合扩容</h3><p>给 table 初始化或者将数组大小翻倍，如果 table 为null，则根据默认值指定初始容量和边界值；否则，因为我们的 table 数组容量是 2 的 n 次幂，所以每个 bin 中的元素一定保持相同的索引，或者在新 table 中移动 2 的 n 次幂的偏移量（元素在新数组中的索引位置为 原来的索引 或者是 原来的索引 + 原容量大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table; <span class="comment">// 保存之前数组元素</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length; <span class="comment">// 保存旧容量</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold; <span class="comment">// 保存旧临界值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; <span class="comment">// 将新容量和新边界值扩大为原来2倍(&lt;&lt;1 == *2)</span></span><br><span class="line">        <span class="comment">// 旧容量已经到达最大容量就扩大临界值</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123; </span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将容量和临界值扩大2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; </span><br><span class="line">                 		   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将旧临界值赋值给新容量，这里的场景为初始化时使用了带参数的构造器-tableSizeFor()</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 数组初始化</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里也是初始化指定容量大小的场景，临界值赋值给容量，这里给临界值重新计算值</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;  <span class="comment">// table 边界值更新为新的边界值</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// 创建新 table 容量为默认初始容量或之前容量的2倍</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 原数组不为null，说明是扩容-遍历之前的table 赋值给新数组</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123; <span class="comment">// 当前索引存在元素 e</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>; <span class="comment">// 方便回收空间</span></span><br><span class="line">                <span class="comment">// 1. 当前索引位置只有一个元素，没有下一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>) </span><br><span class="line">                    <span class="comment">// 重新计算当前元素在新table中的索引，将当前索引结点放到新table</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e; </span><br><span class="line">                <span class="comment">// 2. 当前索引位置有下一个结点，且是红黑树,指定树的操作</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) </span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">// 3. 当前索引位置有下一个结点，这里是链表类型</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 依次遍历链表结点，确定新数组索引位置</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next; <span class="comment">// 取出下一个节点</span></span><br><span class="line">                        <span class="comment">// 判断当前元素在新数组的索引是否改变</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; <span class="comment">// 不改变还是原来的索引位置</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;  <span class="comment">// 改变，新索引 = 旧索引 + 旧容量</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123; <span class="comment">// 存放到之前索引位置</span></span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123; <span class="comment">// 存放到(之前索引+旧容量)的位置</span></span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-treeifyBin-树化"><a href="#4-4-treeifyBin-树化" class="headerlink" title="4.4 treeifyBin() - 树化"></a>4.4 treeifyBin() - 树化</h3><p>树化-将数组中的链表转成红黑树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 树化判断，table 数组的长度是否大于等于 64，未达到则进行数组扩容</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 判断当前索引位置结点不为null</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>; <span class="comment">// 头尾节点</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">             <span class="comment">// 将链表结点转换为树结点类型 TreeNode</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p; <span class="comment">// 给头节点赋值为当前索引结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">// 将树结点连接起来</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;  <span class="comment">// 给尾结点赋值</span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>); <span class="comment">// 链表结点后移</span></span><br><span class="line">        <span class="comment">// 将树的头节点放在数组的当前索引位置，然后转换成红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For treeifyBin</span></span><br><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-remove-删除集合中的元素"><a href="#4-5-remove-删除集合中的元素" class="headerlink" title="4.5 remove()-删除集合中的元素"></a>4.5 remove()-删除集合中的元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index; <span class="comment">// 辅助变量</span></span><br><span class="line">    <span class="comment">// table 不为空，且指定key的hash计算的索引位置有元素</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v; <span class="comment">// 辅助变量</span></span><br><span class="line">        <span class="comment">// 1 判断要删除的元素是否是指定索引链表的第一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; </span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="comment">// 2 不是第一个元素，判断链表是否还有其他元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.1 有其他元素且为树结点</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 2.2 有其他元素，为链表结构</span></span><br><span class="line">                <span class="keyword">do</span> &#123; <span class="comment">// 遍历链表，依次判断要删除的元素的位置</span></span><br><span class="line">                    <span class="comment">// 根据hash、key的值找到要删除的元素</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">// 找到，退出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e; <span class="comment">// p 是要删除节点的上一个节点</span></span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到元素，执行删除操作</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 树结点删除</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p) <span class="comment">// 链表只有一个元素删除</span></span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 链表中有多个元素删除</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount; <span class="comment">// 计数器+1</span></span><br><span class="line">            --size;   <span class="comment">// 长度 -1</span></span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-7-get-根据key获取"><a href="#4-7-get-根据key获取" class="headerlink" title="4.7 get()-根据key获取"></a>4.7 get()-根据key获取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 数组不为空，且根据hash计算的索引位置有结点</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查询的key与该索引位置的元素相同</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 不是数组当前索引位置的元素，且有下一个结点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 树结点</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123; <span class="comment">// 遍历链表 找到对应的key</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B2.png"></p>
<h1 id="HashMap集合-高级"><a href="#HashMap集合-高级" class="headerlink" title="HashMap集合(高级)"></a>HashMap集合(高级)</h1><h2 id="1-HashMap集合简介"><a href="#1-HashMap集合简介" class="headerlink" title="1.HashMap集合简介"></a>1.HashMap集合简介</h2><p>​    HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>
<p>​    JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突**(两个对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同)<strong>而存在的（“拉链法”解决冲突）.JDK1.8 以后在解决哈希冲突时有了较大的变化，</strong>当链表长度大于阈值（或者红黑树的边界值，默认为 8）并且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储。**</p>
<p>补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。</p>
<p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡 。同时数组长度小于64时，搜索时间相对要快些。所以综上所述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考 <code>treeifyBin</code>方法。</p>
<p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的更高效。 </p>
<p>小结：</p>
<p>特点：</p>
<p>1.存取无序的</p>
<p>2.键和值位置都可以是null，但是键位置只能是一个null</p>
<p>3.键位置是唯一的，底层的数据结构控制键的</p>
<p>4.jdk1.8前数据结构是：链表 + 数组  jdk1.8之后是 ： 链表 + 数组  + 红黑树</p>
<p>5.阈值(边界值) &gt; 8 并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</p>
<h2 id="2-HashMap集合底层的数据结构"><a href="#2-HashMap集合底层的数据结构" class="headerlink" title="2.HashMap集合底层的数据结构"></a>2.HashMap集合底层的数据结构</h2><h3 id="2-1数据结构概念"><a href="#2-1数据结构概念" class="headerlink" title="2.1数据结构概念"></a>2.1数据结构概念</h3><pre><code> [数据](https://baike.baidu.com/item/数据/5947370)结构是[计算机](https://baike.baidu.com/item/计算机/140338)存储、组织[数据](https://baike.baidu.com/item/数据)的方式。数据结构是指相互之间存在一种或多种特定关系的[数据元素](https://baike.baidu.com/item/数据元素/715313)的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储[效率](https://baike.baidu.com/item/效率/868847)。数据结构往往同高效的检索[算法](https://baike.baidu.com/item/算法/209025)和[索引](https://baike.baidu.com/item/索引/5716853)技术有关。 
</code></pre>
<p>数据结构：就是存储数据的一种方式。ArrayList LinkedList</p>
<p>在JDK1.8 之前 HashMap 由 <strong>数组+链表</strong> 数据结构组成的。</p>
<p>在JDK1.8 之后 HashMap 由 <strong>数组+链表 +红黑树</strong>数据结构组成的。</p>
<h3 id="2-2HashMap底层的数据结构存储数据的过程"><a href="#2-2HashMap底层的数据结构存储数据的过程" class="headerlink" title="2.2HashMap底层的数据结构存储数据的过程"></a>2.2HashMap底层的数据结构存储数据的过程</h3><p>存储过程如下所示：</p>
<p>使用的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;刘德华&quot;</span>, <span class="number">53</span>);</span><br><span class="line">        map.put(<span class="string">&quot;柳岩&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        map.put(<span class="string">&quot;张学友&quot;</span>, <span class="number">55</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭富城&quot;</span>, <span class="number">52</span>);</span><br><span class="line">        map.put(<span class="string">&quot;黎明&quot;</span>, <span class="number">51</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林青霞&quot;</span>, <span class="number">55</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘德华&quot;</span>, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png"></p>
<p>说明：</p>
<p>1.面试题：HashMap中hash函数是怎么实现的？还有哪些hash函数的实现方式？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于key的hashCode做<span class="built_in">hash</span>操作，无符号右移16位然后做异或运算。</span><br><span class="line">还有平方取中法，伪随机数法和取余数法。这三种效率都比较低。而无符号右移16位异或运算效率是最高的。至于底层是如何计算的我们下面看源码时给大家讲解。</span><br></pre></td></tr></table></figure>

<p>2.面试题：当两个对象的hashCode相等时会怎么样？</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">会产生哈希碰撞，若<span class="built_in">key</span>值内容相同则替换旧的value.不然连接到链表后面，链表长度超过阈值<span class="number">8</span>就转换为红黑树存储。</span><br></pre></td></tr></table></figure>

<p>3.面试题：何时发生哈希碰撞和什么是哈希碰撞,如何解决哈希碰撞？</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">只要两个元素的<span class="built_in">key</span>计算的哈希码值相同就会发生哈希碰撞。jdk8前使用链表解决哈希碰撞。jdk8之后使用链表+红黑树解决哈希碰撞。</span><br></pre></td></tr></table></figure>

<p>4.面试题：如果两个键的hashcode相同，如何存储键值对？</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hashcode相同，通过<span class="keyword">equals</span>比较内容是否相同。</span><br><span class="line">相同：则新的value覆盖之前的value</span><br><span class="line">不相同：则将新的键值对添加到哈希表中</span><br></pre></td></tr></table></figure>

<p>5.在不断的添加数据的过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p>
<p>6.通过上述描述，当位于一个链表中的元素较多，即hash值相等但是内容不相等的元素较多时，通过key值依次查找的效率较低。而<strong>JDK1.8</strong>中，哈希表存储采用数组+链表+红黑树实现，当链表长度(阀值)超过 8 时且当前数组的长度 &gt; 64时，将链表转换为红黑树，这样大大减少了查找时间。jdk8在哈希表中引入红黑树的原因只是为了查找效率更高。</p>
<p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。如下图所示。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//%E5%93%88%E5%B8%8C%E8%A1%A8.png"></p>
<p> <strong>但是这样的话问题来了，传统hashMap的缺点，1.8为什么引入红黑树？这样结构的话不是更麻烦了吗，为何阈值大于8换成红黑树？</strong></p>
<p> JDK 1.8 以前 HashMap 的实现是 数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当 HashMap 中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个时候 HashMap 就相当于一个单链表，假如单链表有 n 个元素，遍历的时间复杂度就是 O(n)，完全失去了它的优势。针对这种情况，JDK 1.8 中引入了 红黑树（查找时间复杂度为 O(logn)）来优化这个问题。 当链表长度很小的时候，即使遍历，速度也非常快，但是当链表长度不断变长，肯定会对查询性能有一定的影响，所以才需要转成树。</p>
<p>至于为什么阈值是8，我想，去源码中找寻答案应该是最可靠的途径。 下面我们在分析源码的时候会介绍。</p>
<p><strong>7.总结：</strong></p>
<p>上述我们大概阐述了HashMap底层存储数据的方式。为了方便大家更好的理解，我们结合一个存储流程图来进一步说明一下：(jdk8存储过程)</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//1.png"></p>
<p>说明：</p>
<p>1.size表示 HashMap中K-V的实时数量 ， 注意这个不等于数组的长度 。 </p>
<p>2.threshold( 临界值)  =capacity(容量) * loadFactor( 加载因子 )。这个值是当前已占用数组长度的最大值。size超过这个临界值就重新resize(扩容)，扩容后的 HashMap 容量是之前容量的两倍 。</p>
<h2 id="3-HashMap继承关系"><a href="#3-HashMap继承关系" class="headerlink" title="3.HashMap继承关系"></a>3.HashMap继承关系</h2><p>HashMap继承关系如下图所示：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//1.bmp"></p>
<p>说明：</p>
<ul>
<li>Cloneable 空接口，表示可以克隆。 创建并返回HashMap对象的一个副本。</li>
<li>Serializable 序列化接口。属于标记性接口。HashMap对象可以被序列化和反序列化。</li>
<li>AbstractMap 父类提供了Map实现接口。以最大限度地减少实现此接口所需的工作。</li>
</ul>
<p>补充：通过上述继承关系我们发现一个很奇怪的现象， 就是HashMap已经继承了AbstractMap而AbstractMap类实现了Map接口，那为什么HashMap还要在实现Map接口呢？同样在ArrayList中LinkedList中都是这种结构。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">据 java 集合框架的创始人Josh Bloch描述，这样的写法是一个失误。在java集合框架中，类似这样的写法很多，最开始写java集合框架的时候，他认为这样写，在某些地方可能是有价值的，直到他意识到错了。显然的，JDK的维护者，后来不认为这个小小的失误值得去修改，所以就这样存在下来了。</span><br></pre></td></tr></table></figure>

<h2 id="4-HashMap集合类的成员"><a href="#4-HashMap集合类的成员" class="headerlink" title="4.HashMap集合类的成员"></a>4.HashMap集合类的成员</h2><h3 id="4-1成员变量"><a href="#4-1成员变量" class="headerlink" title="4.1成员变量"></a>4.1成员变量</h3><p>1.序列化版本号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br></pre></td></tr></table></figure>

<p>2.集合的初始化容量( <strong>必须是二的n次幂</strong> )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认的初始容量是16 -- 1&lt;&lt;4相当于1*2的4次方---1*16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;   </span><br></pre></td></tr></table></figure>

<p>问题： <strong>为什么必须是2的n次幂？如果输入值不是2的幂比如10会怎么样？</strong> </p>
<p>HashMap构造方法还可以指定集合的初始化容量大小：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap(<span class="keyword">int</span> initialCapacity) 构造一个带指定初始容量和默认加载因子 (<span class="number">0.75</span>) 的空 HashMap。</span><br></pre></td></tr></table></figure>

<p> 根据上述讲解我们已经知道，当向HashMap中添加一个元素的时候，需要根据key的hash值，去确定其在数组中的具体位置。 HashMap为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同，这个实现就在把数据存到哪个链表中的算法。</p>
<p>这个算法实际就是取模，hash%length，计算机中直接求余效率不如位移运算(这点上述已经讲解)。所以源码中做了优化,使用 hash&amp;(length-1)，而实际上hash%length等于hash&amp;(length-1)的前提是length是2的n次幂。</p>
<p>为什么这样能均匀分布减少碰撞呢？2的n次方实际就是1后面n个0，2的n次方-1  实际就是n个1；</p>
<p>举例：</p>
<p><strong>说明：按位与运算：相同的二进制数位上，都是1的时候，结果为1，否则为零。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如长度为<span class="number">8</span>时候，<span class="number">3</span>&amp;(<span class="number">8</span>-<span class="number">1</span>)=<span class="number">3</span>  <span class="number">2</span>&amp;(<span class="number">8</span>-<span class="number">1</span>)=<span class="number">2</span> ，不同位置上，不碰撞；</span><br><span class="line">例如长度length为<span class="number">8</span>时候，<span class="number">8</span>是<span class="number">2</span>的<span class="number">3</span>次幂。二进制是：<span class="number">1000</span></span><br><span class="line">length-<span class="number">1</span> 二进制运算：</span><br><span class="line">	<span class="number">1000</span></span><br><span class="line">-	   <span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">     <span class="number">111</span></span><br><span class="line">如下所示：</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span>   &amp;(<span class="number">8</span>    - <span class="number">1</span>)=<span class="number">3</span>  </span><br><span class="line">	<span class="number">00000011</span>  <span class="number">3</span> hash</span><br><span class="line">&amp;   <span class="number">00000111</span>  <span class="number">7</span> length-<span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">	<span class="number">00000011</span>-----》<span class="number">3</span> 数组下标</span><br><span class="line">	</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> &amp;  (<span class="number">8</span> -    <span class="number">1</span>) = <span class="number">2</span>  </span><br><span class="line">	<span class="number">00000010</span>  <span class="number">2</span> hash</span><br><span class="line">&amp;   <span class="number">00000111</span>  <span class="number">7</span> length-<span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">	<span class="number">00000010</span>-----》<span class="number">2</span>  数组下标</span><br><span class="line">说明：上述计算结果是不同位置上，不碰撞；</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如长度为<span class="number">9</span>时候，<span class="number">3</span>&amp;(<span class="number">9</span>-<span class="number">1</span>)=<span class="number">0</span>  <span class="number">2</span>&amp;(<span class="number">9</span>-<span class="number">1</span>)=<span class="number">0</span> ，都在<span class="number">0</span>上，碰撞了；</span><br><span class="line">例如长度length为<span class="number">9</span>时候，<span class="number">9</span>不是<span class="number">2</span>的n次幂。二进制是：<span class="number">00001001</span></span><br><span class="line">length-<span class="number">1</span> 二进制运算：</span><br><span class="line">	<span class="number">1001</span></span><br><span class="line">-	   <span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">如下所示：</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span>   &amp;(<span class="number">9</span>    - <span class="number">1</span>)=<span class="number">0</span>  </span><br><span class="line">	<span class="number">00000011</span>  <span class="number">3</span> hash</span><br><span class="line">&amp;   <span class="number">00001000</span>  <span class="number">8</span> length-<span class="number">1</span> </span><br><span class="line">---------------------</span><br><span class="line">	<span class="number">00000000</span>-----》<span class="number">0</span>  数组下标</span><br><span class="line">	</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> &amp;  (<span class="number">9</span> -    <span class="number">1</span>) = <span class="number">2</span>  </span><br><span class="line">	<span class="number">00000010</span> <span class="number">2</span> hash</span><br><span class="line">&amp;   <span class="number">00001000</span> <span class="number">8</span> length-<span class="number">1</span> </span><br><span class="line">---------------------</span><br><span class="line">	<span class="number">00000000</span>-----》<span class="number">0</span>  数组下标</span><br><span class="line">说明：上述计算结果都在<span class="number">0</span>上，碰撞了；</span><br></pre></td></tr></table></figure>

<p><strong>注意： 当然如果不考虑效率直接求余即可（就不需要要求长度必须是2的n次方了）</strong> </p>
<p>小结：</p>
<p>​    1.由上面可以看出，当我们根据key的hash确定其在数组的位置时，如果n为2的幂次方，可以保证数据的均匀插入，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突。</p>
<p>​    2.另一方面，一般我们可能会想通过 % 求余来确定位置，这样也可以，只不过性能不如 &amp; 运算。而且当n是2的幂次方时：hash &amp; (length - 1) == hash % length</p>
<p>​    3.因此，HashMap 容量为2次幂的原因，就是为了数据的的均匀分布，减少hash冲突，毕竟hash冲突越大，代表数组中一个链的长度越大，这样的话会降低hashmap的性能</p>
<p>​    <strong>4.如果创建HashMap对象时，输入的数组长度是10，不是2的幂，HashMap通过一通位移运算和或运算得到的肯定是2的幂次数，并且是离那个数最近的数字。</strong></p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HashMap集合的对象，指定数组长度是10，不是2的幂</span></span><br><span class="line">HashMap hashMap = <span class="keyword">new</span> HashMap(<span class="number">10</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;<span class="comment">//initialCapacity=10</span></span><br><span class="line">   <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;<span class="comment">//initialCapacity=10</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//initialCapacity=10</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;<span class="comment">//int cap = 10</span></span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>由此可以看到，当在实例化HashMap实例时，如果给定了initialCapacity(假设是10)，由于HashMap的capacity必须都是2的幂，因此这个方法用于找到大于等于initialCapacity(假设是10)的最小的2的幂（initialCapacity如果就是2的幂，则返回的还是这个数）。<br>下面分析这个算法：<br>1)、首先，为什么要对cap做减1操作。int n = cap - 1;<br>这是为了防止，cap已经是2的幂。如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看。<br>下面看看这几个无符号右移操作：<br>2）、如果n这时为0了（经过了cap-1之后），则经过后面的几次无符号右移依然是0，最后返回的capacity是        1（最后有个n+1的操作）。<br>这里只讨论n不等于0的情况。</p>
<p>3）、注意：**|（按位或运算）：运算规则：相同的二进制数位上，都是0的时候，结果为0，否则为1。**</p>
<p>​     <strong>第一次右移</strong> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span>;<span class="comment">//cap=10  n=9</span></span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001001</span> <span class="comment">//9</span></span><br><span class="line">|	</span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000100</span> <span class="comment">//9右移之后变为4</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span> <span class="comment">//按位异或之后是13</span></span><br></pre></td></tr></table></figure>

<p> 由于n不等于0，则n的二进制表示中总会有一bit为1，这时考虑最高位的1。通过无符号右移1位，则将最高位的1右移了1位，再做或操作，使得n的二进制表示中与最高位的1紧邻的右边一位也为1，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span></span><br></pre></td></tr></table></figure>

<p> <strong>第二次右移</strong> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> n |= n &gt;&gt;&gt; <span class="number">2</span>;<span class="comment">//n通过第一次右移变为了：n=13</span></span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span>  <span class="comment">// 13</span></span><br><span class="line">|</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000011</span>  <span class="comment">//13右移之后变为3</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure>

<p> 注意，这个n已经经过了<code>n |= n &gt;&gt;&gt; 1;</code> 操作。假设此时n为00000000 00000000 00000000 00001101 ，则n无符号右移两位，会将最高位两个连续的1右移两位，然后再与原来的n做或操作，这样n的二进制表示的高位中会有4个连续的1。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure>

<p> <strong>第三次右移</strong> :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n |= n &gt;&gt;&gt; <span class="number">4</span>;<span class="comment">//n通过第一、二次右移变为了：n=15</span></span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span>  <span class="comment">// 15</span></span><br><span class="line">|</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  <span class="comment">//15右移之后变为0</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line">	<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure>

<p>这次把已经有的高位中的连续的4个1，右移4位，再做或操作，这样n的二进制表示的高位中正常会有8个连续的1。如00001111 1111xxxxxx 。<br>以此类推<br>注意，容量最大也就是32bit的正数，因此最后n |= n &gt;&gt;&gt; 16; ，最多也就32个1（但是这已经是负数了。在执行tableSizeFor之前，对initialCapacity做了判断，如果大于MAXIMUM_CAPACITY(2 ^ 30)，则取MAXIMUM_CAPACITY。如果等于MAXIMUM_CAPACITY(2 ^ 30)，会执行移位操作。所以这里面的移位操作之后，最大30个1，不会大于等于MAXIMUM_CAPACITY。30个1，加1之后得2 ^ 30） 。<br>请看下面的一个完整例子：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191115151657917.png" alt="image-20191115151657917"></p>
<p>  注意，得到的这个capacity却被赋值给了threshold。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//initialCapacity=10</span></span><br></pre></td></tr></table></figure>

<p>3.默认的负载因子，默认值是0.75 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure>

<p>4.集合最大容量 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合最大容量的上限是：2的30次幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>5.当链表的值超过8则会转红黑树(<strong>1.8新增</strong>) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p><strong>问题：为什么Map桶中节点个数超过8才转为红黑树？</strong></p>
<p>8这个阈值定义在HashMap中，针对这个成员变量，在源码的注释中只说明了8是bin（bin就是bucket(桶)）从链表转成树的阈值，但是并没有说明为什么是8： </p>
<p> 在HashMap中有一段注释说明： 我们继续往下看 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Because TreeNodes are about twice the size of regular nodes, <span class="function">we use them only when bins contain enough nodes to warrant <span class="title">use</span> <span class="params">(see TREEIFY_THRESHOLD)</span>. And when they become too <span class="title">small</span> <span class="params">(due to removal or resizing)</span> they are converted back to plain bins.  In usages with well-distributed user hashCodes, tree bins are rarely used.  Ideally, under random hashCodes, the frequency of nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="function"><span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a parameter of about 0.5 on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing threshold of 0.75, although with a large variance because of resizing granularity. Ignoring variance, the expected occurrences of list size k <span class="title">are</span> <span class="params">(exp(-<span class="number">0.5</span>)</span>*<span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span>/<span class="title">factorial</span><span class="params">(k)</span>).</span></span><br><span class="line"><span class="function">The first values are:</span></span><br><span class="line"><span class="function">因为树节点的大小大约是普通节点的两倍，所以我们只在箱子包含足够的节点时才使用树节点<span class="params">(参见TREEIFY_THRESHOLD)</span>。当它们变得太小<span class="params">(由于删除或调整大小)</span>时，就会被转换回普通的桶。在使用分布良好的用户hashcode时，很少使用树箱。理想情况下，在随机哈希码下，箱子中节点的频率服从泊松分布</span></span><br><span class="line"><span class="function"><span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span>，默认调整阈值为0.75，平均参数约为0.5，尽管由于调整粒度的差异很大。忽略方差，列表大小k的预期出现次数是<span class="params">(exp(-<span class="number">0.5</span>)</span>*<span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span>/<span class="title">factorial</span><span class="params">(k)</span>)。</span></span><br><span class="line"><span class="function">第一个值是:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">0:    0.60653066</span></span><br><span class="line"><span class="function">1:    0.30326533</span></span><br><span class="line"><span class="function">2:    0.07581633</span></span><br><span class="line"><span class="function">3:    0.01263606</span></span><br><span class="line"><span class="function">4:    0.00157952</span></span><br><span class="line"><span class="function">5:    0.00015795</span></span><br><span class="line"><span class="function">6:    0.00001316</span></span><br><span class="line"><span class="function">7:    0.00000094</span></span><br><span class="line"><span class="function">8:    0.00000006</span></span><br><span class="line"><span class="function">more: less than 1 in ten million</span></span><br></pre></td></tr></table></figure>

<p>TreeNodes占用空间是普通Nodes的两倍，所以只有当bin包含足够多的节点时才会转成TreeNodes，而是否足够多就是由TREEIFY_THRESHOLD的值决定的。当bin中节点数变少时，又会转成普通的bin。并且我们查看源码的时候发现，链表长度达到8就转成红黑树，当长度降到6就转成普通bin。</p>
<p>这样就解释了为什么不是一开始就将其转换为TreeNodes，而是需要一定节点数才转为TreeNodes，说白了就是权衡，空间和时间的权衡。</p>
<p> 这段内容还说到：当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，我们可以看到，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。所以，之所以选择8，不是随便决定的，而是根据概率统计决定的。由此可见，发展将近30年的Java每一项改动和优化都是非常严谨和科学的。 </p>
<p>也就是说：选择8因为符合泊松分布，超过8的时候，概率已经非常小了，所以我们选择8这个数字。</p>
<p>补充：</p>
<p>1）.</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"> <span class="selector-tag">Poisson</span>分布(泊松分布)，是一种统计与概率学里常见到的离散<span class="selector-attr">[概率分布]</span>。</span><br><span class="line">泊松分布的概率函数为：</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191115161055901.png" alt="image-20191115161055901"></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">泊松分布的参数λ是单位时间<span class="comment">(或单位面积)</span>内随机事件的平均发生次数。 泊松分布适合于描述单位时间内随机事件发生的次数。</span><br></pre></td></tr></table></figure>

<p>2）.以下是我在研究这个问题时，在一些资料上面翻看的解释：供大家参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">红黑树的平均查找长度是log(n)，如果长度为<span class="number">8</span>，平均查找长度为log(<span class="number">8</span>)=<span class="number">3</span>，链表的平均查找长度为n/<span class="number">2</span>，当长度为<span class="number">8</span>时，平均查找长度为<span class="number">8</span>/<span class="number">2</span>=<span class="number">4</span>，这才有转换成树的必要；链表长度如果是小于等于<span class="number">6</span>，<span class="number">6</span>/<span class="number">2</span>=<span class="number">3</span>，而log(<span class="number">6</span>)=<span class="number">2.6</span>，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</span><br></pre></td></tr></table></figure>

<p><strong>6.当链表的值小于6则会从红黑树转回链表</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<p>7.当Map里面的数量超过这个值时，表中的桶才能进行树形化 ，否则桶内元素太多时会扩容，而不是树形化 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD (8)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//桶中结构转化为红黑树对应的数组长度最小的值 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure>

<p><strong>8、table用来初始化(必须是二的n次幂)(重点)</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储元素的数组 </span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure>

<p><strong>table</strong>在JDK1.8中我们了解到HashMap是由数组加链表加红黑树来组成的结构其中table就是HashMap中的数组，jdk8之前数组类型是Entry&lt;K,V&gt;类型。从jdk1.8之后是Node&lt;K,V&gt;类型。只是换了个名字，都实现了一样的接口：Map.Entry&lt;K,V&gt;。负责存储键值对数据的。</p>
<p>9、用来存放缓存 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存放具体元素的集合</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure>

<p><strong>10、 HashMap中存放元素的个数(重点)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存放元素的个数，注意这个不等于数组的长度。</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>

<p><strong>size</strong>为HashMap中K-V的实时数量，不是数组table的长度。</p>
<p>11、 用来记录HashMap的修改次数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> modCount;  </span><br></pre></td></tr></table></figure>

<p>12、 用来调整大小下一个容量的值计算方式为(容量*负载因子) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 临界值 当实际大小(容量*负载因子)超过临界值时，会进行扩容</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure>

<p><strong>13、 哈希表的加载因子(重点)</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<p>1.<strong>loadFactor</strong>加载因子，是用来衡量 HashMap 满的程度，<strong>表示HashMap的疏密程度，影响hash操作到同一个数组位置的概率</strong>，计算HashMap的实时加载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。capacity 是桶的数量，也就是 table 的长度length。</p>
<p><strong>loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor的默认值为0.75f是官方给出的一个比较好的临界值</strong>。</p>
<p><strong>当HashMap里面容纳的元素已经达到HashMap数组长度的75%时，表示HashMap太挤了，需要扩容，而扩容这个过程涉及到 rehash、复制数据等操作，非常消耗性能。，所以开发中尽量减少扩容的次数，可以通过创建HashMap集合对象时指定初始容量来尽量避免。</strong></p>
<p><strong>同时在HashMap的构造器中可以定制loadFactor。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造方法：</span><br><span class="line">HashMap(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor) 构造一个带指定初始容量和加载因子的空 HashMap。</span><br></pre></td></tr></table></figure>



<p>2.为什么加载因子设置为0.75,初始化临界值是12？</p>
<p>loadFactor越趋近于1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191115173553375.png" alt="image-20191115173553375"></p>
<p>如果希望链表尽可能少些。要提前扩容，有的数组空间有可能一直没有存储数据。加载因子尽可能小一些。</p>
<p>举例：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">例如：加载因子是<span class="number">0.4</span>。 那么<span class="number">16</span>*<span class="number">0.4</span><span class="comment">---&gt;6 如果数组中满6个空间就扩容会造成数组利用率太低了。</span></span><br><span class="line">	 加载因子是<span class="number">0.9</span>。 那么<span class="number">16</span>*<span class="number">0.9</span><span class="comment">----&gt;14 那么这样就会导致链表有点多了。导致查找元素效率低。</span></span><br></pre></td></tr></table></figure>

<p>所以既兼顾数组利用率又考虑链表不要太多，经过大量测试0.75是最佳方案。</p>
<ul>
<li><strong>threshold</strong>计算公式：capacity(数组长度默认16) * loadFactor(负载因子默认0.75)。这个值是当前已占用数组长度的最大值。<strong>当Size&gt;=threshold</strong>的时候，那么就要考虑对数组的resize(扩容)，也就是说，这个的意思就是 <strong>衡量数组是否需要扩增的一个标准</strong>。 扩容后的 HashMap 容量是之前容量的两倍.</li>
</ul>
<h3 id="4-2构造方法"><a href="#4-2构造方法" class="headerlink" title="4.2构造方法"></a>4.2构造方法</h3><p> HashMap 中重要的构造方法，它们分别如下： </p>
<p>1、构造一个空的 <code>HashMap</code> ，默认初始容量（16）和默认负载因子（0.75）。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// 将默认的加载因子0.75赋值给loadFactor，并没有创建数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、 构造一个具有指定的初始容量和默认负载因子（0.75） <code>HashMap</code>。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>3、 构造一个具有指定的初始容量和负载因子的 <code>HashMap</code>。我们来分析一下。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="comment">	 initialCapacity: 指定的容量</span></span><br><span class="line"><span class="comment">	 loadFactor:指定的加载因子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//判断初始化容量initialCapacity是否小于0</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果小于0，则抛出非法的参数异常IllegalArgumentException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    	<span class="comment">//判断初始化容量initialCapacity是否大于集合的最大容量MAXIMUM_CAPACITY-》2的30次幂</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="comment">//如果超过MAXIMUM_CAPACITY，会将MAXIMUM_CAPACITY赋值给initialCapacity</span></span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    	<span class="comment">//判断负载因子loadFactor是否小于等于0或者是否是一个非数值</span></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="comment">//如果满足上述其中之一，则抛出非法的参数异常IllegalArgumentException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">     	<span class="comment">//将指定的加载因子赋值给HashMap成员变量的负载因子loadFactor</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    		tableSizeFor(initialCapacity) 判断指定的初始化容量是否是2的n次幂，如果不是那么会变为比指			定初始化容量大的最小的2的n次幂。这点上述已经讲解过。</span></span><br><span class="line"><span class="comment">    		但是注意，在tableSizeFor方法体内部将计算后的数据返回给调用这里了，并且直接赋值给threshold边			界值了。有些人会觉得这里是一个bug,应该这样书写：</span></span><br><span class="line"><span class="comment">    		this.threshold = tableSizeFor(initialCapacity) * this.loadFactor;</span></span><br><span class="line"><span class="comment">    		这样才符合threshold的意思（当HashMap的size到达threshold这个阈值时会扩容）。</span></span><br><span class="line"><span class="comment">			但是，请注意，在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推			 迟到了put方法中，在put方法中会对threshold重新计算，put方法的具体实现我们下面会进行讲解</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">最后调用了tableSizeFor，来看一下方法实现：</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">       返回比指定初始化容量大的最小的2的n次幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>对于 this.threshold = tableSizeFor(initialCapacity); 疑问解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tableSizeFor(initialCapacity) 判断指定的初始化容量是否是<span class="number">2</span>的n次幂，如果不是那么会变为比指			定初始化容量大的最小的<span class="number">2</span>的n次幂。这点上述已经讲解过。</span><br><span class="line">但是注意，在tableSizeFor方法体内部将计算后的数据返回给调用这里了，并且直接赋值给threshold边			界值了。有些人会觉得这里是一个bug,应该这样书写：</span><br><span class="line"><span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity) * <span class="keyword">this</span>.loadFactor;</span><br><span class="line">这样才符合threshold的意思（当HashMap的size到达threshold这个阈值时会扩容）。</span><br><span class="line">但是，请注意，在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推			 迟到了put方法中，在put方法中会对threshold重新计算，put方法的具体实现我们下面会进行讲解</span><br></pre></td></tr></table></figure>

<p>4、包含另一个“Map”的构造函数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造一个映射关系与指定 Map 相同的新 HashMap。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//负载因子loadFactor变为默认的负载因子0.75</span></span><br><span class="line">         <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">         putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>最后调用了putMapEntries，来看一下方法实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取参数集合的长度</span></span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断参数集合的长度是否大于0，说明大于0</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>)  <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p> float ft = ((float)s / loadFactor) + 1.0F;这一行代码中为什么要加1.0F ？</p>
<p> s/loadFactor的结果是小数，加1.0F与(int)ft相当于是对小数做一个向上取整以尽可能的保证更大容量，更大的容量能够减少resize的调用次数。所以 + 1.0F是为了获取更大的容量。 </p>
<p>例如：原来集合的元素个数是6个，那么6/0.75是8，是2的n次幂，那么新的数组大小就是8了。然后原来数组的数据就会存储到长度是8的新的数组中了，这样会导致在存储元素的时候，容量不够，还得继续扩容，那么性能降低了，而如果+1呢，数组长度直接变为16了，这样可以减少数组的扩容。</p>
<h3 id="4-3成员方法"><a href="#4-3成员方法" class="headerlink" title="4.3成员方法"></a>4.3成员方法</h3><h4 id="4-3-1增加方法"><a href="#4-3-1增加方法" class="headerlink" title="4.3.1增加方法"></a>4.3.1增加方法</h4><p>put方法是比较复杂的，实现步骤大致如下：</p>
<p>1）先通过hash值计算出key映射到哪个桶；</p>
<p>2）如果桶上没有碰撞冲突，则直接插入；</p>
<p>3）如果出现碰撞冲突了，则需要处理冲突：</p>
<p>​    a:如果该桶使用红黑树处理冲突，则调用红黑树的方法插入数据；</p>
<p>​    b:否则采用传统的链式方法插入。如果链的长度达到临界值，则把链转变为红黑树；</p>
<p>4）如果桶中存在重复的键，则为该键替换新值value；</p>
<p>5）如果size大于阈值threshold，则进行扩容；</p>
<p>具体的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明： </p>
<p>​    1）HashMap只提供了put用于添加元素，putVal方法只是给put方法调用的一个方法，并没有提供给用户使用。 所以我们重点看putVal方法。</p>
<pre><code> 2）我们可以看到在putVal()方法中key在这里执行了一下hash()方法,来看一下Hash方法是如何实现的。 
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    		1）如果key等于null：</span></span><br><span class="line"><span class="comment">    			可以看到当key等于null的时候也是有哈希值的，返回的是0.</span></span><br><span class="line"><span class="comment">    		2）如果key不等于null：</span></span><br><span class="line"><span class="comment">    			首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的					hash值</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面可以得知HashMap是支持Key为空的，而HashTable是直接用Key来获取HashCode所以key为空会抛异常。</p>
<p>{其实上面就已经解释了为什么HashMap的长度<strong>为什么要是2的幂</strong>因为HashMap 使用的方法很巧妙，它通过 hash &amp; (table.length -1)来得到该对象的保存位，前面说过 HashMap 底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当 length 总是2的n次方时，hash &amp; (length-1)运算等价于对 length 取模，也就是hash%length，但是&amp;比%具有更高的效率。比如 n % 32 = n &amp; (32 -1)。}</p>
<p><strong>解读上述hash方法：</strong></p>
<p>我们先研究下key的哈希值是如何计算出来的。key的哈希值是通过上述方法计算出来的。</p>
<p>这个哈希方法首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的    hash值。计算过程如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    		1）如果key等于null：</span></span><br><span class="line"><span class="comment">    			可以看到当key等于null的时候也是有哈希值的，返回的是0.</span></span><br><span class="line"><span class="comment">    		2）如果key不等于null：</span></span><br><span class="line"><span class="comment">    			首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的					hash值</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在putVal函数中使用到了上述hash函数计算的哈希值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        。。。。。。。。。。。。。。</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//这里的n表示数组长度16</span></span><br><span class="line">       。。。。。。。。。。。。。。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>计算过程如下所示：</p>
<p>​    说明：</p>
<p>​        1）key.hashCode()；返回散列值也就是hashcode。假设随便生成的一个值。</p>
<p>​        2）n表示数组初始化的长度是16</p>
<p>​        3）&amp;（按位与运算）：运算规则：相同的二进制数位上，都是1的时候，结果为1，否则为零。</p>
<p>​        4）^（按位异或运算）：运算规则：相同的二进制数位上，数字相同，结果为0，不同为1。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191114193730911.png" alt="image-20191114193730911"></p>
<p>简单来说就是：</p>
<ul>
<li><p>高16 bit 不变，低16 bit 和高16 bit 做了一个异或（得到的 hashcode 转化为32位二进制，前16位和后16位低16 bit和高16 bit做了一个异或）</p>
<p><strong>问题：为什么要这样操作呢？</strong></p>
<p>如果当n即数组长度很小，假设是16的话，那么n-1即为  —》1111 ，这样的值和hashCode()直接做按位与操作，实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大，低位变化很小，这样就很容易造成哈希冲突了，所以这里把高低位都利用起来，从而解决了这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如上述：</span><br><span class="line">hashCode()值：     <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1110</span> <span class="number">1010</span></span><br><span class="line">				&amp;</span><br><span class="line">n-<span class="number">1</span>即<span class="number">16</span>-<span class="number">1</span>--》<span class="number">15</span>：  。。。。。。。。。。。。。。。。。。。。。。<span class="number">1111</span></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">				  <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> ----》<span class="number">10</span>作为索引</span><br><span class="line">其实就是将hashCode值作为数组索引，那么如果下个高位hashCode不一致，低位一致的话，就会造成计算的索引还是<span class="number">10</span>,从而造成了哈希冲突了。降低性能。</span><br></pre></td></tr></table></figure></li>
<li><p>(n-1) &amp; hash = -&gt; 得到下标   (n-1)   n表示数组长度16，n-1就是15</p>
</li>
<li><p>取余数本质是不断做除法，把剩余的数减去，运算效率要比位运算低。</p>
</li>
</ul>
<p>现在看putVal()方法，看看它到底做了什么。</p>
<p>主要参数：</p>
<ul>
<li>hash key的hash值</li>
<li>key 原始Key</li>
<li>value 要存放的值</li>
<li>onlyIfAbsent 如果true代表不更改现有的值</li>
<li>evict 如果为false表示table为创建状态</li>
</ul>
<p>putVal()方法源代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	1）transient Node&lt;K,V&gt;[] table; 表示存储Map集合中元素的数组。</span></span><br><span class="line"><span class="comment">    	2）(tab = table) == null 表示将空的table赋值给tab,然后判断tab是否等于null，第一次肯定是			null</span></span><br><span class="line"><span class="comment">    	3）(n = tab.length) == 0 表示将数组的长度0赋值给n,然后判断n是否等于0，n等于0</span></span><br><span class="line"><span class="comment">    	由于if判断使用双或，满足一个即可，则执行代码 n = (tab = resize()).length; 进行数组初始化。</span></span><br><span class="line"><span class="comment">    	并将初始化好的数组长度赋值给n.</span></span><br><span class="line"><span class="comment">    	4）执行完n = (tab = resize()).length，数组tab每个空间都是null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	1）i = (n - 1) &amp; hash 表示计算数组的索引赋值给i，即确定元素存放在哪个桶中</span></span><br><span class="line"><span class="comment">    	2）p = tab[i = (n - 1) &amp; hash]表示获取计算出的位置的数据赋值给节点p</span></span><br><span class="line"><span class="comment">    	3) (p = tab[i = (n - 1) &amp; hash]) == null 判断节点位置是否等于null，如果为null，则执行代			码：tab[i] = newNode(hash, key, value, null);根据键值对创建新的节点放入该位置的桶中</span></span><br><span class="line"><span class="comment">        小结：如果当前桶没有哈希碰撞冲突，则直接把键值对插入空间位置</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//创建一个新的节点存入到桶中</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 执行else说明tab[i]不等于null，表示这个位置已经有值了。</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	比较桶中第一个元素(数组中的结点)的hash值和key是否相等</span></span><br><span class="line"><span class="comment">        	1）p.hash == hash ：p.hash表示原来存在数据的hash值  hash表示后添加数据的hash值 比较两个				 hash值是否相等</span></span><br><span class="line"><span class="comment">                 说明：p表示tab[i]，即 newNode(hash, key, value, null)方法返回的Node对象。</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) </span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    而在Node类中具有成员变量hash用来记录着之前数据的hash值的</span></span><br><span class="line"><span class="comment">             2）(k = p.key) == key ：p.key获取原来数据的key赋值给k  key 表示后添加数据的key 比较两					个key的地址值是否相等</span></span><br><span class="line"><span class="comment">             3）key != null &amp;&amp; key.equals(k)：能够执行到这里说明两个key的地址值不相等，那么先判断后				添加的key是否等于null，如果不等于null再调用equals方法判断两个key的内容是否相等</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                	说明：两个元素哈希值相等，并且key的值也相等</span></span><br><span class="line"><span class="comment">                	将旧的元素整体对象赋值给e，用e来记录</span></span><br><span class="line"><span class="comment">                */</span> </span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等或者key不相等；判断p是否为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 说明是链表节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	1)如果是链表的话需要遍历到最后节点然后插入</span></span><br><span class="line"><span class="comment">            	2)采用循环遍历的方式，判断链表中是否有重复的key</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                	1)e = p.next 获取p的下一个元素赋值给e</span></span><br><span class="line"><span class="comment">                	2)(e = p.next) == null 判断p.next是否等于null，等于null，说明p没有下一个元					素，那么此时到达了链表的尾部，还没有找到重复的key,则说明HashMap没有包含该键</span></span><br><span class="line"><span class="comment">                	将该键值对插入链表中</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    	1）创建一个新的节点插入到尾部</span></span><br><span class="line"><span class="comment">                    	 p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                    	 Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) </span></span><br><span class="line"><span class="comment">                    	 &#123;</span></span><br><span class="line"><span class="comment">                                return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                         &#125;</span></span><br><span class="line"><span class="comment">                         注意第四个参数next是null，因为当前元素插入到链表末尾了，那么下一个节点肯定是								null</span></span><br><span class="line"><span class="comment">                         2）这种添加方式也满足链表数据结构的特点，每次向后添加新的元素</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    	1)节点添加完成之后判断此时节点个数是否大于TREEIFY_THRESHOLD临界值8，如果大于</span></span><br><span class="line"><span class="comment">                    	则将链表转换为红黑树</span></span><br><span class="line"><span class="comment">                    	2）int binCount = 0 ：表示for循环的初始化值。从0开始计数。记录着遍历节点的个						数。值是0表示第一个节点，1表示第二个节点。。。。7表示第八个节点，加上数组中的的一						个元素，元素个数是9</span></span><br><span class="line"><span class="comment">                    	TREEIFY_THRESHOLD - 1 --》8 - 1 ---》7</span></span><br><span class="line"><span class="comment">                    	如果binCount的值是7(加上数组中的的一个元素，元素个数是9)</span></span><br><span class="line"><span class="comment">                    	TREEIFY_THRESHOLD - 1也是7，此时转换红黑树</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//转换为红黑树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                	执行到这里说明e = p.next 不是null，不是最后一个元素。继续判断链表中结点的key值与插					  入的元素的key值是否相等</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                		要添加的元素和链表中的存在的元素的key相等了，则跳出for循环。不用再继续比较了</span></span><br><span class="line"><span class="comment">                		直接执行下面的if语句去替换去 if (e != null) </span></span><br><span class="line"><span class="comment">                	*/</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                	说明新添加的元素和当前节点不相等，继续查找下一个节点。</span></span><br><span class="line"><span class="comment">                	用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line"><span class="comment">        	也就是说通过上面的操作找到了重复的键，所以这里就是把该键的值变为新的值，并返回旧值</span></span><br><span class="line"><span class="comment">        	这里完成了put方法的修改功能</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                <span class="comment">//e.value 表示旧值  value表示新值 </span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改记录次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 判断实际大小是否大于threshold阈值，如果超过则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="4-3-2将链表转换为红黑树的treeifyBin方法"><a href="#4-3-2将链表转换为红黑树的treeifyBin方法" class="headerlink" title="4.3.2将链表转换为红黑树的treeifyBin方法"></a>4.3.2将链表转换为红黑树的treeifyBin方法</h4><p>节点添加完成之后判断此时节点个数是否大于TREEIFY_THRESHOLD临界值8，如果大于则将链表转换为红黑树，转换红黑树的方法  treeifyBin，整体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">   <span class="comment">//转换为红黑树 tab表示数组名  hash表示哈希值</span></span><br><span class="line">   treeifyBin(tab, hash);</span><br></pre></td></tr></table></figure>

<p>treeifyBin方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">   替换指定哈希表的索引处桶中的所有链接节点，除非表太小，否则将修改大小。</span></span><br><span class="line"><span class="comment">   Node&lt;K,V&gt;[] tab = tab 数组名</span></span><br><span class="line"><span class="comment">   int hash = hash表示哈希值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      	如果当前数组为空或者数组的长度小于进行树形化的阈值(MIN_TREEIFY_CAPACITY = 64),</span></span><br><span class="line"><span class="comment">      	就去扩容。而不是将节点变为红黑树。</span></span><br><span class="line"><span class="comment">      	目的：如果数组很小，那么转换红黑树，然后遍历效率要低一些。这时进行扩容，那么重新计算哈希值</span></span><br><span class="line"><span class="comment">      	，链表长度有可能就变短了，数据会放到数组中，这样相对来说效率高一些。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">          <span class="comment">//扩容方法</span></span><br><span class="line">          resize();</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          	1）执行到这里说明哈希表中的数组长度大于阈值64，开始进行树形化</span></span><br><span class="line"><span class="comment">          	2）e = tab[index = (n - 1) &amp; hash]表示将数组中的元素取出赋值给e,e是哈希表中指定位					置桶里的链表节点，从第一个开始</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="comment">//hd：红黑树的头结点   tl :红黑树的尾结点</span></span><br><span class="line">          TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">              <span class="comment">//新创建一个树的节点，内容和当前链表节点e一致</span></span><br><span class="line">              TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">              <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                  <span class="comment">//将新创键的p节点赋值给红黑树的头结点</span></span><br><span class="line">                  hd = p;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  	 p.prev = tl：将上一个节点p赋值给现在的p的前一个节点</span></span><br><span class="line"><span class="comment">                  	 tl.next = p;将现在节点p作为树的尾结点的下一个节点</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                  p.prev = tl;</span><br><span class="line">                  tl.next = p;</span><br><span class="line">              &#125;</span><br><span class="line">              tl = p;</span><br><span class="line">              <span class="comment">/*</span></span><br><span class="line"><span class="comment">              	e = e.next 将当前节点的下一个节点赋值给e,如果下一个节点不等于null</span></span><br><span class="line"><span class="comment">              	则回到上面继续取出链表中节点转换为红黑树</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">          &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          	让桶中的第一个元素即数组中的元素指向新建的红黑树的节点，以后这个桶里的元素就是红黑树</span></span><br><span class="line"><span class="comment">          	而不是链表数据结构了</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">              hd.treeify(tab);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>小结：上述操作一共做了如下几件事：</p>
<p>1.根据哈希表中元素个数确定是扩容还是树形化</p>
<p>2.如果是树形化遍历桶中的元素，创建相同个数的树形节点，复制内容，建立起联系</p>
<p>3.然后让桶中的第一个元素指向新创建的树根节点，替换桶的链表内容为树形化内容</p>
<h4 id="4-3-3扩容方法-resize"><a href="#4-3-3扩容方法-resize" class="headerlink" title="4.3.3扩容方法_resize"></a>4.3.3扩容方法_resize</h4><h5 id="4-3-3-1扩容机制"><a href="#4-3-3-1扩容机制" class="headerlink" title="4.3.3.1扩容机制"></a>4.3.3.1扩容机制</h5><p>想要了解HashMap的扩容机制你要有这两个问题</p>
<ul>
<li>1.什么时候才需要扩容</li>
<li>2.HashMap的扩容是什么</li>
</ul>
<p><strong>1.什么时候才需要扩容</strong></p>
<p>当HashMap中的元素个数超过数组大小(数组长度)*loadFactor(负载因子)时，就会进行数组扩容，loadFactor的默认值(DEFAULT_LOAD_FACTOR)是0.75,这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中的元素个数超过16×0.75=12(这个值就是阈值或者边界值threshold值)的时候，就把数组的大小扩展为2×16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预知元素的个数能够有效的提高HashMap的性能。</p>
<p><strong>补充：</strong></p>
<p><strong>当HashMap中的其中一个链表的对象个数如果达到了8个，此时如果数组长度没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链表会变成红黑树，节点类型由Node变成TreeNode类型。当然，如果映射关系被移除后，下次执行resize方法时判断树的节点个数低于6，也会再把树转换为链表。</strong></p>
<p><strong>2.HashMap的扩容是什么</strong></p>
<p> 进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。 </p>
<p>HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的 (n-1)&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到”<strong>原位置+旧容量</strong>“这个位置。</p>
<p> 怎么理解呢？例如我们从16扩展为32时，具体的变化如下所示： </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191117110812839.png" alt="image-20191117110812839"></p>
<p> 因此元素在重新计算hash之后，因为n变为2倍，那么n-1的标记范围在高位多1bit(红色)，因此新的index就会发生这样的变化： </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20191117110934974.png" alt="image-20191117110934974"></p>
<p>说明：5是假设计算出来的原来的索引。这样就验证了上述所描述的：扩容之后所以节点要么就在原来的位置，要么就被分配到”<strong>原位置+旧容量</strong>“这个位置。</p>
<p> 因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就可以了，是0的话索引没变，是1的话索引变成“原索引+oldCap(<strong>原位置+旧容量</strong>)”。可以看看下图为16扩充为32的resize示意图： </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20191117111211630.png" alt="image-20191117111211630"></p>
<p>正是因为这样巧妙的rehash方式，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，在resize的过程中保证了rehash之后每个桶上的节点数一定小于等于原来桶上的节点数，保证了rehash之后不会出现更严重的hash冲突，均匀的把之前的冲突的节点分散到新的桶中了。</p>
<h5 id="4-3-3-2源码resize方法的解读"><a href="#4-3-3-2源码resize方法的解读" class="headerlink" title="4.3.3.2源码resize方法的解读"></a>4.3.3.2源码resize方法的解读</h5><p>下面是代码的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//得到当前数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//如果当前数组等于null长度返回0，否则返回当前数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//当前阀值点 默认是12(16*0.75)</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果老的数组长度大于0</span></span><br><span class="line">    <span class="comment">//开始计算扩容后的大小</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">//修改阈值为int的最大值</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	没超过最大值，就扩充为原来的2倍</span></span><br><span class="line"><span class="comment">        	1)(newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY 扩大到2倍之后容量要小于最大容量</span></span><br><span class="line"><span class="comment">        	2）oldCap &gt;= DEFAULT_INITIAL_CAPACITY 原数组长度大于等于数组初始化长度16</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//阈值扩大一倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//老阈值点大于0 直接赋值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// 老阈值赋值给新的数组长度</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 直接使用默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//16</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算新的resize最大上限</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新的阀值 默认原来是12 乘以2之后变为24</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//创建新的哈希表</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">//newCap是新的数组长度--》32</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//判断旧数组是否等于空</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="comment">//遍历旧的哈希表的每个桶，重新计算桶里元素的新位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//原来的数据赋值为null 便于GC回收</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//判断数组是否有下一个引用</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">//没有下一个引用，说明不是链表，当前桶上只有一个键值对，直接插入</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//判断是否是红黑树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//说明是红黑树来处理冲突的，则调用相关方法把树分开</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 采用链表处理冲突</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//通过上述讲解的原理来计算节点的新位置</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                     	<span class="comment">//这里来判断如果等于true e这个节点在resize之后不需要移动位置</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-3-4-删除方法-remove"><a href="#4-3-4-删除方法-remove" class="headerlink" title="4.3.4 删除方法(remove)"></a>4.3.4 删除方法(remove)</h4><p> 理解了put方法之后，remove方法已经没什么难度了，所以重复的内容就不再做详细介绍了。</p>
<p> 删除的话就是首先先找到元素的位置，如果是链表就遍历链表找到元素之后删除。如果是用红黑树就遍历树然后找到之后做删除，树小于6的时候要转链表。 </p>
<p> 删除remove方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//remove方法的具体实现在removeNode方法中，所以我们重点看下removeNode方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> removeNode方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    	<span class="comment">//根据hash找到位置 </span></span><br><span class="line">    	<span class="comment">//如果当前key映射到的桶不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="comment">//如果桶上的节点就是要找的key，则将node指向该节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//说明节点存在下一个节点</span></span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//说明是以红黑树来处理的冲突，则获取红黑树要删除的节点</span></span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//判断是否以链表方式处理hash冲突，是的话则通过遍历链表来寻找要删除的节点</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比较找到的key的value和要删除的是否匹配</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="comment">//通过调用红黑树的方法来删除节点</span></span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    <span class="comment">//链表删除</span></span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                <span class="comment">//记录修改次数</span></span><br><span class="line">                ++modCount;</span><br><span class="line">                <span class="comment">//变动的数量</span></span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-5查找元素方法-get"><a href="#4-3-5查找元素方法-get" class="headerlink" title="4.3.5查找元素方法(get)"></a>4.3.5查找元素方法(get)</h4><p> 查找方法，通过元素的Key找到Value。 </p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>get方法主要调用的是getNode方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">//如果哈希表不为空并且key对应的桶上不为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        	判断数组元素是否相等</span></span><br><span class="line"><span class="comment">        	根据索引的位置检查第一个元素</span></span><br><span class="line"><span class="comment">        	注意：总是检查第一个元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果不是第一个元素，判断是否有后续节点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是红黑树，是的话调用红黑树中的getTreeNode方法获取节点</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 不是红黑树的话，那就是链表结构了，通过循环的方法判断链表中是否存在该key</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1.get方法实现的步骤：</p>
<p>​    1）通过hash值获取该key映射到的桶</p>
<p>​    2）桶上的key就是要查找的key,则直接找到并返回</p>
<p>​    3）桶上的key不是要找的key,则查看后续的节点：</p>
<p>​            a:如果后续节点是红黑树节点，通过调用红黑树的方法根据key获取value</p>
<p>​            b:如果后续节点是链表节点，则通过循环遍历链表根据key获取value</p>
<p>2.上述红黑树节点调用的是getTreeNode方法通过树形节点的find方法进行查找：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">           TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">               TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">               <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                   p = pl;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                   p = pr;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                   <span class="keyword">return</span> p;<span class="comment">//找到之后直接返回</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                   p = pr;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                   p = pl;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                         (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                   p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">               <span class="comment">//递归查找</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> q;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   p = pl;</span><br><span class="line">           &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>3.查找红黑树，由于之前添加时已经保证这个树是有序的了，因此查找时基本就是折半查找，效率更高。</p>
<p>4.这里和插入时一样，如果对比节点的哈希值和要查找的哈希值相等，就会判断key是否相等，相等就直接返回。不相等就从子树中递归查找。</p>
<p>5.</p>
<p>​    若为树，则在树中通过key.equals(k)查找，O(logn) </p>
<p>​    若为链表，则在链表中通过key.equals(k)查找，O(n)。</p>
<h4 id="4-3-6遍历HashMap集合几种方式"><a href="#4-3-6遍历HashMap集合几种方式" class="headerlink" title="4.3.6遍历HashMap集合几种方式"></a>4.3.6遍历HashMap集合几种方式</h4><p> 1、分别遍历Key和Values </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191117160455507.png" alt="image-20191117160455507"></p>
<p>2、使用Iterator迭代器迭代 </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191117160627369.png" alt="image-20191117160627369"></p>
<p>3、通过get方式（不建议使用）</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191117160733756.png" alt="image-20191117160733756"></p>
<p>说明：根据阿里开发手册，不建议使用这种方式，因为迭代两次。keySet获取Iterator一次，还有通过get又迭代一次。降低性能。</p>
<p>4.jdk8以后使用Map接口中的默认方法：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> forEach(BiConsumer&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V&gt; action) </span><br><span class="line">BiConsumer接口中的方法：</span><br><span class="line">	<span class="keyword">void</span> accept​(T t, U u) 对给定的参数执行此操作。  </span><br><span class="line">		参数 </span><br><span class="line">            t - 第一个输入参数 </span><br><span class="line">            u - 第二个输入参数 </span><br></pre></td></tr></table></figure>

<p>遍历代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; m1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        m1.put(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        m1.put(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        m1.forEach((key,value)-&gt;&#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;---&quot;</span>+value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-如何设计多个非重复的键值对要存储HashMap的初始化？"><a href="#5-如何设计多个非重复的键值对要存储HashMap的初始化？" class="headerlink" title="5.如何设计多个非重复的键值对要存储HashMap的初始化？"></a>5.如何设计多个非重复的键值对要存储HashMap的初始化？</h2><h3 id="5-1HashMap的初始化问题描述"><a href="#5-1HashMap的初始化问题描述" class="headerlink" title="5.1HashMap的初始化问题描述"></a>5.1HashMap的初始化问题描述</h3><p>​    如果我们确切的知道我们有多少键值对需要存储，那么我们在初始化HashMap的时候就应该指定它的容量，以防止HashMap自动扩容，影响使用效率。</p>
<p>​    默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(3-&gt;4、7-&gt;8、9-&gt;16) .这点我们在上述已经进行过讲解。</p>
<p> 《阿里巴巴Java开发手册》中建议我们设置HashMap的初始化容量。 </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//2.bmp" alt="image-20191117164748836"></p>
<p> 那么，为什么要这么建议？你有想过没有。 </p>
<p>当然，以上建议也是有理论支撑的。我们上面介绍过，HashMap的扩容机制，就是当达到扩容条件时会进行扩容。HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。在HashMap中，threshold = loadFactor * capacity。</p>
<p>所以，如果我们没有设置初始容量大小，随着元素的不断增加，HashMap会有可能发生多次扩容，而HashMap中的扩容机制决定了每次扩容都需要重建hash表，是非常影响性能的。</p>
<p>但是设置初始化容量，设置的数值不同也会影响性能，那么当我们已知HashMap中即将存放的KV个数的时候，容量设置成多少为好呢？</p>
<h3 id="5-2HashMap中容量的初始化"><a href="#5-2HashMap中容量的初始化" class="headerlink" title="5.2HashMap中容量的初始化"></a>5.2HashMap中容量的初始化</h3><p>当我们使用HashMap(int initialCapacity)来初始化容量的时候，jdk会默认帮我们计算一个相对合理的值当做初始容量。那么，是不是我们只需要把已知的HashMap中即将存放的元素个数直接传给initialCapacity就可以了呢？</p>
<p>关于这个值的设置，在《阿里巴巴Java开发手册》有以下建议：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87//image-20191117165438726.png" alt="image-20191117165438726"></p>
<p>也就是说，如果我们设置的默认值是7，经过Jdk处理之后，会被设置成8，但是，这个HashMap在元素个数达到 8*0.75 = 6的时候就会进行一次扩容，这明显是我们不希望见到的。我们应该尽量减少扩容。原因也已经分析过。</p>
<p>如果我们通过<strong>initialCapacity/ 0.75F + 1.0F</strong>计算，7/0.75 + 1 = 10 ,10经过Jdk处理之后，会被设置成16，这就大大的减少了扩容的几率。</p>
<p>当HashMap内部维护的哈希表的容量达到75%时（默认情况下），会触发rehash，而rehash的过程是比较耗费时间的。所以初始化容量要设置成<strong>initialCapacity/0.75 + 1</strong>的话，可以有效的减少冲突也可以减小误差。</p>
<p>所以，我可以认为，当我们明确知道HashMap中元素的个数的时候，把默认容量设置成<strong>initialCapacity/ 0.75F + 1.0F</strong>是一个在性能上相对好的选择，但是，同时也会牺牲些内存。</p>
<p>我们想要在代码中创建一个HashMap的时候，如果我们已知这个Map中即将存放的元素个数，给HashMap设置初始容量可以在一定程度上提升效率。</p>
<p>但是，JDK并不会直接拿用户传进来的数字当做默认容量，而是会进行一番运算，最终得到一个2的幂。原因也已经分析过。</p>
<p>但是，为了最大程度的避免扩容带来的性能消耗，我们建议可以把默认容量的数字设置成<strong>initialCapacity/ 0.75F + 1.0F</strong>。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2021/04/05/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h2><ul>
<li>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含<br>运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</li>
</ul>
<span id="more"></span>
<h3 id="1-Docker镜像加载原理"><a href="#1-Docker镜像加载原理" class="headerlink" title="1.Docker镜像加载原理"></a>1.Docker镜像加载原理</h3><ul>
<li>UnionFS（联合文件系统）</li>
</ul>
<blockquote>
<p>UnionFS（联合文件系统）：<strong>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统</strong>，<br>它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系<br>统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基<br>础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br>特性：<strong>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件</strong><br><strong>系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</strong></p>
</blockquote>
<ul>
<li>Docker镜像加载原理</li>
</ul>
<blockquote>
<p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启<br>动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是<br>一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已<br>由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标<br>准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>
</blockquote>
<ul>
<li>分层镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis  #拉取redis</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152500153.png" alt="image-20210306152500153"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect redis:latest # 查看镜像分层的方式</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152556075.png" alt="image-20210306152556075"></p>
<ul>
<li>为什么Docker镜像采用分层的结构</li>
</ul>
<blockquote>
<p>资源共享  比如有多个镜像都从相同的Base镜像构建而来，那么宿主机<br>只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服<br>务了，而且镜像的每一层都可以被共享。</p>
</blockquote>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>所有的 Docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之<br>上，创建新的镜像层。<br>举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果<br>在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就<br>会创建第三个镜像层。<br>该镜像当前已经包含 3 个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152903863.png" alt="image-20210306152903863"></p>
<p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了<br>一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152919748.png" alt="image-20210306152919748"></p>
<p>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有 6 个文件，这是因为最上层中的文件<br>7 是文件 5 的一个更新版本。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152937874.png" alt="image-20210306152937874"></p>
<p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新<br>镜像层添加到镜像当中。<br>Docker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统<br>一的文件系统。<br>Linux 上可用的存储引擎有 AUFS、Overlay2、Device Mapper、Btrfs 以及 ZFS。顾名思义，每种存储<br>引擎都基于 Linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。<br>Docker 在 Windows 上仅支持 windowsfilter 一种存储引擎，该引擎基于 NTFS 文件系统之上实现了分<br>层和 CoW[1]。<br>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306153005448.png" alt="image-20210306153005448"></p>
<ul>
<li>特点</li>
</ul>
<p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！<br>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p>
<h3 id="2-镜像Commit"><a href="#2-镜像Commit" class="headerlink" title="2.镜像Commit"></a>2.镜像Commit</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit # 从容器创建一个新的镜像</span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、从Docker Hub 下载tomcat镜像到本地并运行 -it 交互终端 -p 端口映射</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：坑爹：docker启动官方tomcat镜像的容器，发现404是因为使用了加速器，而加速器里的tomcat的webapps下没有root等文件！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载tomcat官方镜像，就是这个镜像（阿里云里的tomcat的webapps下没有任何文件）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入tomcat查看<span class="built_in">cd</span>到webapps下发现全部空的，反而有个webapps.dist里有对应文件，cp -r到webapps下！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2.进入到tomcat目录中</span></span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line">/usr/local/tomcat # ce webapps/</span><br><span class="line">/usr/local/tomcat/webapps # ls -l # 查看是否存在 docs文件夹</span><br><span class="line">/usr/local/tomcat/webapps # curl localhost:8080/docs/  # 可以看到 docs 返回的</span><br><span class="line">内容</span><br><span class="line">/usr/local/tomcat/webapps # rm -rf docs # 删除它</span><br><span class="line">/usr/local/tomcat/webapps # curl localhost:8080/docs/  # 再次访问返回404</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、当前运行的tomcat实例就是一个没有docs的容器，我们使用它为模板commit一个没有docs的</span></span><br><span class="line">tomcat新镜像， tomcat02</span><br><span class="line"></span><br><span class="line">docker ps -l  # 查看容器的id</span><br><span class="line"></span><br><span class="line">[root@bogon ~]# docker ps -l</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">46e66e5d6c69        docker.io/tomcat    &quot;catalina.sh run&quot;   10 minutes ago      Up 10 minutes       8080/tcp            focused_khorana</span><br><span class="line">[root@bogon ~]# docker commit -a=&quot;zhuangkang&quot; -m=&quot;no tomcat docs&quot; 46e66e5d6c69 tomcat02:1.1</span><br><span class="line">sha256:a054127ff9bcfbbfad569cfc1cf52a20987774320ba060e4989f412cb7650f60</span><br><span class="line">[root@bogon ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">tomcat02            1.1                 a054127ff9bc        About a minute ago   672 MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、这个时候，我们的镜像都是可以使用的，大家可以启动原来的tomcat，和我们新的tomcat02来</span></span><br><span class="line">测试看看！</span><br><span class="line">[root@kuangshen ~]# docker run -it -p 8080:8080 tomcat02:1.1</span><br><span class="line"></span><br><span class="line">测试 LinuxIP:8080 访问成功！</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306154214974.png" alt="image-20210306154214974"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306155234112.png" alt="image-20210306155234112"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306155710543.png" alt="image-20210306155710543"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306160248850.png" alt="image-20210306160248850"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306160727354.png" alt="image-20210306160727354"></p>
<h2 id="2-容器数据卷"><a href="#2-容器数据卷" class="headerlink" title="2.容器数据卷"></a>2.容器数据卷</h2><h3 id="2-1docker理念回顾"><a href="#2-1docker理念回顾" class="headerlink" title="2.1docker理念回顾"></a>2.1docker理念回顾</h3><p>将应用和运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对于数据的要求，是希望能够<br>持久化的！<br>就好比，你安装一个MySQL，结果你把容器删了，就相当于删库跑路了，这TM也太扯了吧！<br>所以我们希望容器之间有可能可以共享数据，Docker容器产生的数据，如果不通过docker commit 生成<br>新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了！这样是行<br>不通的！<br>为了能保存数据在Docker中我们就可以使用卷！让数据挂载到我们本地！这样数据就不会因为容器删除<br>而丢失了！</p>
<h3 id="2-2作用"><a href="#2-2作用" class="headerlink" title="2.2作用"></a>2.2作用</h3><p>作用：<br>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此<br>能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：<br>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂<br>载的数据卷。</p>
<h3 id="2-3特点"><a href="#2-3特点" class="headerlink" title="2.3特点"></a>2.3特点</h3><p>1、数据卷可在容器之间共享或重用数据<br>2、卷中的更改可以直接生效<br>3、数据卷中的更改不会包含在镜像的更新中<br>4、数据卷的生命周期一直持续到没有容器使用它为止<br><strong>所以：总结一句话： 就是容器的持久化，以及容器间的继承和数据共享！</strong></p>
<h2 id="3-使用数据卷"><a href="#3-使用数据卷" class="headerlink" title="3.使用数据卷"></a>3.使用数据卷</h2><ul>
<li>方式一：容器中 直接用命令来添加</li>
</ul>
<p>挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"># 测试</span><br><span class="line">[root@root~]# docker run -it -v &#x2F;home&#x2F;ceshi:&#x2F;home centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>查看数据卷是否挂载成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure>

<p>测试容器和宿主机之间数据是否共享！</p>
<p>测试容器停止退出后，主机修改数据是否会同步！</p>
<ol>
<li>停止容器</li>
<li>在宿主机上修改文件，增加些内容</li>
<li>启动刚才停止的容器</li>
<li>然后查看对应的文件，发现数据依旧同步！ok</li>
</ol>
<h2 id="4-使用docker安装mysql"><a href="#4-使用docker安装mysql" class="headerlink" title="4.使用docker安装mysql"></a>4.使用docker安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.拉取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3启动容器 -e 环境变量！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意： mysql的数据应该不丢失！先体验下 -v 挂载卷！</span></span><br><span class="line">docker run -d -p 3310:3306 -v</span><br><span class="line">/home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e</span><br><span class="line">MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、使用本地的sqlyog连接测试一下 3310</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、查看本地的 /home/mysql 目录 <span class="built_in">pwd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、删除mysql容器</span></span><br><span class="line">docker rm -f mysql01</span><br></pre></td></tr></table></figure>

<h2 id="5-匿名和具名挂载"><a href="#5-匿名和具名挂载" class="headerlink" title="5.匿名和具名挂载"></a>5.匿名和具名挂载</h2><p>以nginx为例！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">-v 卷名:/容器内路径</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看挂载的路径</span></span><br><span class="line">docker volume inspect nginxconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 怎么判断挂载的是卷名而不是本机目录名？</span></span><br><span class="line">不是/开始就是卷名，是/开始就是目录名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变文件的读写权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro: <span class="built_in">readonly</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rw: readwrite</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器对我们挂载出来的内容的读写权限</span></span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure>

<h2 id="6-DockerFile"><a href="#6-DockerFile" class="headerlink" title="6.DockerFile"></a>6.DockerFile</h2><p>微服务打包成镜像，任何装了Docker的地方，都可以下载使用，极其的方便。<br>流程：开发应用=&gt;DockerFile=&gt;打包为镜像=&gt;上传到仓库（私有仓库，公有仓库）=&gt; 下载镜像 =&gt; 启动<br>运行。</p>
<h3 id="6-1概念"><a href="#6-1概念" class="headerlink" title="6.1概念"></a>6.1概念</h3><p>dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>构建步骤：<br>1、编写DockerFile文件<br>2、docker build 构建镜像<br>3、docker run</p>
<h3 id="6-2DockerFile构建过程"><a href="#6-2DockerFile构建过程" class="headerlink" title="6.2DockerFile构建过程"></a>6.2DockerFile构建过程</h3><h4 id="6-2-1基础知识"><a href="#6-2-1基础知识" class="headerlink" title="6.2.1基础知识"></a>6.2.1基础知识</h4><p>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2、指令按照从上到下，顺序执行<br>3、# 表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p>
<h4 id="6-2-2流程"><a href="#6-2-2流程" class="headerlink" title="6.2.2流程"></a>6.2.2流程</h4><p>1、docker从基础镜像运行一个容器<br>2、执行一条指令并对容器做出修改<br>3、执行类似 docker commit 的操作提交一个新的镜像层<br>4、Docker再基于刚提交的镜像运行一个新容器<br>5、执行dockerfile中的下一条指令直到所有指令都执行完成！</p>
<h4 id="6-2-3说明"><a href="#6-2-3说明" class="headerlink" title="6.2.3说明"></a>6.2.3说明</h4><p>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。<br>DockerFile 是软件的原材料 （代码）<br>Docker 镜像则是软件的交付品 （.apk）<br>Docker 容器则是软件的运行状态 （客户下载安装执行）<br>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可！</p>
<p>DockerFile：需要定义一个DockerFile，DockerFile定义了进程需要的一切东西。DockerFile涉及的内容<br>包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进<br>程和内核进程（当引用进行需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace的权<br>限控制）等等。<br>Docker镜像：在DockerFile 定义了一个文件之后，Docker build 时会产生一个Docker镜像，当运行<br>Docker 镜像时，会真正开始提供服务；<br>Docker容器：容器是直接提供服务的。</p>
<h2 id="7-DockerFile指令"><a href="#7-DockerFile指令" class="headerlink" title="7.DockerFile指令"></a>7.DockerFile指令</h2><h4 id="7-1关键字"><a href="#7-1关键字" class="headerlink" title="7.1关键字"></a>7.1关键字</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM     # 基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line">MAINTAINER  # 镜像维护者的姓名混合邮箱地址</span><br><span class="line">RUN      # 容器构建时需要运行的命令</span><br><span class="line">EXPOSE    # 当前容器对外保留出的端口</span><br><span class="line">WORKDIR    # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span><br><span class="line">ENV      # 用来在构建镜像过程中设置环境变量</span><br><span class="line">ADD      # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span><br><span class="line">COPY     # 类似ADD，拷贝文件和目录到镜像中！</span><br><span class="line">VOLUME    # 容器数据卷，用于数据保存和持久化工作</span><br><span class="line">CMD      # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最</span><br><span class="line">后一个生效！</span><br><span class="line">ENTRYPOINT  # 指定一个容器启动时要运行的命令！和CMD一样</span><br><span class="line">ONBUILD    # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的</span><br><span class="line">ONBUILD被触发</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306162408373.png" alt="image-20210306162408373"></p>
<h3 id="7-2自定义一个centos"><a href="#7-2自定义一个centos" class="headerlink" title="7.2自定义一个centos"></a>7.2自定义一个centos</h3><h4 id="7-2-1-编写DockerFile"><a href="#7-2-1-编写DockerFile" class="headerlink" title="7.2.1.编写DockerFile"></a>7.2.1.编写DockerFile</h4><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306162536380.png" alt="image-20210306162536380"></p>
<p>目的：使我们自己的镜像具备如下：登陆后的默认路径、vim编辑器、查看网络配置ifconfig支持<br>准备编写DockerFlie文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.创建一个目录</span></span><br><span class="line">mkdir dockerfile-test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.编写文件</span></span><br><span class="line">vim mydockerfile-test</span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zhuangkang&lt;2247830091@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local # 默认路径</span><br><span class="line">WORKDIR $MYPATH  # 工作路径</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;----------end--------&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过cat命令查看</span></span><br><span class="line">cat mydockerfile-test</span><br></pre></td></tr></table></figure>

<h4 id="7-2-2-构建"><a href="#7-2-2-构建" class="headerlink" title="7.2.2.构建"></a>7.2.2.构建</h4><p>docker build -f dockerfile地址 -t 新镜像名字:TAG .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 看到下面就是成功！</span></span><br><span class="line">Successfully built 18888023317c</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>

<h4 id="7-2-3-运行"><a href="#7-2-3-运行" class="headerlink" title="7.2.3. 运行"></a>7.2.3. 运行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it 新镜像名字:TAG</span><br></pre></td></tr></table></figure>

<h4 id="7-2-4-列出镜像地的变更历史"><a href="#7-2-4-列出镜像地的变更历史" class="headerlink" title="7.2.4.列出镜像地的变更历史"></a>7.2.4.列出镜像地的变更历史</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker history 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="8-Docker网络"><a href="#8-Docker网络" class="headerlink" title="8.Docker网络"></a>8.Docker网络</h2><p>首先清空所有容器和镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)       # 删除所有容器</span><br><span class="line">docker rmi -f $(docker images -qa)      # 删除全部镜像</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163506426.png" alt="image-20210306163506426"></p>
<p>实际场景中，我们开发了很多微服务项目，那些微服务项目都要连接数据库，需要指定数据库的url地<br>址，通过ip。但是我们用Docker管理的话，假设数据库出问题了，我们重新启动运行一个，这个时候数<br>据库的地址就会发生变化，docker会给每个容器都分配一个ip，且容器和容器之间是可以互相访问的。<br>我们可以测试下容器之间能不能ping通过：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">12: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:acff:fe11:2/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@bogon ~]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.060 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.045 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-1原理"><a href="#8-1原理" class="headerlink" title="8.1原理"></a>8.1原理</h4><ul>
<li><p>1、每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair<br>技术！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164255054.png" alt="image-20210306164405468"></p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163525959.png" alt="image-20210306163525959"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163607386.png" alt="image-20210306163607386"></p>
<ul>
<li>2.每启动一个容器，linux主机就会多了一个虚拟网卡。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat02 tomcat	# 再启动一个tomcat2</span><br><span class="line"></span><br><span class="line">docker exec -it tomcat02 ip addr # 查看ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 观察现象：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat --- linux主机 vethc8584ea@if122 ---- 容器内 eth0@if123</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat --- linux主机 veth021eeea@if124 ---- 容器内 eth0@if125</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3.网络模型图</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164643127.png" alt="image-20210306164643127"></p>
<ul>
<li><p>4.结论</p>
</li>
<li><p>tomcat1和tomcat2共用一个路由器。是的，他们使用的一个，就是docker0。任何一个容器启动<br>默认都是docker0网络。<br>docker默认会给容器分配一个可用ip。</p>
</li>
<li><p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据<br>Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网<br>关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接<br>通信。</p>
</li>
</ul>
<h3 id="8-2所有网络模式"><a href="#8-2所有网络模式" class="headerlink" title="8.2所有网络模式"></a>8.2所有网络模式</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164928025.png" alt="image-20210306164928025"></p>
<h2 id="9-部署Redis集群"><a href="#9-部署Redis集群" class="headerlink" title="9.部署Redis集群"></a>9.部署Redis集群</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动6个容器</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf</span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入一个redis，注意这里是 sh命令</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379</span><br><span class="line">172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --</span><br><span class="line">cluster-replicas 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接集群</span></span><br><span class="line">redis-cli -c</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> a b</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止到存值的容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再次get a，发现依旧可以获取值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点，发现高可用完全没问题</span></span><br></pre></td></tr></table></figure>

<h2 id="10-IDEA整合Redis"><a href="#10-IDEA整合Redis" class="headerlink" title="10.IDEA整合Redis"></a>10.IDEA整合Redis</h2><ul>
<li>1.创建一个SpringBoot项目</li>
<li>2.创建一个HelloController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.启动测试，确认端口没有冲突</li>
<li>4.用Maven打成jar包</li>
<li>打包镜像</li>
<li>1.在项目下编写 Dockerfile 文件，将打包好的jar包拷贝到Dockerfile同级目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器只有dockerfile和jar在同级目录</span></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器内要暴露的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>2.将Dockerfile 和 项目的 jar 包上传到linux服务器上，构建运行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">docker build -t idea-ks .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">docker run -d -P --name idea-ks idea-ks</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">curl localhost:32779</span><br><span class="line">curl localhost:32779/hello</span><br></pre></td></tr></table></figure>

<h2 id="11-常用命令总结"><a href="#11-常用命令总结" class="headerlink" title="11.常用命令总结"></a>11.常用命令总结</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/20200526095411.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> attach    Attach to a running container                 <span class="comment"># 当前 shell 下 attach 连接指定运行镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> build     Build an image from a Dockerfile              <span class="comment"># 通过 Dockerfile 定制镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> commit    Create a new image from a container changes   <span class="comment"># 提交当前容器为新的镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp        Copy files/folders from the containers filesystem to the host path   <span class="comment">#从容器中拷贝指定文件或者目录到宿主机中</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> create    Create a new container                        <span class="comment"># 创建一个新的容器，同 run，但不启动容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> diff      Inspect changes on a container<span class="string">&#x27;s filesystem   # 查看 docker 容器变化</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> events    Get real time events from the server          <span class="comment"># 从 docker 服务获取容器实时事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span>      Run a <span class="built_in">command</span> <span class="keyword">in</span> an existing container        <span class="comment"># 在已存在的容器上运行命令</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span>    Stream the contents of a container as a tar archive   <span class="comment"># 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span>   Show the <span class="built_in">history</span> of an image                  <span class="comment"># 展示一个镜像形成历史</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> images    List images                                   <span class="comment"># 列出系统当前镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> import    Create a new filesystem image from the contents of a tarball <span class="comment"># 从tar包中的内容创建一个新的文件系统映像[对应export]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> info      Display system-wide information               <span class="comment"># 显示系统相关信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> inspect   Return low-level information on a container   <span class="comment"># 查看容器详细信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span>      Kill a running container                      <span class="comment"># kill 指定 docker 容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> load      Load an image from a tar archive              <span class="comment"># 从一个 tar 包中加载一个镜像[对应 save]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> login     Register or Login to the docker registry server    <span class="comment"># 注册或者登陆一个 docker 源服务器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">logout</span>    Log out from a Docker registry server          <span class="comment"># 从当前 Docker registry 退出</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> logs      Fetch the logs of a container                 <span class="comment"># 输出当前容器日志信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> port      Lookup the public-facing port <span class="built_in">which</span> is NAT-ed to PRIVATE_PORT    <span class="comment"># 查看映射端口对应的容器内部源端口</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pause     Pause all processes within a container        <span class="comment"># 暂停容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps        List containers                               <span class="comment"># 列出容器列表</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pull      Pull an image or a repository from the docker registry server   <span class="comment"># 从docker镜像源服务器拉取指定镜像或者库镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> push      Push an image or a repository to the docker registry server   <span class="comment"># 推送指定镜像或者库镜像至docker源服务器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> restart   Restart a running container                   <span class="comment"># 重启运行的容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm        Remove one or more containers                 <span class="comment"># 移除一个或者多个容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> rmi       Remove one or more images             <span class="comment"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> run       Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container              <span class="comment"># 创建一个新的容器并运行一个命令</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> save      Save an image to a tar archive                <span class="comment"># 保存一个镜像为一个 tar 包[对应 load]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> search    Search <span class="keyword">for</span> an image on the Docker Hub         <span class="comment"># 在 docker hub 中搜索镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> start     Start a stopped containers                    <span class="comment"># 启动容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> stop      Stop a running containers                     <span class="comment"># 停止容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tag       Tag an image into a repository                <span class="comment"># 给源中镜像打标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> top       Lookup the running processes of a container   <span class="comment"># 查看容器中运行的进程信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> unpause   Unpause a paused container                    <span class="comment"># 取消暂停容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> version   Show the docker version information           <span class="comment"># 查看 docker 版本号</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">wait</span>      Block until a container stops, <span class="keyword">then</span> <span class="built_in">print</span> its <span class="built_in">exit</span> code   <span class="comment"># 截取容器停止时的退出状态值</span></span></span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Spring框架</title>
    <url>/2021/04/02/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>学习地址:<a href="https://www.bilibili.com/video/BV1Np4y1z7BU?p=1">https://www.bilibili.com/video/BV1Np4y1z7BU?p=1</a></strong></p>
<h1 id="1，自定义Spring框架"><a href="#1，自定义Spring框架" class="headerlink" title="1，自定义Spring框架"></a>1，自定义Spring框架</h1><h2 id="1-1-spring使用回顾"><a href="#1-1-spring使用回顾" class="headerlink" title="1.1 spring使用回顾"></a>1.1 spring使用回顾</h2><p>自定义spring框架前，先回顾一下spring框架的使用，从而分析spring的核心，并对核心功能进行模拟。</p>
<ul>
<li><p>数据访问层。定义UserDao接口及其子实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userDaoImpl ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务逻辑层。定义UserService接口及其子实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userServiceImpl ...&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义UserController类，使用main方法模拟controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建spring容器对象</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从IOC容器中获取UserService对象</span></span><br><span class="line">        UserService userService = applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        <span class="comment">//调用UserService对象的add方法</span></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写配置文件。在类路径下编写一个名为ApplicationContext.xml的配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zhuang.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;userDao&quot; class=&quot;com.zhuang.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>代码运行结果如下：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/Snipaste_2021-04-01_16-16-05.png"></p>
</li>
</ul>
<p>通过上面代码及结果可以看出：</p>
<ul>
<li>userService对象是从applicationContext容器对象获取到的，也就是userService对象交由spring进行管理。</li>
<li>上面结果可以看到调用了UserDao对象中的add方法，也就是说UserDao子实现类对象也交由spring管理了。</li>
<li>UserService中的userDao变量我们并没有进行赋值，但是可以正常使用，说明spring已经将UserDao对象赋值给了userDao变量。</li>
</ul>
<p>上面三点体现了Spring框架的IOC（Inversion of Control）和DI（Dependency Injection, DI）</p>
<h2 id="1-2-spring核心功能结构"><a href="#1-2-spring核心功能结构" class="headerlink" title="1.2 spring核心功能结构"></a>1.2 spring核心功能结构</h2><p>Spring大约有20个模块，由1300多个不同的文件构成。这些模块可以分为:</p>
<p>核心容器、AOP和设备支持、数据访问与集成、Web组件、通信报文和集成测试等，下面是 Spring 框架的总体架构图：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200429111324770.png"></p>
<p>核心容器由 beans、core、context 和 expression（Spring Expression Language，SpEL）4个模块组成。</p>
<ul>
<li>spring-beans和spring-core模块是Spring框架的核心模块，包含了控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）。BeanFactory使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。BeanFactory属于延时加载，也就是说在实例化容器对象后并不会自动实例化Bean，只有当Bean被使用时，BeanFactory才会对该 Bean 进行实例化与依赖关系的装配。</li>
<li>spring-context模块构架于核心模块之上，扩展了BeanFactory，为它添加了Bean生命周期控制、框架事件体系及资源加载透明化等功能。此外，该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与BeanFactory不同，ApplicationContext实例化后会自动对所有的单实例Bean进行实例化与依赖关系的装配，使之处于待用状态。</li>
<li>spring-context-support模块是对Spring IoC容器及IoC子容器的扩展支持。</li>
<li>spring-context-indexer模块是Spring的类管理组件和Classpath扫描组件。</li>
<li>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也可以方便地调用对象方法，以及操作数组、集合等。它的语法类似于传统EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。EL的特性是基于Spring产品的需求而设计的，可以非常方便地同Spring IoC进行交互。</li>
</ul>
<h3 id="1-1-1-bean概述"><a href="#1-1-1-bean概述" class="headerlink" title="1.1.1 bean概述"></a>1.1.1 bean概述</h3><p>Spring 就是面向 <code>Bean</code> 的编程（BOP,Bean Oriented Programming），Bean 在 Spring 中处于核心地位。Bean对于Spring的意义就像Object对于OOP的意义一样，Spring中没有Bean也就没有Spring存在的意义。Spring IoC容器通过配置文件或者注解的方式来管理bean对象之间的依赖关系。</p>
<p>spring中bean用于对一个类进行封装。如下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为什么Bean如此重要呢？</p>
<ul>
<li>spring 将bean对象交由一个叫IOC容器进行管理。</li>
<li>bean对象之间的依赖关系在配置文件中体现，并由spring完成。</li>
</ul>
<h2 id="1-3-Spring-IOC相关接口分析"><a href="#1-3-Spring-IOC相关接口分析" class="headerlink" title="1.3 Spring IOC相关接口分析"></a>1.3 Spring IOC相关接口分析</h2><h3 id="1-3-1-BeanFactory解析"><a href="#1-3-1-BeanFactory解析" class="headerlink" title="1.3.1 BeanFactory解析"></a>1.3.1 BeanFactory解析</h3><p>Spring中Bean的创建是典型的工厂模式，这一系列的Bean工厂，即IoC容器，为开发者管理对象之间的依赖关系提供了很多便利和基础服务，在Spring中有许多IoC容器的实现供用户选择，其相互关系如下图所示。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200429185050396.png"></p>
<p>其中，BeanFactory作为最顶层的一个接口，定义了IoC容器的基本功能规范，BeanFactory有三个重要的子接口：ListableBeanFactory、HierarchicalBeanFactory和AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是DefaultListableBeanFactory，它实现了所有的接口。</p>
<p>那么为何要定义这么多层次的接口呢？</p>
<p>每个接口都有它的使用场合，主要是为了区分在Spring内部操作过程中对象的传递和转化，对对象的数据访问所做的限制。例如，</p>
<ul>
<li>ListableBeanFactory接口表示这些Bean可列表化。</li>
<li>HierarchicalBeanFactory表示这些Bean 是有继承关系的，也就是每个 Bean 可能有父 Bean</li>
<li>AutowireCapableBeanFactory 接口定义Bean的自动装配规则。</li>
</ul>
<p>这三个接口共同定义了Bean的集合、Bean之间的关系及Bean行为。最基本的IoC容器接口是BeanFactory，来看一下它的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	String FACTORY_BEAN_PREFIX = <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据bean的名称获取IOC容器中的的bean对象</span></span><br><span class="line">	<span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	<span class="comment">//根据bean的名称获取IOC容器中的的bean对象，并指定获取到的bean对象的类型，这样我们使用时就不需要进行类型强转了</span></span><br><span class="line">	&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	<span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	</span><br><span class="line">	&lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span></span>;</span><br><span class="line">	&lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断容器中是否包含指定名称的bean对象</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line">	<span class="comment">//根据bean的名称判断是否是单例</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">	String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在BeanFactory里只对IoC容器的基本行为做了定义，根本不关心你的Bean是如何定义及怎样加载的。正如我们只关心能从工厂里得到什么产品，不关心工厂是怎么生产这些产品的。</p>
<p>BeanFactory有一个很重要的子接口，就是ApplicationContext接口，该接口主要来规范容器中的bean对象是非延时加载，即在创建容器对象的时候就对象bean进行初始化，并存储到一个容器中。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200430220155371.png"></p>
<p>要知道工厂是如何产生对象的，我们需要看具体的IoC容器实现，Spring提供了许多IoC容器实现，比如：</p>
<ul>
<li>ClasspathXmlApplicationContext : 根据类路径加载xml配置文件，并创建IOC容器对象。</li>
<li>FileSystemXmlApplicationContext ：根据系统路径加载xml配置文件，并创建IOC容器对象。</li>
<li>AnnotationConfigApplicationContext ：加载注解类配置，并创建IOC容器。</li>
</ul>
<h3 id="1-3-2-BeanDefinition解析"><a href="#1-3-2-BeanDefinition解析" class="headerlink" title="1.3.2 BeanDefinition解析"></a>1.3.2 BeanDefinition解析</h3><p>Spring IoC容器管理我们定义的各种Bean对象及其相互关系，而Bean对象在Spring实现中是以BeanDefinition来描述的，如下面配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">bean标签还有很多属性：</span><br><span class="line">	scope、init-method、destory-method等。</span><br></pre></td></tr></table></figure>

<p>其继承体系如下图所示。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200429204239868.png"></p>
<h3 id="1-3-3-BeanDefinitionReader解析"><a href="#1-3-3-BeanDefinitionReader解析" class="headerlink" title="1.3.3 BeanDefinitionReader解析"></a>1.3.3 BeanDefinitionReader解析</h3><p>Bean的解析过程非常复杂，功能被分得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活性，以应对可能的变化。Bean的解析主要就是对Spring配置文件的解析。这个解析过程主要通过BeanDefinitionReader来完成，看看Spring中BeanDefinitionReader的类结构图，如下图所示。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200429204700956.png"></p>
<p>看看BeanDefinitionReader接口定义的功能来理解它具体的作用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取BeanDefinitionRegistry注册器对象</span></span><br><span class="line">	<span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">ClassLoader <span class="title">getBeanClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">BeanNameGenerator <span class="title">getBeanNameGenerator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		下面的loadBeanDefinitions都是加载bean定义，从指定的资源中</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String... locations)</span> <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-4-BeanDefinitionRegistry解析"><a href="#1-3-4-BeanDefinitionRegistry解析" class="headerlink" title="1.3.4 BeanDefinitionRegistry解析"></a>1.3.4 BeanDefinitionRegistry解析</h3><p>BeanDefinitionReader用来解析bean定义，并封装BeanDefinition对象，而我们定义的配置文件中定义了很多bean标签，所以就有一个问题，解析的BeanDefinition对象存储到哪儿？答案就是BeanDefinition的注册中心，而该注册中心顶层接口就是BeanDefinitionRegistry。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title">AliasRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//往注册表中注册bean</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从注册表中删除指定名称的bean</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取注册表中指定名称的bean</span></span><br><span class="line">	<span class="function">BeanDefinition <span class="title">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//判断注册表中是否已经注册了指定名称的bean</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String beanName)</span></span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//获取注册表中所有的bean的名称</span></span><br><span class="line">	String[] getBeanDefinitionNames();</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isBeanNameInUse</span><span class="params">(String beanName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承结构图如下：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6image-20200429211132185.png"></p>
<p>从上面类图可以看到BeanDefinitionRegistry接口的子实现类主要有以下几个：</p>
<ul>
<li><p>DefaultListableBeanFactory</p>
<p>在该类中定义了如下代码，就是用来注册bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>SimpleBeanDefinitionRegistry</p>
<p>在该类中定义了如下代码，就是用来注册bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-5-创建容器"><a href="#1-3-5-创建容器" class="headerlink" title="1.3.5 创建容器"></a>1.3.5 创建容器</h3><p>ClassPathXmlApplicationContext对Bean配置资源的载入是从refresh（）方法开始的。refresh（）方法是一个模板方法，规定了 IoC 容器的启动流程，有些逻辑要交给其子类实现。它对 Bean 配置资源进行载入，ClassPathXmlApplicationContext通过调用其父类AbstractApplicationContext的refresh（）方法启动整个IoC容器对Bean定义的载入过程。</p>
<h2 id="1-4-自定义SpringIOC"><a href="#1-4-自定义SpringIOC" class="headerlink" title="1.4 自定义SpringIOC"></a>1.4 自定义SpringIOC</h2><p>现要对下面的配置文件进行解析，并自定义Spring框架的IOC对涉及到的对象进行管理。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-1-定义bean相关的pojo类"><a href="#1-4-1-定义bean相关的pojo类" class="headerlink" title="1.4.1 定义bean相关的pojo类"></a>1.4.1 定义bean相关的pojo类</h3><h4 id="7-4-1-1-PropertyValue类"><a href="#7-4-1-1-PropertyValue类" class="headerlink" title="7.4.1.1 PropertyValue类"></a>7.4.1.1 PropertyValue类</h4><p>用于封装bean的属性，体现到上面的配置文件就是封装bean标签的子标签property标签数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String ref;</span><br><span class="line">  <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PropertyValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PropertyValue</span><span class="params">(String name, String ref,String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.ref = ref;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRef</span><span class="params">(String ref)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ref = ref;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-1-2-MutablePropertyValues类"><a href="#7-4-1-2-MutablePropertyValues类" class="headerlink" title="7.4.1.2 MutablePropertyValues类"></a>7.4.1.2 MutablePropertyValues类</h4><p>一个bean标签可以有多个property子标签，所以再定义一个MutablePropertyValues类，用来存储并管理多个PropertyValue对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutablePropertyValues</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">PropertyValue</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;PropertyValue&gt; propertyValueList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MutablePropertyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.propertyValueList = <span class="keyword">new</span> ArrayList&lt;PropertyValue&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MutablePropertyValues</span><span class="params">(List&lt;PropertyValue&gt; propertyValueList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.propertyValueList = (propertyValueList != <span class="keyword">null</span> ? propertyValueList : <span class="keyword">new</span> ArrayList&lt;PropertyValue&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PropertyValue[] getPropertyValues() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.propertyValueList.toArray(<span class="keyword">new</span> PropertyValue[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValue <span class="title">getPropertyValue</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (PropertyValue pv : <span class="keyword">this</span>.propertyValueList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pv.getName().equals(propertyName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> pv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;PropertyValue&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValueList.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.propertyValueList.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutablePropertyValues <span class="title">addPropertyValue</span><span class="params">(PropertyValue pv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.propertyValueList.size(); i++) &#123;</span><br><span class="line">            PropertyValue currentPv = <span class="keyword">this</span>.propertyValueList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (currentPv.getName().equals(pv.getName())) &#123;</span><br><span class="line">                <span class="keyword">this</span>.propertyValueList.set(i, <span class="keyword">new</span> PropertyValue(pv.getName(),pv.getRef(), pv.getValue()));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.propertyValueList.add(pv);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPropertyValue(propertyName) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-1-3-BeanDefinition类"><a href="#7-4-1-3-BeanDefinition类" class="headerlink" title="7.4.1.3 BeanDefinition类"></a>7.4.1.3 BeanDefinition类</h4><p>BeanDefinition类用来封装bean信息的，主要包含id（即bean对象的名称）、class（需要交由spring管理的类的全类名）及子标签property数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanDefinition</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MutablePropertyValues propertyValues;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        propertyValues = <span class="keyword">new</span> MutablePropertyValues();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValues</span><span class="params">(MutablePropertyValues propertyValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.propertyValues = propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutablePropertyValues <span class="title">getPropertyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-2-定义注册表相关类"><a href="#1-4-2-定义注册表相关类" class="headerlink" title="1.4.2 定义注册表相关类"></a>1.4.2 定义注册表相关类</h3><h4 id="1-4-2-1-BeanDefinitionRegistry接口"><a href="#1-4-2-1-BeanDefinitionRegistry接口" class="headerlink" title="1.4.2.1 BeanDefinitionRegistry接口"></a>1.4.2.1 BeanDefinitionRegistry接口</h4><p>BeanDefinitionRegistry接口定义了注册表的相关操作，定义如下功能：</p>
<ul>
<li>注册BeanDefinition对象到注册表中</li>
<li>从注册表中删除指定名称的BeanDefinition对象</li>
<li>根据名称从注册表中获取BeanDefinition对象</li>
<li>判断注册表中是否包含指定名称的BeanDefinition对象</li>
<li>获取注册表中BeanDefinition对象的个数</li>
<li>获取注册表中所有的BeanDefinition的名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册BeanDefinition对象到注册表中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从注册表中删除指定名称的BeanDefinition对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据名称从注册表中获取BeanDefinition对象</span></span><br><span class="line">    <span class="function">BeanDefinition <span class="title">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String beanName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    String[] getBeanDefinitionNames();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-2-2-SimpleBeanDefinitionRegistry类"><a href="#1-4-2-2-SimpleBeanDefinitionRegistry类" class="headerlink" title="1.4.2.2 SimpleBeanDefinitionRegistry类"></a>1.4.2.2 SimpleBeanDefinitionRegistry类</h4><p>该类实现了BeanDefinitionRegistry接口，定义了Map集合作为注册表容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBeanDefinitionRegistry</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> HashMap&lt;String, BeanDefinition&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">        beanDefinitionMap.put(beanName,beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        beanDefinitionMap.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.containsKey(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.keySet().toArray(<span class="keyword">new</span> String[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-3-定义解析器相关类"><a href="#1-4-3-定义解析器相关类" class="headerlink" title="1.4.3 定义解析器相关类"></a>1.4.3 定义解析器相关类</h3><h4 id="1-4-3-1-BeanDefinitionReader接口"><a href="#1-4-3-1-BeanDefinitionReader接口" class="headerlink" title="1.4.3.1 BeanDefinitionReader接口"></a>1.4.3.1 BeanDefinitionReader接口</h4><p>BeanDefinitionReader是用来解析配置文件并在注册表中注册bean的信息。定义了两个规范：</p>
<ul>
<li>获取注册表的功能，让外界可以通过该对象获取注册表对象。</li>
<li>加载配置文件，并注册bean数据。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取注册表对象</span></span><br><span class="line">    <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//加载配置文件并在注册表中进行注册</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-2-XmlBeanDefinitionReader类"><a href="#1-4-3-2-XmlBeanDefinitionReader类" class="headerlink" title="1.4.3.2 XmlBeanDefinitionReader类"></a>1.4.3.2 XmlBeanDefinitionReader类</h4><p>XmlBeanDefinitionReader类是专门用来解析xml配置文件的。该类实现BeanDefinitionReader接口并实现接口中的两个功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBeanDefinitionReader</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XmlBeanDefinitionReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.registry = <span class="keyword">new</span> SimpleBeanDefinitionRegistry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(configLocation);</span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        Document document = reader.read(is);</span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        <span class="comment">//解析bean标签</span></span><br><span class="line">        parseBean(rootElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBean</span><span class="params">(Element rootElement)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            String id = element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String className = element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            BeanDefinition beanDefinition = <span class="keyword">new</span> BeanDefinition();</span><br><span class="line">            beanDefinition.setId(id);</span><br><span class="line">            beanDefinition.setClassName(className);</span><br><span class="line">            List&lt;Element&gt; list = element.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">            MutablePropertyValues mutablePropertyValues = <span class="keyword">new</span> MutablePropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (Element element1 : list) &#123;</span><br><span class="line">                String name = element1.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String ref = element1.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                String value = element1.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                PropertyValue propertyValue = <span class="keyword">new</span> PropertyValue(name,ref,value);</span><br><span class="line">                mutablePropertyValues.addPropertyValue(propertyValue);</span><br><span class="line">            &#125;</span><br><span class="line">            beanDefinition.setPropertyValues(mutablePropertyValues);</span><br><span class="line"></span><br><span class="line">            registry.registerBeanDefinition(id,beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-4-IOC容器相关类"><a href="#1-4-4-IOC容器相关类" class="headerlink" title="1.4.4 IOC容器相关类"></a>1.4.4 IOC容器相关类</h3><h4 id="1-4-4-1-BeanFactory接口"><a href="#1-4-4-1-BeanFactory接口" class="headerlink" title="1.4.4.1 BeanFactory接口"></a>1.4.4.1 BeanFactory接口</h4><p>在该接口中定义IOC容器的统一规范即获取bean对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//根据bean对象的名称获取bean对象</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">	<span class="comment">//根据bean对象的名称获取bean对象，并进行类型转换</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;? extends T&gt; clazz)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-2-ApplicationContext接口"><a href="#1-4-4-2-ApplicationContext接口" class="headerlink" title="1.4.4.2 ApplicationContext接口"></a>1.4.4.2 ApplicationContext接口</h4><p>该接口的所以的子实现类对bean对象的创建都是非延时的，所以在该接口中定义 <code>refresh()</code> 方法，该方法主要完成以下两个功能：</p>
<ul>
<li>加载配置文件。</li>
<li>根据注册表中的BeanDefinition对象封装的数据进行bean对象的创建。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//进行配置文件加载并进行对象创建</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException, Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-3-AbstractApplicationContext类"><a href="#1-4-4-3-AbstractApplicationContext类" class="headerlink" title="1.4.4.3 AbstractApplicationContext类"></a>1.4.4.3 AbstractApplicationContext类</h4><ul>
<li><p>作为ApplicationContext接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个Map集合，作为bean对象存储的容器。</p>
</li>
<li><p>声明BeanDefinitionReader类型的变量，用来进行xml配置文件的解析，符合单一职责原则。</p>
<p>BeanDefinitionReader类型的对象创建交由子类实现，因为只有子类明确到底创建BeanDefinitionReader哪儿个子实现类对象。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BeanDefinitionReader beanDefinitionReader;</span><br><span class="line">    <span class="comment">//用来存储bean对象的容器   key存储的是bean的id值，value存储的是bean对象</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储配置文件的路径</span></span><br><span class="line">    <span class="keyword">protected</span> String configLocation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException, Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载BeanDefinition</span></span><br><span class="line">        beanDefinitionReader.loadBeanDefinitions(configLocation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化bean</span></span><br><span class="line">        finishBeanInitialization();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bean的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishBeanInitialization</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BeanDefinitionRegistry registry = beanDefinitionReader.getRegistry();</span><br><span class="line">        String[] beanNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">            BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);</span><br><span class="line">            getBean(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：该类finishBeanInitialization()方法中调用getBean()方法使用到了模板方法模式。</p>
</blockquote>
<h4 id="1-4-4-4-ClassPathXmlApplicationContext类"><a href="#1-4-4-4-ClassPathXmlApplicationContext类" class="headerlink" title="1.4.4.4 ClassPathXmlApplicationContext类"></a>1.4.4.4 ClassPathXmlApplicationContext类</h4><p>该类主要是加载类路径下的配置文件，并进行bean对象的创建，主要完成以下功能：</p>
<ul>
<li>在构造方法中，创建BeanDefinitionReader对象。</li>
<li>在构造方法中，调用refresh()方法，用于进行配置文件加载、创建bean对象并存储到容器中。</li>
<li>重写父接口中的getBean()方法，并实现依赖注入操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configLocation = configLocation;</span><br><span class="line">        <span class="comment">//构建XmlBeanDefinitionReader对象</span></span><br><span class="line">        beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.refresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据bean的id属性值获取bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return singletonObjects.get(name);</span></span><br><span class="line">        Object obj = singletonObjects.get(name);</span><br><span class="line">        <span class="keyword">if</span>(obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BeanDefinitionRegistry registry = beanDefinitionReader.getRegistry();</span><br><span class="line">        BeanDefinition beanDefinition = registry.getBeanDefinition(name);</span><br><span class="line">        <span class="keyword">if</span>(beanDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String className = beanDefinition.getClassName();</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">        Object beanObj = clazz.newInstance();</span><br><span class="line">        MutablePropertyValues propertyValues = beanDefinition.getPropertyValues();</span><br><span class="line">        <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues) &#123;</span><br><span class="line">            String propertyName = propertyValue.getName();</span><br><span class="line">            String value = propertyValue.getValue();</span><br><span class="line">            String ref = propertyValue.getRef();</span><br><span class="line">            <span class="keyword">if</span>(ref != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(ref)) &#123;</span><br><span class="line"></span><br><span class="line">                Object bean = getBean(ref);</span><br><span class="line">                String methodName = StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class="line">                Method[] methods = clazz.getMethods();</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(method.getName().equals(methodName)) &#123;</span><br><span class="line">                        method.invoke(beanObj,bean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(value != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">                String methodName = StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class="line">                Method method = clazz.getMethod(methodName, String.class);</span><br><span class="line">                method.invoke(beanObj,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        singletonObjects.put(name,beanObj);</span><br><span class="line">        <span class="keyword">return</span> beanObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;? extends T&gt; clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object bean = getBean(name);</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.cast(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-4-5-StringUtils类"><a href="#1-4-4-5-StringUtils类" class="headerlink" title="1.4.4.5 StringUtils类"></a>1.4.4.5 StringUtils类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StringUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// userDao ==&gt; setUserDao</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSetterMethodNameByFieldName</span><span class="params">(String fieldName)</span></span>&#123;</span><br><span class="line">        String methodName=<span class="string">&quot;set&quot;</span> +fieldName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+fieldName.substring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-5-自定义Spring-IOC总结"><a href="#1-4-5-自定义Spring-IOC总结" class="headerlink" title="1.4.5 自定义Spring IOC总结"></a>1.4.5 自定义Spring IOC总结</h3><h4 id="1-4-5-1-使用到的设计模式"><a href="#1-4-5-1-使用到的设计模式" class="headerlink" title="1.4.5.1 使用到的设计模式"></a>1.4.5.1 使用到的设计模式</h4><ul>
<li>工厂模式。这个使用工厂模式 + 配置文件的方式。</li>
<li>单例模式。Spring IOC管理的bean对象都是单例的，此处的单例不是通过构造器进行单例的控制的，而是spring框架对每一个bean只创建了一个对象。</li>
<li>模板方法模式。AbstractApplicationContext类中的finishBeanInitialization()方法调用了子类的getBean()方法，因为getBean()的实现和环境息息相关。</li>
<li>迭代器模式。对于MutablePropertyValues类定义使用到了迭代器模式，因为此类存储并管理PropertyValue对象，也属于一个容器，所以给该容器提供一个遍历方式。</li>
</ul>
<p>spring框架其实使用到了很多设计模式，如AOP使用到了代理模式，选择JDK代理或者CGLIB代理使用到了策略模式，还有适配器模式，装饰者模式，观察者模式等。</p>
<h4 id="1-4-5-2-符合大部分设计原则"><a href="#1-4-5-2-符合大部分设计原则" class="headerlink" title="1.4.5.2 符合大部分设计原则"></a>1.4.5.2 符合大部分设计原则</h4><h4 id="1-4-5-3-整个设计和Spring的设计还是有一定的出入"><a href="#1-4-5-3-整个设计和Spring的设计还是有一定的出入" class="headerlink" title="1.4.5.3 整个设计和Spring的设计还是有一定的出入"></a>1.4.5.3 整个设计和Spring的设计还是有一定的出入</h4><p>spring框架底层是很复杂的，进行了很深入的封装，并对外提供了很好的扩展性。而我们自定义SpringIOC有以下几个目的：</p>
<ul>
<li>了解Spring底层对对象的大体管理机制。</li>
<li>了解设计模式在具体的开发中的使用。</li>
<li>以后学习spring源码，通过该案例的实现，可以降低spring学习的入门成本。</li>
</ul>
<h2 id="1-6-项目路径所有一览"><a href="#1-6-项目路径所有一览" class="headerlink" title="1.6 项目路径所有一览"></a>1.6 项目路径所有一览</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/Snipaste_2021-04-01_16-20-40.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E8%87%AA%E5%AE%9A%E4%B9%89Spring%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%89%87/Snipaste_2021-04-01_16-21-20.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2021/03/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><p>学习途径<a href="https://oschina.gitee.io/learn-git-branching/">https://oschina.gitee.io/learn-git-branching/</a></p>
<h2 id="1-Git-常用命令"><a href="#1-Git-常用命令" class="headerlink" title="1.Git 常用命令"></a>1.Git 常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> /path/to/repository <span class="comment"># 执行如下命令以创建一个本地仓库的克隆版本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> username@host:/path/to/repository <span class="comment"># 远端服务器上的仓库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull <span class="comment"># 更新你的本地仓库至最新改动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -vv <span class="comment"># 查看本地分支对应的远程分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v <span class="comment"># 查看本地所对应的远程URL</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210308151447584.png"></p>
<h2 id="2-添加与提交"><a href="#2-添加与提交" class="headerlink" title="2.添加与提交"></a>2.添加与提交</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add &lt;filename&gt; <span class="comment"># 添加到缓存区</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;代码提交信息&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="3-推送改动"><a href="#3-推送改动" class="headerlink" title="3.推送改动"></a>3.推送改动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master <span class="comment"># 提交到远端仓库</span></span></span><br></pre></td></tr></table></figure>

<h2 id="4-分支"><a href="#4-分支" class="headerlink" title="4.分支"></a>4.分支</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210308151825947.png" alt="image-20210308151825947"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch 分支名 <span class="comment">#新建分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d 分支名 <span class="comment"># 删除分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout 分支名 <span class="comment">#切换到某分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase 分支名 <span class="comment"># 类似于复制到新分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout C4 <span class="comment">#将HEAD指向C4</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -f 分支名 节点名 <span class="comment"># 强制移动到某节点</span></span></span><br></pre></td></tr></table></figure>

<h2 id="5-更新与合并"><a href="#5-更新与合并" class="headerlink" title="5.更新与合并"></a>5.更新与合并</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull <span class="comment"># 更新你的本地仓库至最新改动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge 分支名 <span class="comment"># 将分支合并到master分支</span></span></span><br></pre></td></tr></table></figure>

<h2 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> <span class="comment"># 获取提交 ID</span></span></span><br></pre></td></tr></table></figure>
<h2 id="7-替换本地改动"><a href="#7-替换本地改动" class="headerlink" title="7.替换本地改动"></a>7.替换本地改动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- &lt;filename&gt; <span class="comment"># 替换掉本地改动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard origin/master</span></span><br></pre></td></tr></table></figure>
<h2 id="8-Git常用命令"><a href="#8-Git常用命令" class="headerlink" title="8.Git常用命令"></a>8.Git常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitk <span class="comment"># 内建的图形化 git：</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config color.ui <span class="literal">true</span> <span class="comment"># 彩色的 git 输出：</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config format.pretty oneline <span class="comment"># 显示历史记录时，只显示一行注释信息：</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -i <span class="comment"># 交互地添加文件至缓存区：</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210308152754868.png" alt="image-20210308152754868"></p>
<h2 id="9-命令总结"><a href="#9-命令总结" class="headerlink" title="9.命令总结"></a>9.命令总结</h2><h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1.仓库"></a>1.仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示当前的Git配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑Git配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3.增加/删除文件"></a>3.增加/删除文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>
<h3 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时显示所有diff信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>

<h3 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>

<h3 id="6-标签-1"><a href="#6-标签-1" class="headerlink" title="6.标签"></a>6.标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在当前commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>

<h3 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>


<h3 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8.远程同步"></a>8.远程同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载远程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></span><br></pre></td></tr></table></figure>


<h3 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9.撤销"></a>9.撤销</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure>

<h2 id="10-实战踩坑"><a href="#10-实战踩坑" class="headerlink" title="10.实战踩坑"></a>10.实战踩坑</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.初始化仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看远程仓库 确认没有，有删除</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.添加到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;描述&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.添加远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add 别名 链接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.查看远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.拉取仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull 别名 master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.确认远程和本地仓库一致 进去不要修改任何保存退出即可</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull 别名 master --allow-unrelated-histories</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9.推送到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push 别名 master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10.刷新仓库看是否成功！</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ学习笔记</title>
    <url>/2021/03/05/ActiveMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ActiveMQ学习笔记"><a href="#ActiveMQ学习笔记" class="headerlink" title="ActiveMQ学习笔记"></a>ActiveMQ学习笔记</h1><h2 id="1-ActiveMQ入门"><a href="#1-ActiveMQ入门" class="headerlink" title="1.ActiveMQ入门"></a>1.ActiveMQ入门</h2><h3 id="消息中间件应用场景"><a href="#消息中间件应用场景" class="headerlink" title="消息中间件应用场景"></a>消息中间件应用场景</h3><ul>
<li>异步处理</li>
<li>应用解耦</li>
<li>流量削峰</li>
</ul>
<h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>场景说明：用户注册，需要执行三个业务逻辑，分别为写入用户表，发注册邮件以及注册短信。</p>
<ul>
<li>串行方式<ul>
<li>将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端。</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313141459082.png" alt="image-20210313141459082"></p>
<ul>
<li>并行方式<ul>
<li>将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313141527875.png" alt="image-20210313141527875"></p>
<ul>
<li>异步处理<ul>
<li>引入消息中间件，将部分的业务逻辑，进行异步处理。改造后的架构如下：</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313141604405.png" alt="image-20210313141604405"></p>
<p><strong>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是 50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高啦，比串行提高了3倍，比并行提高了两倍。</strong></p>
<h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p>场景说明：用户下单后，订单系统需要通知库存系统。<br>传统的做法是，订单系统调用库存系统的接口。如下图：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313141811536.png" alt="image-20210313141811536"></p>
<p><strong>传统模式的缺点：</strong>假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。</p>
<p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313141848639.png" alt="image-20210313141848639"></p>
<p><strong>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功 库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作 假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</strong></p>
<h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。<br>通过加入消息队列完成如下功能：<br>a、可以控制活动的人数</p>
<p>b、可以缓解短时间内高流量压垮应用</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313142125812.png" alt="image-20210313142125812"></p>
<p><strong>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请</strong><br><strong>求或跳转到错误页面。秒杀业务根据消息队列中的请求信息，再做后续处理</strong></p>
<p><strong>常见的消息中间件产品对比</strong></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>ActiveMQ</th>
<th>RabbitMQ</th>
<th>RocketMQ</th>
<th>Kafka</th>
</tr>
</thead>
<tbody><tr>
<td>语言</td>
<td>Java</td>
<td>Erlang</td>
<td>Java</td>
<td>Scala</td>
</tr>
<tr>
<td>单击吞吐量</td>
<td>万级</td>
<td>万级</td>
<td>10万级</td>
<td>10万级</td>
</tr>
<tr>
<td>时效性</td>
<td>毫秒级</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>高</td>
<td>分布式架构 高</td>
<td>分布式架构 高</td>
</tr>
<tr>
<td>功能性</td>
<td>成熟，公司得到应用</td>
<td>并发能力强，管理界面比较丰富</td>
<td>功能完备，扩展性好</td>
<td>大数据应用逛</td>
</tr>
</tbody></table>
<h3 id="ActiveMQ简介及JMS"><a href="#ActiveMQ简介及JMS" class="headerlink" title="ActiveMQ简介及JMS"></a>ActiveMQ简介及JMS</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313142739222.png" alt="image-20210313142739222"></p>
<p><strong>官网<a href="http://activemq.apache.org/">http://activemq.apache.org/</a></strong></p>
<ul>
<li><p><strong>什么是AcitveMQ</strong></p>
<ul>
<li>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。</li>
<li>ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。</li>
</ul>
</li>
<li><p>什么是JMS</p>
</li>
</ul>
<p>消息中间件利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统<br>的集成。它可以在分布式环境下扩展进程间的通信。对于消息中间件，常见的角色大致也就有<br><strong>Producer（生产者）、Consumer（消费者）。</strong></p>
<p>消息队列中间件是分布式系统中重要的组件，主要解决<strong>应用解耦，异步消息，流量削锋</strong>等问题，实现<strong>高</strong><br><strong>性能，高可用，可伸缩和最终一致性</strong>架构。</p>
<p>JMS（ Java Messaging Service）是Java平台上有<strong>关面向消息中间件的技术规范</strong>，它便于消息系统中的<br>Java应用程序进行消息交换,并且通过<strong>提供标准的产生、发送、接收消息的接口简化企业应用的开发</strong>。</p>
<p>JMS本身<strong>只定义了一系列的接口规范</strong>，是一种与厂商无关的 API，<strong>用来访问消息收发系统</strong>。它类似于<br>JDBC(java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库 的 API，而 JMS<br>则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商目前都支持 JMS，包括 IBM 的<br>MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 <strong>JMS 使您能够</strong><br><strong>通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JML 客户机发送消</strong><br><strong>息</strong>。消息是 JMS 中的一种类型对象，由两部分组成：<strong>报头和消息主体</strong>。报头由路由信息以及有关该消息<br>的元数据组成。<strong>消息主体则携带着应用程序的数据或有效负载</strong>。</p>
<h4 id="JMS消息模型"><a href="#JMS消息模型" class="headerlink" title="JMS消息模型"></a>JMS消息模型</h4><p>消息中间件一般有两种传递模式：<strong>点对点模式(P2P)和发布-订阅模式(Pub/Sub)。</strong></p>
<ul>
<li>(1) P2P (Point to Point) 点对点模型（Queue队列模型）</li>
<li>(2) Publish/Subscribe(Pub/Sub) 发布/订阅模型(Topic主题模型)点对点模型</li>
</ul>
<blockquote>
<p><strong>点对点模型（ Pointer-to-Pointer）：即生产者和消费者之间的消息往来。</strong></p>
</blockquote>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313143155106.png" alt="image-20210313143155106"></p>
<p>每个消息都被发送到特定的消息队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>
<h5 id="点对点模型的特点"><a href="#点对点模型的特点" class="headerlink" title="点对点模型的特点"></a><strong>点对点模型的特点</strong></h5><ul>
<li>每个消息只有一个消费者（ Consumer）(即一旦被消费，消息就不再在消息队列中)；</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列；</li>
<li>接收者在成功接收消息之后需向队列应答成功。</li>
</ul>
<p><strong>举例</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313143350809.png" alt="image-20210313143350809"></p>
<h5 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布/订阅模型"></a>发布/订阅模型</h5><blockquote>
<p>发布/订阅（Publish-Subscribe）</p>
</blockquote>
<p>包含三个角色：<strong>主题（Topic），发布者（Publisher），订阅者（Subscriber）</strong>，多个发布者将消息发送到topic，系统将这些消息投递到订阅此topic的订阅者</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313143516023.png" alt="image-20210313143516023"></p>
<p>发布者发送到 topic的消息，只有订阅了topic的订阅者才会收到消息。topic实现了发布和订阅，当你发布一个消息，所有订阅这个topic的服务都能得到这个消息，所以从1到N个订阅者都能得到这个消息的拷贝</p>
<p><strong>发布/订阅模型的特点</strong></p>
<ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性（先订阅主题，再来发送消息）</li>
<li>订阅者必须保持运行的状态，才能接受发布者发布的消息</li>
</ul>
<h4 id="JMS编程API"><a href="#JMS编程API" class="headerlink" title="JMS编程API"></a>JMS编程API</h4><table>
<thead>
<tr>
<th>要素</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Destination</td>
<td>用来定义消息从发送端发出后要走的通道，而不是接收方。Destination属于管理类对象</td>
</tr>
<tr>
<td>ConnectionFactory</td>
<td>用于创建连接对象</td>
</tr>
<tr>
<td>Connection</td>
<td>连接接口，所负责的重要工作时创建Session</td>
</tr>
<tr>
<td>Session</td>
<td>会话接口，这是一个非常重要的对象，消息发送者、消息接收者以及消息对象本身，都是通过这个会话对象创建的</td>
</tr>
<tr>
<td>MessageConsumer</td>
<td>消息的消费者，也就是订阅消息并处理消息的对象</td>
</tr>
<tr>
<td>MessageProducer</td>
<td>消息的生产者，也就是用来发送消息的对象</td>
</tr>
</tbody></table>
<h5 id="1）ConnectionFactory"><a href="#1）ConnectionFactory" class="headerlink" title="(1）ConnectionFactory"></a>(1）ConnectionFactory</h5><p>创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。</p>
<h5 id="2）Destination"><a href="#2）Destination" class="headerlink" title="(2）Destination"></a>(2）Destination</h5><p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。所以，Destination实际上就是两种类型的对象：<strong>Queue、Topic</strong></p>
<h5 id="3）Connection"><a href="#3）Connection" class="headerlink" title="(3）Connection"></a>(3）Connection</h5><p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。<strong>Connection可以产生一个或多个Session</strong></p>
<h5 id="4）Session"><a href="#4）Session" class="headerlink" title="(4）Session"></a>(4）Session</h5><p>Session 是我们对消息进行操作的接口，可以通过session<strong>创建生产者、消费者、消息</strong>等。Session 提供了事务的功能，如果需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。</p>
<h5 id="5）Producter"><a href="#5）Producter" class="headerlink" title="(5）Producter"></a>(5）Producter</h5><p>Producter（消息生产者）：<strong>消息生产者由Session创建</strong>，并用于将消息发送到Destination。同样，消息生产者分两种类型：<strong>QueueSender和TopicPublisher</strong>。可以调用消息生产者的方法（send或publish方法）发送消息。</p>
<h5 id="6）Consumer"><a href="#6）Consumer" class="headerlink" title="(6）Consumer"></a>(6）Consumer</h5><p>Consumer （消息消费者）：<strong>消息消费者由Session创建</strong>，用于接收被发送到Destination的消息。两种类型：<strong>QueueReceiver和TopicSubscriber</strong>。可分别通过<strong>session的createReceiver(Queue)或createSubscriber(Topic)来创建</strong>。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>
<h5 id="7）MessageListener"><a href="#7）MessageListener" class="headerlink" title="(7）MessageListener"></a>(7）MessageListener</h5><p>消息监听器。<strong>如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法</strong>。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313144419878.png" alt="image-20210313144419878"></p>
<h2 id="2-ActiveMQ安装"><a href="#2-ActiveMQ安装" class="headerlink" title="2.ActiveMQ安装"></a>2.ActiveMQ安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一步：安装 jdk（略）</span><br><span class="line">第二步：把 activemq的压缩包（apache-activemq-5.14.5-bin.tar.gz）上传到 linux 系统</span><br><span class="line">第三步：解压缩压缩包 </span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf apache-activemq-5.14.5-bin.tar.gz</span></span><br><span class="line">第四步：进入apache-activemq-5.14.5的bin目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> apache-activemq-5.14.5/bin</span></span><br><span class="line">第五步：启动 activemq</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./activemq start (执行2次：第一次：生成配置信息；第二次：启动)</span></span><br><span class="line">第六步：停止activemq：</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./activemq stop</span></span><br></pre></td></tr></table></figure>

<p><strong>测试连接</strong></p>
<p><strong>浏览器输入：linuxip:8161</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">页面控制台： http://ip:8161 (监控)</span><br><span class="line">请求地址：  tcp://ip:61616 （java代码访问消息中间件）</span><br></pre></td></tr></table></figure>

<p>账号： admin<br>密码：admin</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313144724034.png" alt="image-20210313144724034"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313144736828.png" alt="image-20210313144736828"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">列表各列信息含义如下：</span><br><span class="line">Number Of Pending Messages ：等待消费的消息 这个是当前未出队列的数量。</span><br><span class="line">Number Of Consumers ：消费者 这个是消费者端的消费者数量</span><br><span class="line">Messages Enqueued ：进入队列的消息 进入队列的总数量,包括出队列的。</span><br><span class="line">Messages Dequeued ：出了队列的消息 可以理解为是消费这消费掉的数量。</span><br></pre></td></tr></table></figure>

<h2 id="3-原生TMS-API操作ActiveMQ"><a href="#3-原生TMS-API操作ActiveMQ" class="headerlink" title="3.原生TMS API操作ActiveMQ"></a>3.原生TMS API操作ActiveMQ</h2><h3 id="PTP-模式-生产者"><a href="#PTP-模式-生产者" class="headerlink" title="PTP 模式(生产者)"></a>PTP 模式(生产者)</h3><p> <strong>（1）引入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.创建连接工厂</span><br><span class="line">2.创建连接</span><br><span class="line">3.打开连接</span><br><span class="line">4.创建session</span><br><span class="line">5.创建目标地址（Queue:点对点消息，Topic：发布订阅消息）</span><br><span class="line">6.创建消息生产者</span><br><span class="line">7.创建消息</span><br><span class="line">8.发送消息</span><br><span class="line">9.释放资源</span><br></pre></td></tr></table></figure>



<p><strong>（ 2）编写生产消息的测试类 QueueProducer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PTP_Producer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory factory= <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://linuxip:61616&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接</span></span><br><span class="line">    Connection connection = factory.createConnection();</span><br><span class="line">    <span class="comment">//3.打开连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//4.创建session</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 参数一：是否开启事务操作</span></span><br><span class="line"><span class="comment">	观察发送消息的结果：</span></span><br><span class="line"><span class="comment">	PTP模式(消费者)</span></span><br><span class="line"><span class="comment">	步骤：</span></span><br><span class="line"><span class="comment">    * 参数二：消息确认机制</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//5.创建目标地址（Queue:点对点消息，Topic：发布订阅消息）</span></span><br><span class="line">    Queue queue = session.createQueue(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    <span class="comment">//6.创建消息生产者</span></span><br><span class="line">    MessageProducer producer = session.createProducer(queue);</span><br><span class="line">    <span class="comment">//7.创建消息</span></span><br><span class="line">    <span class="comment">//createTextMessage: 文本类型</span></span><br><span class="line">    TextMessage textMessage = session.createTextMessage(<span class="string">&quot;test message&quot;</span>);</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    producer.send(textMessage);</span><br><span class="line">    System.out.println(<span class="string">&quot;消息发送完成&quot;</span>);</span><br><span class="line">    <span class="comment">//9.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    connection.close();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动测试结果</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313145341189.png" alt="image-20210313145341189"></p>
<h3 id="PTP模式-消费者"><a href="#PTP模式-消费者" class="headerlink" title="PTP模式(消费者)"></a>PTP模式(消费者)</h3><p><strong>步骤：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.创建连接工厂</span><br><span class="line">2.创建连接</span><br><span class="line">3.打开连接</span><br><span class="line">4.创建session</span><br><span class="line">5.指定目标地址</span><br><span class="line">6.创建消息的消费者</span><br><span class="line">7.配置消息监听器</span><br></pre></td></tr></table></figure>

<p><strong>第一种写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PTP_Consumer1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory factory= <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://linuxip:61616&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接</span></span><br><span class="line">    Connection connection = factory.createConnection();</span><br><span class="line">    <span class="comment">//3.打开连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//4.创建session</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//5.指定目标地址</span></span><br><span class="line">    Queue queue = session.createQueue(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    <span class="comment">//6.创建消息的消费者</span></span><br><span class="line">    MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">    <span class="comment">//7.接收消息</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      Message message = consumer.receive();</span><br><span class="line">      <span class="comment">//如果已经没有消息了，结束啦</span></span><br><span class="line">      <span class="keyword">if</span>(message==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">//如果还有消息，判断什么类型的消息</span></span><br><span class="line">      <span class="keyword">if</span>(message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage)message;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收的消息：&quot;</span>+textMessage.getText());</span><br><span class="line">   			  &#125;</span><br><span class="line">  	 	&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PTP_Consumer2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory factory= <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://linuxip:61616&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接</span></span><br><span class="line">    Connection connection = factory.createConnection();</span><br><span class="line">    <span class="comment">//3.打开连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//4.创建session</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//5.指定目标地址</span></span><br><span class="line">    Queue queue = session.createQueue(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    <span class="comment">//6.创建消息的消费者</span></span><br><span class="line">    MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">    <span class="comment">//7.设置消息监听器来接收消息</span></span><br><span class="line">    consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">      <span class="comment">//处理消息</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">          TextMessage textMessage = (TextMessage)message;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收的消息（2）：&quot;</span>+textMessage.getText());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">    <span class="comment">//注意：在监听器的模式下千万不要关闭连接，一旦关闭，消息无法接收</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动测试</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313145806568.png" alt="image-20210313145806568"></p>
<h3 id="Pub-Sub模式-生成者"><a href="#Pub-Sub模式-生成者" class="headerlink" title="Pub/Sub模式(生成者)"></a>Pub/Sub模式(生成者)</h3><p><strong>步骤：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.创建连接工厂</span><br><span class="line">2.创建连接</span><br><span class="line">3.打开连接</span><br><span class="line">4.创建session</span><br><span class="line">5.创建目标地址（Queue:点对点消息，Topic：发布订阅消息）</span><br><span class="line">6.创建消息生产者</span><br><span class="line">7.创建消息</span><br><span class="line">8.发送消息</span><br><span class="line">9.释放资源</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory factory = newActiveMQConnectionFactory(<span class="string">&quot;tcp://linuxip:61616&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接</span></span><br><span class="line">    Connection connection = factory.createConnection();</span><br><span class="line">    <span class="comment">//3.打开连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//4.创建session</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//5.创建目标地址（Queue:点对点消息，Topic：发布订阅消息）</span></span><br><span class="line">    Topic topic = session.createTopic(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    <span class="comment">//6.创建消息生产者</span></span><br><span class="line">    MessageProducer producer = session.createProducer(topic);</span><br><span class="line">    <span class="comment">//7.创建消息</span></span><br><span class="line">    TextMessage message = session.createTextMessage(<span class="string">&quot;发短信...&quot;</span>);</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    producer.send(message);</span><br><span class="line">    System.out.println(<span class="string">&quot;发送消息：发短信...&quot;</span>);</span><br><span class="line">    session.close();;</span><br><span class="line">    connection.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313150028026.png" alt="image-20210313150028026"></p>
<h3 id="Pub-Sub模式-消费者"><a href="#Pub-Sub模式-消费者" class="headerlink" title="Pub/Sub模式(消费者)"></a>Pub/Sub模式(消费者)</h3><p><strong>步骤：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.创建连接工厂</span><br><span class="line">2.创建连接</span><br><span class="line">3.打开连接</span><br><span class="line">4.创建session</span><br><span class="line">5指定目标地址</span><br><span class="line">6.创建消息的消费者</span><br><span class="line">7.配置消息监听器</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory factory = newActiveMQConnectionFactory(<span class="string">&quot;tcp://linuxip:61616&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接</span></span><br><span class="line">    Connection connection = factory.createConnection();</span><br><span class="line">    <span class="comment">//3.打开连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//4.创建session</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//5.创建目标地址（Queue:点对点消息，Topic：发布订阅消息）</span></span><br><span class="line">    Topic topic = session.createTopic(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    <span class="comment">//6.创建消息的消费者</span></span><br><span class="line">    MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line">    <span class="comment">//7.配置消息监听器</span></span><br><span class="line">    consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;消费消息：&quot;</span> + textMessage.getText());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-Spring与ActiveMQ整合"><a href="#4-Spring与ActiveMQ整合" class="headerlink" title="4.Spring与ActiveMQ整合"></a>4.Spring与ActiveMQ整合</h2><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p><strong>1.导入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.jms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.jms-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2 . 编写Spring整合ActiveMQ配置：applicationContext-producer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:amp</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://activemq.apache.org/schema/core</span></span></span><br><span class="line"><span class="tag"><span class="string">http://activemq.apache.org/schema/core/activemq-core.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.创建连接工厂对象--&gt;</span></span><br><span class="line">  &lt;amp:connectionFactory</span><br><span class="line">    id=&quot;connetionFactory&quot;</span><br><span class="line">    brokerURL=&quot;tcp://linuxip:61616&quot;</span><br><span class="line">    userName=&quot;admin&quot;</span><br><span class="line">    password=&quot;admin&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  <span class="comment">&lt;!--2.创建缓存连接工厂--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetConnectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;connetionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--缓存消息数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionCacheSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--3.创建用于点对点发送的JmsTemplate--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsQueueTemplate&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.core.JmsTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入缓存连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定是否为发布订阅模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pubSubDomain&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--4.创建用于发布订阅发送的JmsTemplate--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsTopicTemplate&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.core.JmsTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入缓存连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定是否为发布订阅模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pubSubDomain&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.编写测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">// junit与spring整合</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext-producer.xml&quot;)</span> <span class="comment">// 加载spring配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringProducer</span> </span>&#123;</span><br><span class="line">  <span class="comment">//点对点模式</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier(&quot;jmsQueueTemplate&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> JmsTemplate jmsQueueTemplate;</span><br><span class="line">  <span class="comment">//发布订阅模式</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier(&quot;jmsTopicTemplate&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> JmsTemplate jmsTopicTemplate;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 点对点发送</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ptpSender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 参数一：指定队列的名称</span></span><br><span class="line"><span class="comment">    * 参数二：MessageCreator接口，我们需要提供该接口的匿名内部实现</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    jmsQueueTemplate.send(<span class="string">&quot;spring_queue&quot;</span>, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="comment">//我们只需要返回发送的消息内容即可</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建文本消息</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">&quot;spring testmessage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> textMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;消息发送已完成&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发布订阅发送</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">psSender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTopicTemplate.send(<span class="string">&quot;spring_topic&quot;</span>, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建文本消息</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">&quot;spring testmessage--topic&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> textMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;消息发送已完成&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p><strong>1. 编写监听器：监听主题消息、队列消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">     MapMessage mapMessage = (MapMessage) message;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       String email = mapMessage.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;消费消息：&quot;</span> + email);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 编写Spring整合ActiveMQ配置：applicationContext-consumer.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:amq</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:jms</span>=<span class="string">&quot;http://www.springframework.org/schema/jms&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/jms</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/jms/spring-jms.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://activemq.apache.org/schema/core</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://activemq.apache.org/schema/core/activemq-core.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 创建ActiveMQ连接工厂 --&gt;</span></span><br><span class="line">  &lt;amq:connectionFactory</span><br><span class="line">      id=&quot;amqConnectionFactory&quot;</span><br><span class="line">      userName=&quot;admin&quot; password=&quot;admin&quot;</span><br><span class="line">      brokerURL=&quot;tcp://linuxip:61616&quot;/&gt;</span><br><span class="line">  <span class="comment">&lt;!-- 2. 创建缓存工厂 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetConnectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;amqConnectionFactory&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- session缓存数目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionCacheSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast.spring_activemq_consumer&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置消息监听器类，监听队列或主题消息模型中的消息。从而实现消费消息。</span></span><br><span class="line"><span class="comment">    jms:listener-container</span></span><br><span class="line"><span class="comment">      destination-type 监听的JMS消息类型（queue、topic）</span></span><br><span class="line"><span class="comment">      connection-factory Spring的缓存连接工厂</span></span><br><span class="line"><span class="comment">    jms:listener</span></span><br><span class="line"><span class="comment">      destination 对应MQ中队列名称或主题名称</span></span><br><span class="line"><span class="comment">      ref     消息监听器类（实现MessageListener接口）</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.1 监听指定名称(email)的队列中的消息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jms:listener-container</span> <span class="attr">destination-type</span>=<span class="string">&quot;queue&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jms:listener</span> <span class="attr">destination</span>=<span class="string">&quot;email&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;emailMessageListener&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">jms:listener-container</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.2 监听指定名称(email)的主题中的消息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jms:listener-container</span> <span class="attr">destination-type</span>=<span class="string">&quot;topic&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;cachingConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jms:listener</span> <span class="attr">destination</span>=<span class="string">&quot;sms&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;smsMessageListener&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">jms:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.编写测试类，发送消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Spring整合ActiveMQ消费消息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext-activemq-consumer.xml&quot;</span>);</span><br><span class="line">    System.in.read(</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-SpringBoot与ActiveMQ整合"><a href="#5-SpringBoot与ActiveMQ整合" class="headerlink" title="5.SpringBoot与ActiveMQ整合"></a>5.SpringBoot与ActiveMQ整合</h2><h3 id="消息生产者-1"><a href="#消息生产者-1" class="headerlink" title="消息生产者"></a>消息生产者</h3><p><strong>1.导入所需要的jar包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.targer</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.targer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.编写applicationContex-Producter.yml配置文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">activemq-producer</span> <span class="comment"># 服务名称</span></span><br><span class="line"><span class="comment"># springboot与activemq整合配置</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"> <span class="attr">broker-url:</span> <span class="string">tcp://linuxip:61616</span> <span class="comment"># 连接地址</span></span><br><span class="line"> <span class="attr">user:</span> <span class="string">admin</span> <span class="comment"># activemq用户名</span></span><br><span class="line"> <span class="attr">password:</span> <span class="string">admin</span>  <span class="comment"># activemq密码</span></span><br><span class="line"><span class="comment"># 指定发送模式 （点对点 false ， 发布订阅 true）</span></span><br><span class="line"><span class="attr">jms:</span></span><br><span class="line"> <span class="attr">pub-sub-domain:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>3.编写启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ProducerApplication.class,args);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p><strong>4.编写生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 演示SpringBoot与ActiveMQ整合- 消息生产者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = ProducerApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootProducer</span> </span>&#123;</span><br><span class="line">  <span class="comment">//JmsMessagingTemplate: 用于工具类发送消息</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ptpSender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 参数一：队列的名称或主题名称</span></span><br><span class="line"><span class="comment">    * 参数二：消息内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    jmsMessagingTemplate.convertAndSend(<span class="string">&quot;springboot_queue&quot;</span>,<span class="string">&quot;spring bootmessage&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.启动测试！</strong></p>
<h3 id="消息消费者-1"><a href="#消息消费者-1" class="headerlink" title="消息消费者"></a>消息消费者</h3><p><strong>1.导入所需要jar包</strong></p>
<p><strong>2.编写applicationContext-Consumer.yml配置文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">9002</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">activemq-consumer</span> <span class="comment"># 服务名称</span></span><br><span class="line"><span class="comment"># springboot与activemq整合配置</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"> <span class="attr">broker-url:</span> <span class="string">tcp://linuxip:61616</span> <span class="comment"># 连接地址</span></span><br><span class="line"> <span class="attr">user:</span> <span class="string">admin</span> <span class="comment"># activemq用户名</span></span><br><span class="line"> <span class="attr">password:</span> <span class="string">admin</span>  <span class="comment"># activemq密码</span></span><br><span class="line"><span class="comment"># 指定发送模式 （点对点 false ， 发布订阅 true）</span></span><br><span class="line"><span class="attr">jms:</span></span><br><span class="line"> <span class="attr">pub-sub-domain:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">springboot_queue</span></span><br></pre></td></tr></table></figure>

<p><strong>3.编写启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.编写监听器类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于监听消息类（既可以用于队列的监听，也可以用于主题监听）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 放入IOC容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgListener</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 用于接收消息的方法</span></span><br><span class="line"><span class="comment">  * destination: 队列的名称或主题的名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@JmsListener(destination = &quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">      TextMessage textMessage = (TextMessage)message;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息：&quot;</span>+textMessage.getText());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-ActiveMQ消息组成与高级特性"><a href="#6-ActiveMQ消息组成与高级特性" class="headerlink" title="6.ActiveMQ消息组成与高级特性"></a>6.ActiveMQ消息组成与高级特性</h2><h3 id="JMS消息组成详解"><a href="#JMS消息组成详解" class="headerlink" title="JMS消息组成详解"></a>JMS消息组成详解</h3><p><strong>JMS消息组成格式</strong></p>
<table>
<thead>
<tr>
<th>结构</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>JMS Provider</td>
<td>消息中间件/消息服务器</td>
</tr>
<tr>
<td>JMS Producer</td>
<td>消息生产者</td>
</tr>
<tr>
<td>JMS Consumer</td>
<td>消息消费者</td>
</tr>
<tr>
<td>JMS Message</td>
<td>消息</td>
</tr>
</tbody></table>
<p><strong>JMS Message消息由三部分组成：</strong></p>
<ul>
<li>(1）消息头</li>
<li>(2）消息体</li>
<li>(3）消息属性</li>
</ul>
<h4 id="JMS消息头"><a href="#JMS消息头" class="headerlink" title="JMS消息头"></a><strong>JMS消息头</strong></h4><p>JMS消息头预定义了若干字段用于客户端与JMS提供者之间识别和发送消息，预编译头如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><font color="red">JMSDestination</font></td>
<td>消息发送的 Destination，在发送过程中由提供者设置</td>
</tr>
<tr>
<td><font color="red">JMSMessageID</font></td>
<td>唯一标识提供者发送的每一条消息。这个字段是在发送过程中由提供者设<br/>置的，客户机只能在消息发送后才能确定消息的 JMSMessageID</td>
</tr>
<tr>
<td><font color="red">JMSDeliveryMode</font></td>
<td>消息持久化。包含值 DeliveryMode.PERSISTENT 或者<br/>DeliveryMode.NON_PERSISTENT。</td>
</tr>
<tr>
<td>JMSTimestamp</td>
<td>提供者发送消息的时间，由提供者在发送过程中设置</td>
</tr>
<tr>
<td><font color="red">JMSExpiration</font></td>
<td>消息失效的时间，毫秒，值 0 表明消息不会过期，默认值为0</td>
</tr>
<tr>
<td><font color="red">JMSPriority</font></td>
<td>消息的优先级，由提供者在发送过程中设置。优先级 0 的优先级最低，优<br/>先级 9 的优先级最高。0-4为普通消息，5-9为加急消息</td>
</tr>
<tr>
<td><font color="red">JMSCorrelationID</font></td>
<td>通常用来链接响应消息与请求消息，由发送消息的 JMS 程序设置</td>
</tr>
<tr>
<td>JMSReplyTo</td>
<td>请求程序用它来指出回复消息应发送的地方，由发送消息的 JMS 程序设置</td>
</tr>
<tr>
<td>JMSType</td>
<td>JMS 程序用它来指出消息的类型</td>
</tr>
<tr>
<td>JMSRedelivered</td>
<td>消息的重发标志，false，代表该消息是第一次发生，true，代表该消息为<br/>重发消息</td>
</tr>
</tbody></table>
<p>不过需要注意的是，在传送消息时，消息头的值由JMS提供者来设置，因此<strong>开发者使用以上****setJMSXXX()方法分配的值就被忽略了</strong>，只有以下几个值是可以由开发者设置的：**</p>
<p><strong>JMSCorrelationID，JMSReplyTo，JMSType</strong></p>
<h4 id="JMS消息体"><a href="#JMS消息体" class="headerlink" title="JMS消息体"></a>JMS消息体</h4><p>在消息体中，JMS API定义了五种类型的消息格式，让我们可以以不同的形式发送和接受消息，并提供对已有消息格式的兼容。不同的消息类型如下：<br><strong>JMS 定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收一些不同形式的数据，</strong><br><strong>提供现有消息格式的一些级别的兼容性。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">· TextMessage--一个字符串对象  </span><br><span class="line">· MapMessage--一套名称-值对</span><br><span class="line">· ObjectMessage--一个序列化的 Java 对象  </span><br><span class="line">· BytesMessage--一个字节的数据流    </span><br><span class="line">· StreamMessage -- Java原始值的数据流</span><br></pre></td></tr></table></figure>

<p><strong>分别编写发送和接受测试类！</strong></p>
<p><strong>TextMessage:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送TextMessage消息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.send(name, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">&quot;文本消息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> textMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接收TextMessage的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@JmsListener(destination = &quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">      TextMessage textMessage = (TextMessage)message;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息：&quot;</span>+textMessage.getText());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>MapMessage:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.send(name, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        MapMessage mapMessage = session.createMapMessage();</span><br><span class="line">        mapMessage.setString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        mapMessage.setInt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> mapMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JmsListener(destination = &quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(message <span class="keyword">instanceof</span> MapMessage)&#123;</span><br><span class="line">      MapMessage mapMessage = (MapMessage)message;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名称：&quot;</span>+mapMessage.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span>+mapMessage.getString(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>ObjectMessage:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送ObjectMessage消息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.send(name, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();<span class="comment">//编写一个User类。。。</span></span><br><span class="line">        user.setName(<span class="string">&quot;小苍&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        ObjectMessage objectMessage = session.createObjectMessage(user);</span><br><span class="line">        <span class="keyword">return</span> objectMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JmsListener(destination = &quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(message <span class="keyword">instanceof</span> ObjectMessage)&#123;</span><br><span class="line">      ObjectMessage objectMessage = (ObjectMessage)message;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        User user = (User)objectMessage.getObject();</span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line">        System.out.println(user.getPassword());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong><font color="green">注意： ActiveMQ5.12后 ，为了安全考虑，ActiveMQ默认不接受自定义的序列化对象，需要将自定义的<br>加入到受信任的列表。</font></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"> <span class="attr">broker-url:</span> <span class="string">tcp://linuxip:61616</span></span><br><span class="line"> <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line"> <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"> <span class="attr">packages:</span></span><br><span class="line">  <span class="attr">trust-all:</span> <span class="literal">true</span> <span class="comment"># 添加所有包到信任列表</span></span><br></pre></td></tr></table></figure>

<p><strong>BytesMessage：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送BytesMessage消息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.send(name, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        BytesMessage bytesMessage = session.createBytesMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          File file = <span class="keyword">new</span> File(<span class="string">&quot;d:/spring.jpg&quot;</span>);</span><br><span class="line">          FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">          <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];</span><br><span class="line">          in.read(bytes);</span><br><span class="line">          bytesMessage.writeBytes(bytes);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> bytesMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JmsListener(destination=&quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BytesMessage bytesMessage = (BytesMessage)message;</span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/abc.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)bytesMessage.getBodyLength()];</span><br><span class="line">    bytesMessage.readBytes(buf);</span><br><span class="line">    out.write(buf);</span><br><span class="line">    out.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>StreamMessage:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送StreamMessage消息</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.send(name, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        StreamMessage streamMessage = session.createStreamMessage();</span><br><span class="line">        streamMessage.writeString(<span class="string">&quot;你好，ActiveMQ&quot;</span>);</span><br><span class="line">        streamMessage.writeInt(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> streamMessage;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JmsListener(destination=&quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamMessage streamMessage = (StreamMessage)message;</span><br><span class="line">    String str = streamMessage.readString();</span><br><span class="line">    <span class="keyword">int</span> i = streamMessage.readInt();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="JMS消息属性"><a href="#JMS消息属性" class="headerlink" title="JMS消息属性"></a>JMS消息属性</h4><p>我们可以给消息设置自定义属性，这些属性主要是提供给应用程序的。对于实现消息过滤功能，消息属性非常有用，JMS API定义了一些标准属性，<strong>JMS服务提供者可以选择性的提供部分标准属性</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">message.setStringProperty(<span class="string">&quot;Property&quot;</span>,Property);   <span class="comment">//自定义属性</span></span><br></pre></td></tr></table></figure>



<h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p><strong>三种消息存储方式：</strong></p>
<ul>
<li> Memory 消息存储-基于内存的消息存储</li>
<li>基于日志消息存储方式，KahaDB是ActiveMQ的默认日志存储方式，它提供了容量的提升和恢复能力</li>
<li>基于JDBC的消息存储方式-数据存储于数据库（例如：MySQL）中</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313173824532.png" alt="image-20210313173824532"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313173843750.png" alt="image-20210313173843750"></p>
<p><strong>JDBC消息存储</strong></p>
<p><strong>(1)修改yml配置文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"> <span class="attr">broker-url:</span> <span class="string">tcp://192.168.66.133:61616</span></span><br><span class="line"> <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line"> <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">jms:</span></span><br><span class="line"> <span class="attr">pub-sub-domain:</span> <span class="literal">false</span> <span class="comment"># false：点对点队列模式， true：发布/订阅模式</span></span><br><span class="line"> <span class="attr">template:</span></span><br><span class="line">  <span class="attr">delivery-mode:</span> <span class="string">persistent</span> <span class="comment"># 持久化</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">springboot-queue01</span></span><br></pre></td></tr></table></figure>

<p><strong>(2)进入配置文件中修改activemq.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;mysql-ds&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://linuxip:3306/db_activemq&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*****&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JDBC Jdbc用于master/slave模式的数据库分享 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>(3）拷贝mysql及durid数据源的jar包到activemq的lib目录下</strong><br>(<strong>4）重启activemq</strong></p>
<p><strong>消息事务</strong></p>
<p>消息事务，是保证消息传递原子性的一个重要特征，和JDBC的事务特征类似。<br>一个事务性发送，其中一组消息要么能够全部保证到达服务器，要么都不到达服务器。<br>生产者、消费者与消息服务器直接都支持事务性；<br>ActionMQ的事务主要偏向在生产者的应用。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313174254444.png" alt="image-20210313174254444"></p>
<p><strong>生产者事务</strong></p>
<p>方式一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 事务性发送--方案一</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory =jmsMessagingTemplate.getConnectionFactory();</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建连接</span></span><br><span class="line">      Connection connection = connectionFactory.createConnection();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 参数一：是否开启消息事务</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">      <span class="comment">//创建生产者</span></span><br><span class="line">      MessageProducer producer =session.createProducer(session.createQueue(name));</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</span><br><span class="line">          <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">&quot;消息--&quot;</span> +i);</span><br><span class="line">        producer.send(textMessage);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">//注意：一旦开启事务发送，那么就必须使用commit方法进行事务提交，否则消息无法到达MQ服务器</span></span><br><span class="line">      session.commit();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">//消息事务回滚</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        session.rollback();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>方式二</p>
<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(ConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JmsTransactionManager(connectionFactory);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生产者业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送的业务类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">  <span class="meta">@Value(&quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Transactional</span> <span class="comment">// 对消息发送加入事务管理（同时也对JDBC数据库的事务生效）</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</span><br><span class="line">      <span class="comment">//模拟异常</span></span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">      jmsMessagingTemplate.convertAndSend(name, <span class="string">&quot;消息---&quot;</span>+i);</span><br><span class="line"> 		  &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MessageService messageService;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 事务性发送--方案二： Spring的JmsTransactionManager功能</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageTx2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    messageService.sendMessage();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p><strong>消费者事务:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息消费者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接收消息的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@JmsListener(destination=&quot;$&#123;activemq.name&#125;&quot;,containerFactory =</span></span><br><span class="line"><span class="meta">&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(TextMessage textMessage,Session session)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">JMSException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;消息内容：&quot;</span> + textMessage.getText() + <span class="string">&quot;,是否重发：&quot;</span></span><br><span class="line">+ textMessage.getJMSRedelivered());</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">100</span>/<span class="number">0</span>; <span class="comment">//模拟异常</span></span><br><span class="line">     </span><br><span class="line">      session.commit();<span class="comment">//提交事务</span></span><br><span class="line">   &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        session.rollback();<span class="comment">//回滚事务</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (JMSException e1) &#123;</span><br><span class="line">     &#125;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line"> 		  &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h4><p>JMS消息只有在被确认之后，才认为已经被成功地消费了。消息的成功消费通常包含三个阶段：<strong>客户接</strong><br><strong>收消息、客户处理消息和消息被确认</strong>。在事务性会话中，当一个事务被提交的时候，确认自动发生。在<br>非事务性会话中，消息何时被确认取决于创建会话时的应答模式（acknowledgement mode）。该参<br>数有以下三个可选值：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Session.AUTO_ACKNOWLEDGE</td>
<td>当客户成功的从receive方法返回的时候，或者从MessageListener.onMessage方法成功返回的时候，会话自动确认客户收到的消息</td>
</tr>
<tr>
<td>Session.CLIENT_ACKNOWLEDGE</td>
<td>客户通过消息的acknowledge方法确认消息。需要注意的是，在这种模式中，确认是在会话层上进行：确认一个被消费的消息将自动确认所有已被会话消费的消息。例如，如果一个消息消费者消费了10个消息，然后确认第5个消息，那么所有10个消息都被确认</td>
</tr>
<tr>
<td>Session.DUPS_ACKNOWLEDGE</td>
<td>该选择只是会话迟钝确认消息的提交。如果JMS provider失败，那么可能会导致一些重复的消息。如果是重复的消息，那么JMS provider必须把消息头的JMSRedelivered字段设置为true</td>
</tr>
</tbody></table>
<p><strong>注意：消息确认机制与事务机制是冲突的，只能选其中一种。所以演示消息确认前，先关闭事务。</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313195231306.png" alt="image-20210313195231306"></p>
<p><strong>(1）auto_acknowledge 自动确认</strong></p>
<p>编写配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean(name=&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DefaultJmsListenerContainerFactory <span class="title">jmsListenerContainerFactory</span><span class="params">(ConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">    DefaultJmsListenerContainerFactory factory=<span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">    factory.setConnectionFactory(connectionFactory);</span><br><span class="line">    factory.setSessionTransacted(<span class="keyword">false</span>); <span class="comment">// 不开启事务操作</span></span><br><span class="line">    factory.setSessionAcknowledgeMode(<span class="number">1</span>); <span class="comment">//自动确认</span></span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息消费者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接收消息的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@JmsListener(destination=&quot;$&#123;activemq.name&#125;&quot;,containerFactory =</span></span><br><span class="line"><span class="meta">&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(TextMessage textMessage)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;消息内容：&quot;</span> + textMessage.getText() + <span class="string">&quot;,是否重发：&quot;</span></span><br><span class="line">+ textMessage.getJMSRedelivered());</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果消费方接收消息失败， JMS服务器会重发消息，默认重发6次。</strong></p>
<p><strong>(2）dups_ok_acknowledge</strong><br>类似于 auto_acknowledge 确认机制，为自动批量确认而生，而且具有“延迟”确认的特点，ActiveMQ<br>会根据内部算法，在收到一定数量的消息自动进行确认。 在此模式下，可能会出现重复消息，如果消费<br>方不允许重复消费，不建议使用！</p>
<p><strong>(3）client_acknowledge 手动确认</strong></p>
<p>编写配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean(name=&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DefaultJmsListenerContainerFactory <span class="title">jmsListenerContainerFactory</span><span class="params">(ConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">    DefaultJmsListenerContainerFactory factory=<span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">    factory.setConnectionFactory(connectionFactory);</span><br><span class="line">    factory.setSessionTransacted(<span class="keyword">false</span>); <span class="comment">// 不开启事务操作</span></span><br><span class="line">    factory.setSessionAcknowledgeMode(<span class="number">4</span>); <span class="comment">//手动确认</span></span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息消费者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接收消息的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@JmsListener(destination=&quot;$&#123;activemq.name&#125;&quot;,containerFactory =&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(TextMessage textMessage)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;消息内容：&quot;</span> + textMessage.getText() + <span class="string">&quot;,是否重发：&quot;</span>+textMessage.getJMSRedelivered());</span><br><span class="line">      textMessage.acknowledge(); <span class="comment">// 确认收到消息，一旦消息确认，消息不会重新发送</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息投递方式"><a href="#消息投递方式" class="headerlink" title="消息投递方式"></a>消息投递方式</h3><p><strong>1、异步投递 vs 同步投递</strong><br><strong>同步发送：</strong><br>消息生产者使用持久（Persistent）传递模式发送消息的时候，Producer.send() 方法会被阻塞，直到broker 发送一个确认消息给生产者(ProducerAck)，这个确认消息暗示broker已经成功接收到消息并把消息保存到二级存储中。<br><strong>异步发送:</strong><br>如果应用程序能够容忍一些消息的丢失，那么可以使用异步发送。异步发送不会在受到broker的确认之前一直阻塞 Producer.send方法。</p>
<p>想要使用异步，在brokerURL中增加 jms.alwaysSyncSend=false&amp;jms.useAsyncSend=true属性(1）如果设置了alwaysSyncSend=true系统将会忽略useAsyncSend设置的值都采用同步 2）当alwaysSyncSend=false时，“NON_PERSISTENT”(非持久化)、事务中的消息将使用“异步发送” 3）当alwaysSyncSend=false时，如果指定了useAsyncSend=true，“PERSISTENT”类型的消息使用异步发送。如果useAsyncSend=false，“PERSISTENT”类型的消息使用同步发送。</p>
<p><strong>总结： 默认情况(alwaysSyncSend=false,useAsyncSend=false)，非持久化消息、事务内的消息均采用</strong><br><strong>异步发送；对于持久化消息采用同步发送！！！</strong></p>
<p><strong>2、配置异步投递的方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>在连接上配置</span><br><span class="line"><span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://locahost:61616?jms.useAsyncSend=true&quot;</span>);</span><br><span class="line"><span class="number">2.</span>通过ConnectionFactory</span><br><span class="line">((ActiveMQConnectionFactory)connectionFactory).setUseAsyncSend(<span class="keyword">true</span>);</span><br><span class="line"><span class="number">3.</span>通过connection</span><br><span class="line">((ActiveMQConnection)connection).setUseAsyncSend(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<p><strong>注意：如果是Spring或SpringBoot项目，通过修改JmsTemplate的默认参数实现异步或同步投递</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 配置用于异步发送的非持久化JmsTemplate</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JmsTemplate <span class="title">asynJmsTemplate</span><span class="params">(PooledConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">pooledConnectionFactory)</span> </span>&#123;</span><br><span class="line">    JmsTemplate template = <span class="keyword">new</span> JmsTemplate(pooledConnectionFactory);</span><br><span class="line">    template.setExplicitQosEnabled(<span class="keyword">true</span>);</span><br><span class="line">    template.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 配置用于同步发送的持久化JmsTemplate</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JmsTemplate <span class="title">synJmsTemplate</span><span class="params">(PooledConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">pooledConnectionFactory)</span> </span>&#123;</span><br><span class="line">    JmsTemplate template = <span class="keyword">new</span> JmsTemplate(pooledConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>异步投递如何确认发送成功？</strong><br>异步投递丢失消息的场景是：生产者设置 UseAsyncSend=true，使用 producer.send（msg）持续发送消息。</p>
<p>由于消息不阻塞，生产者会认为所有 send 的消息均被成功发送至 MQ。如果 MQ 突然宕机，此时生产者端内存中尚未被发送至 MQ 的消息都会丢失。这时，可以给异步投递方法接收回调，以确认消息是否发送成功！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 异步投递，回调函数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sendQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    ActiveMQMessageProducer producer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 获取连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory =jmsMessagingTemplate.getConnectionFactory();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      connection = connectionFactory.createConnection();</span><br><span class="line">      session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">      Queue queue = session.createQueue(name);</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">      producer = session.createProducer(queue);</span><br><span class="line">      producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">//创建需要发送的消息</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="comment">//设置消息唯一ID</span></span><br><span class="line">        String msgid = UUID.randomUUID().toString();</span><br><span class="line">        textMessage.setJMSMessageID(msgid);</span><br><span class="line">        producer.send(textMessage, <span class="keyword">new</span> AsyncCallback() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 使用msgid标识来进行消息发送成功的处理</span></span><br><span class="line">            System.out.println(msgid+<span class="string">&quot; 消息发送成功&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException exception)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 使用msgid表示进行消息发送失败的处理</span></span><br><span class="line">            System.out.println(msgid+<span class="string">&quot; 消息发送失败&quot;</span>);</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">      session.commit();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p><strong>延迟投递</strong><br>生产者提供两个发送消息的方法，一个是即时发送消息，一个是延时发送消息。<br><strong>1、修改activemq.xml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;broker</span> <span class="string">xmlns=&quot;http://activemq.apache.org/schema/core&quot;</span> <span class="string">...</span></span><br><span class="line"> <span class="string">schedulerSupport=&quot;true&quot;</span> <span class="string">&gt;</span></span><br><span class="line"> <span class="string">......</span></span><br><span class="line"><span class="string">&lt;/broker&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：添加 schedulerSupport=”true”配置</strong></p>
<p><strong>2、在代码中设置延迟时长</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 延时投递</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sendQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Session session = <span class="keyword">null</span>;</span><br><span class="line">    ActiveMQMessageProducer producer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 获取连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory =jmsMessagingTemplate.getConnectionFactory();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      connection = connectionFactory.createConnection();</span><br><span class="line">      session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">      Queue queue = session.createQueue(name);</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">      producer = (ActiveMQMessageProducer) session.createProducer(queue);</span><br><span class="line">      producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line">      <span class="comment">//创建需要发送的消息</span></span><br><span class="line">      TextMessage textMessage = session.createTextMessage(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">      <span class="comment">//设置延时时长(延时10秒)</span></span><br><span class="line">      textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,<span class="number">10000</span>);</span><br><span class="line">      producer.send(textMessage);</span><br><span class="line">      session.commit();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p><strong>定时投递</strong></p>
<p>1、启动类添加定时注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启定时功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActiveMQApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(MyActiveMQApplication.class,args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、在生产者添加@Scheduled设置定时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息生产者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController3</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value(&quot;$&#123;activemq.name&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 延时投递</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//每隔3秒定投</span></span><br><span class="line">  <span class="meta">@Scheduled(fixedDelay = 3000)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jmsMessagingTemplate.convertAndSend(name, <span class="string">&quot;消息ID:&quot;</span> +UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;消息发送成功...&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><p><strong>DLQ-Dead Letter Queue，死信队列，用来保存处理失败或者过期的消息</strong></p>
<blockquote>
<p>出现以下情况时，消息会被重发：<br>A transacted session is used and rollback() is called.<br>A transacted session is closed before commit is called.<br>A session is using CLIENT_ACKNOWLEDGE and Session.recover() is called.<br>当一个消息被重发超过6(缺省为6次)次数时，会给broker发送一个”Poison ack”，这个消息被认为是apoison pill，这时broker会将这个消息发送到死信队列，以便后续处理。<br>注意两点：<br><strong>1）缺省持久消息过期，会被送到DLQ，非持久消息不会送到DLQ</strong><br><strong>2）缺省的死信队列是ActiveMQ.DLQ，如果没有特别指定，死信都会被发送到这个队列。</strong><br>可以通过配置文件(activemq.xml)来调整死信发送策略。</p>
</blockquote>
<p><strong>1、修改配置文件中的activemq.xml</strong></p>
<p><strong>为每个队列建立独立的死信队列</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">destinationPolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">policyMap</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">individualDeadLetterStrategy</span> <span class="attr">queuePrefix</span>=<span class="string">&quot;DLQ.&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">useQueueForQueueMessages</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">         <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">topic</span>=<span class="string">&quot;&gt;&quot;</span> &gt;</span>        </span><br><span class="line">          <span class="tag">&lt;<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constantPendingMessageLimitStrategy</span> <span class="attr">limit</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">policyMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">destinationPolicy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、RedeliveryPolicy重发策略设置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">//RedeliveryPolicy重发策略设置</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedeliveryPolicy <span class="title">redeliveryPolicy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedeliveryPolicy  redeliveryPolicy=  <span class="keyword">new</span> RedeliveryPolicy();</span><br><span class="line">    <span class="comment">//是否在每次尝试重新发送失败后,增长这个等待时间</span></span><br><span class="line">    redeliveryPolicy.setUseExponentialBackOff(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//重发次数,默认为6次  这里设置为10次</span></span><br><span class="line">    redeliveryPolicy.setMaximumRedeliveries(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//重发时间间隔,默认为1秒</span></span><br><span class="line">    redeliveryPolicy.setInitialRedeliveryDelay(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value</span></span><br><span class="line">    redeliveryPolicy.setBackOffMultiplier(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//是否避免消息碰撞</span></span><br><span class="line">    redeliveryPolicy.setUseCollisionAvoidance(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//设置重发最大拖延时间-1 表示没有拖延只有UseExponentialBackOff(true)为true时生</span></span><br><span class="line">效</span><br><span class="line">    redeliveryPolicy.setMaximumRedeliveryDelay(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> redeliveryPolicy;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ActiveMQConnectionFactory activeMQConnectionFactory</span><br><span class="line">(<span class="meta">@Value(&quot;$&#123;spring.activemq.broker-url&#125;&quot;)</span>String url,RedeliveryPolicy</span><br><span class="line">redeliveryPolicy)&#123;</span><br><span class="line">    ActiveMQConnectionFactory activeMQConnectionFactory =</span><br><span class="line">        <span class="keyword">new</span> ActiveMQConnectionFactory(</span><br><span class="line">            <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            url);</span><br><span class="line">    activeMQConnectionFactory.setRedeliveryPolicy(redeliveryPolicy);</span><br><span class="line">    <span class="keyword">return</span> activeMQConnectionFactory;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(ConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JmsTransactionManager(connectionFactory);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="meta">@Bean(name=&quot;jmsQueryListenerFactory&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> DefaultJmsListenerContainerFactory </span><br><span class="line">jmsListenerContainerFactory(ConnectionFactory</span><br><span class="line">connectionFactory,PlatformTransactionManager transactionManager)&#123;</span><br><span class="line">    DefaultJmsListenerContainerFactory  factory=<span class="keyword">new</span></span><br><span class="line">DefaultJmsListenerContainerFactory ();</span><br><span class="line">    factory.setTransactionManager(transactionManager);</span><br><span class="line">    factory.setConnectionFactory(connectionFactory);</span><br><span class="line">    factory.setSessionTransacted(<span class="keyword">true</span>); <span class="comment">// 开启事务</span></span><br><span class="line">    factory.setSessionAcknowledgeMode(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-ActiveMQ企业面试经典问题"><a href="#7-ActiveMQ企业面试经典问题" class="headerlink" title="7.ActiveMQ企业面试经典问题"></a>7.ActiveMQ企业面试经典问题</h2><h3 id="问题：ActiveMQ宕机了怎么办？"><a href="#问题：ActiveMQ宕机了怎么办？" class="headerlink" title="问题：ActiveMQ宕机了怎么办？"></a>问题：ActiveMQ宕机了怎么办？</h3><p><strong>(1）ActiveMQ主从集群方案：Zookeeper集群+ Replicated LevelDB + ActiveMQ集群</strong></p>
<p><strong>官网<a href="http://activemq.apache.org/replicated-leveldb-store">http://activemq.apache.org/replicated-leveldb-store</a></strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/ActiveMQ%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20210313200908657.png" alt="image-20210313200908657"></p>
<p><strong>(2）集群信息概览</strong></p>
<table>
<thead>
<tr>
<th>Zookeeper 端口</th>
<th>ActiveMQweb端口</th>
<th>ActiveMQ协议端口</th>
</tr>
</thead>
<tbody><tr>
<td>2181</td>
<td>8161</td>
<td>61616</td>
</tr>
<tr>
<td>2182</td>
<td>8162</td>
<td>61617</td>
</tr>
<tr>
<td>2183</td>
<td>8163</td>
<td>61618</td>
</tr>
</tbody></table>
<p><strong>(3）先搭建Zookeeper集群</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1）上传zookeeper-3.4.6.tar.gz到linux</span><br><span class="line">2）解压：tar -xzf zookeeper-3.4.6.tar.gz</span><br><span class="line">3）创建根目录： mkdir /root/zookeeper</span><br><span class="line">4）创建节点目录及数据，日志存放目录：</span><br><span class="line">mkdir -p zookeeper/218&#123;1,2,3&#125;/&#123;data,datalogs&#125;</span><br><span class="line">3个节点的子文件夹为：2181,2182,2183</span><br><span class="line">5）复制Zookeeper到每个节点目录下</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper/2181</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper/2182</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper/2183</span><br><span class="line">6）移除原始目录</span><br><span class="line">rm -rf zookeeper-3.4.14/</span><br><span class="line">7）修改2181节点的zoo.cfg</span><br><span class="line">cd zookeeper/2181/zookeeper-3.4.6/conf/</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vi zoo.cfg</span><br><span class="line">内容如下：</span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/root/zookeeper/2181/data</span><br><span class="line">dataLogDir=/root/zookeeper/2181/datalogs</span><br><span class="line">server.1=192.168.66.133:2881:3881</span><br><span class="line">server.2=192.168.66.133:2882:3882</span><br><span class="line">server.3=192.168.66.133:2883:3883</span><br><span class="line">8）相同方式修改2182及2183节点的zoo.cfg</span><br><span class="line">2182配置为：</span><br><span class="line">clientPort=2182</span><br><span class="line">dataDir=/root/zookeeper/2182/data</span><br><span class="line">dataLogDir=/root/zookeeper/2182/datalogs</span><br><span class="line">server.1=192.168.66.133:2881:3881</span><br><span class="line">server.2=192.168.66.133:2882:3882</span><br><span class="line">server.3=192.168.66.133:2883:3883</span><br><span class="line">2183配置为：</span><br><span class="line">clientPort=2183</span><br><span class="line">dataDir=/root/zookeeper/2183/data</span><br><span class="line">dataLogDir=/root/zookeeper/2183/datalogs</span><br><span class="line">server.1=192.168.66.133:2881:3881</span><br><span class="line">server.2=192.168.66.133:2882:3882</span><br><span class="line">server.3=192.168.66.133:2883:3883</span><br><span class="line"></span><br><span class="line">9）每个节点必须有myid配置文件，记录节点的唯一标识，必须放在dataDir文件夹下。而且id值必须与上面</span><br><span class="line">配置的server.x中的x对应</span><br><span class="line">touch 2181/data/myid &amp;&amp; echo &quot;1&quot; &gt; 2181/data/myid</span><br><span class="line">touch 2182/data/myid &amp;&amp; echo &quot;2&quot; &gt; 2182/data/myid</span><br><span class="line">touch 2183/data/myid &amp;&amp; echo &quot;3&quot; &gt; 2183/data/myid</span><br><span class="line">查看是否创建成功：</span><br><span class="line">more 218*/data/myid</span><br><span class="line">10）分别启动三台Zookeeper</span><br><span class="line">启动：</span><br><span class="line">cd 2181/ &amp;&amp; zookeeper-3.4.6/bin/zkServer.sh start</span><br><span class="line">cd 2182/ &amp;&amp; zookeeper-3.4.6/bin/zkServer.sh start</span><br><span class="line">cd 2183/ &amp;&amp; zookeeper-3.4.6/bin/zkServer.sh start</span><br><span class="line">查看状态：</span><br><span class="line">2181/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class="line">2182/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class="line">2183/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class="line">看到Mode: leader的Zookeeper为主节点，其他为从节点。</span><br></pre></td></tr></table></figure>

<p><strong>（4）搭建ActiveMQ集群</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1）上传apache-activemq-5.15.9-bin.tar.gz到linux</span><br><span class="line">2）解压：tar -xzf apache-activemq-5.15.9-bin.tar.gz</span><br><span class="line">3）创建三个节点目录</span><br><span class="line">    mkdir activemq</span><br><span class="line">    mkdir -p activemq/816&#123;1,2,3&#125;</span><br><span class="line">4）复制activemq到每个节点目录</span><br><span class="line">    cp -r apache-activemq-5.15.9 activemq/8161</span><br><span class="line">    cp -r apache-activemq-5.15.9 activemq/8162</span><br><span class="line">    cp -r apache-activemq-5.15.9 activemq/8163</span><br><span class="line">5）修改每个节点的activemq.xml</span><br><span class="line">    必须使用相同的集群名称</span><br><span class="line">    &lt;broker xmlns=&quot;http://activemq.apache.org/schema/core&quot; brokerName=&quot;itheima_mq&quot;</span><br><span class="line">    dataDirectory=&quot;$&#123;activemq.data&#125;&quot;&gt;</span><br><span class="line">    添加配置：</span><br><span class="line">    61616：</span><br><span class="line">    &lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">    directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">    replicas=&quot;3&quot;</span><br><span class="line">    bind=&quot;tcp://0.0.0.0:61616&quot;</span><br><span class="line">    zkAddress=&quot;192.168.66.133:2181,192.168.66.133:2182,192.168.66.133:2183&quot;</span><br><span class="line">    hostname=&quot;192.168.66.133&quot;</span><br><span class="line">    zkPath=&quot;/activemq/leveldb-stores&quot; /&gt;</span><br><span class="line">    &lt;/persistenceAdapter&gt;</span><br><span class="line">    61617：</span><br><span class="line">    &lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">    directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">    replicas=&quot;3&quot;</span><br><span class="line">    bind=&quot;tcp://0.0.0.0:61617&quot;</span><br><span class="line">    zkAddress=&quot;192.168.66.133:2181,192.168.66.133:2182,192.168.66.133:2183&quot;</span><br><span class="line">    hostname=&quot;192.168.66.133&quot;</span><br><span class="line">    zkPath=&quot;/activemq/leveldb-stores&quot; /&gt;</span><br><span class="line">    &lt;/persistenceAdapter&gt;</span><br><span class="line">    61618：</span><br><span class="line">    &lt;persistenceAdapter&gt;</span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">    directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">    replicas=&quot;3&quot;</span><br><span class="line">    bind=&quot;tcp://0.0.0.0:61618&quot;</span><br><span class="line">    zkAddress=&quot;192.168.66.133:2181,192.168.66.133:2182,192.168.66.133:2183&quot;</span><br><span class="line">    hostname=&quot;192.168.66.133&quot;</span><br><span class="line">    zkPath=&quot;/activemq/leveldb-stores&quot; /&gt;</span><br><span class="line">    &lt;/persistenceAdapter&gt;</span><br><span class="line">6）修改jetty.xml</span><br><span class="line">    &lt;bean id=&quot;jettyPort&quot; class=&quot;org.apache.activemq.web.WebConsolePort&quot; init-</span><br><span class="line">    method=&quot;start&quot;&gt;</span><br><span class="line">          &lt;!-- the default port number for the web console --&gt;</span><br><span class="line">       &lt;property name=&quot;host&quot; value=&quot;0.0.0.0&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;port&quot; value=&quot;8161&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">7）分别为8181,8182,8183分别启动每台activemq可以使用ZooInspector工具查看ActiveMQ是否注册成功</span><br></pre></td></tr></table></figure>

<p><strong>(5）生产者和消费者的broker-url需要修改</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line"> <span class="attr">broker-url: failover:</span></span><br><span class="line"><span class="string">(tcp://linuxip:61616,tcp://linuxip:61617,tcp://linuxip:616168)</span></span><br><span class="line"> <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line"> <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>

<h3 id="问题：如何防止消费方消息重复消费？"><a href="#问题：如何防止消费方消息重复消费？" class="headerlink" title="问题：如何防止消费方消息重复消费？"></a>问题：如何防止消费方消息重复消费？</h3><p><strong>解决消费方幂等性问题！</strong><br>如果因为网络延迟等原因，MQ无法及时接收到消费方的应答，导致MQ重试。在重试过程中造成重复消费的问题。<br>解决思路：</p>
<ul>
<li>如果消费方是做数据库操作，那么可以把消息的ID作为表的唯一主键，这样在重试的情<br>况下，会触发主键冲突，从而避免数据出现脏数据。</li>
<li>如果消费方不是做数据库操作，那么可以借助第三方的应用，例如Redis，来记录消费记录。每次消<br>息被消费完成时候，把当前消息的ID作为key存入redis，每次消费前，先到redis查询有没有该消息的消费记录。</li>
</ul>
<h3 id="问题：如何防止消息丢失？"><a href="#问题：如何防止消息丢失？" class="headerlink" title="问题：如何防止消息丢失？"></a>问题：如何防止消息丢失？</h3><p>以下手段可以防止消息丢失：<br>1）在消息生产者和消费者使用事务<br>2）在消费方采用手动消息确认（ACK）<br>3）消息持久化，例如JDBC或日志</p>
<p><strong>学习地址<a href="https://www.bilibili.com/video/BV1vJ41177j1?p=1">https://www.bilibili.com/video/BV1vJ41177j1?p=1</a></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记</title>
    <url>/2021/02/25/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MyBatis学习笔记"><a href="#MyBatis学习笔记" class="headerlink" title="MyBatis学习笔记"></a>MyBatis学习笔记</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310095243130.png" alt="image-20210310095243130"></p>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
<li>官网地址:<a href="https://mybatis.org/mybatis-3/">https://mybatis.org/mybatis-3/</a></li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li><p>maven仓库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，io文件持久化</li>
<li>生活：冷藏. 罐头</li>
</ul>
<p><strong>为什么需要需要持久化？</strong></p>
<ul>
<li><p>有一些对象，不能让他丢掉。</p>
</li>
<li><p>内存太贵了</p>
</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul>
<li>帮助程序猿将数据存入到数据库中。</li>
<li>方便使用</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p>
<h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">  `id` INT(<span class="number">20</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">  `pwd` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;康康&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123890&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li><p>新建一个普通的maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul>
<li><p>编写mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*****&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写mybatis工具类</p>
<p>每个基于 MyBatis 的应用都是<strong>以一个 SqlSessionFactory 的实例为核心</strong>的。<strong>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</strong>。而 SqlSessionFactoryBuilder 则<strong>可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">                <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhuang.dao.UserDao&quot;</span>&gt;</span> <span class="comment">&lt;!--全限定名称--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册 mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：getMapper</span></span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭SqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>你们可以能会遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误。</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p>
<h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p>
<ul>
<li>id : 就是对应的namespace中的方法名；</li>
<li>resultType：Sql语句执行的返回值！</li>
<li>parameterType ： 参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">   </span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">   </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>增删改需要提交事务！</li>
</ul>
<h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul>
<li>标签不要匹配错</li>
<li>resource 绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointerException，没有注册到资源!</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出问题！</li>
</ul>
<h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">       insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void addUser2()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(&quot;userid&quot;,5);</span><br><span class="line">    map.put(&quot;passWord&quot;,&quot;2222333&quot;);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310100831414.png" alt="image-20210310100831414"></p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul>
<li>类型别名是为 Java 类型设置一个短的名字。‘</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310100939648.png" alt="image-20210310100939648"></p>
<p>完整的settings例子</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line"> <span class="comment">//全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;cacheEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;lazyLoadingEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载   </span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//使用列标签代替列名。实际表现依赖于数据库驱动</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;useColumnLabel&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。   </span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;useGeneratedKeys&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;autoMappingBehavior&quot;</span> value=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//指定发现自动映射目标未知列（或未知属性类型）的行为。</span></span><br><span class="line">NONE: 不做任何反应</span><br><span class="line">WARNING: 输出警告日志（<span class="string">&#x27;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#x27;</span> 的日志等级必须设置为 WARN）</span><br><span class="line">FAILING: 映射失败 (抛出 SqlSessionException)   </span><br><span class="line">  &lt;setting name=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> value=<span class="string">&quot;WARNING&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;defaultExecutorType&quot;</span> value=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//设置超时时间，它决定数据库驱动等待数据库响应的秒数。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;defaultStatementTimeout&quot;</span> value=<span class="string">&quot;25&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//为驱动的结果集获取数量（fetchSize）设置一个建议值。  </span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;defaultFetchSize&quot;</span> value=<span class="string">&quot;100&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//指定语句默认的滚动策略</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//是否开启驼峰命名自动映射。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;localCacheScope&quot;</span> value=<span class="string">&quot;SESSION&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;jdbcTypeForNull&quot;</span> value=<span class="string">&quot;OTHER&quot;</span>/&gt;</span><br><span class="line"> <span class="comment">//指定对象的哪些方法触发一次延迟加载。</span></span><br><span class="line">  &lt;setting name=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> value=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<h3 id="6、类型处理器（typeHandlers）"><a href="#6、类型处理器（typeHandlers）" class="headerlink" title="6、类型处理器（typeHandlers）"></a>6、类型处理器（typeHandlers）</h3><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310103335225.png" alt="image-20210310103335225"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310103507100.png" alt="image-20210310103507100"></p>
<p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p>
<ul>
<li>在类型处理器的配置元素（typeHandler 元素）上增加一个 <code>javaType</code> 属性（比如：<code>javaType=&quot;String&quot;</code>）；</li>
<li>在类型处理器的类上增加一个 <code>@MappedTypes</code> 注解指定与其关联的 Java 类型列表。 如果在 <code>javaType</code> 属性中也同时指定，则注解上的配置将被忽略。</li>
</ul>
<p>通过两种方式来指定关联的 JDBC 类型：</p>
<ul>
<li><p>在类型处理器的配置元素上增加一个 <code>jdbcType</code> 属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）；</p>
</li>
<li><p>在类型处理器的类上增加一个 <code>@MappedJdbcTypes</code> 注解指定与其关联的 JDBC 类型列表。</p>
</li>
<li><p>plugins插件</p>
<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zhuang/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhuang.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>练习时间：</p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li>
</ul>
<h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310101054058.png" alt="image-20210310101054058"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p>!<img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310101129258.png" alt="image-20210310101129258"></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！</p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310101229939.png" alt="image-20210310101229939"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试出现问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">//类型处理器</span><br><span class="line">//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>   <span class="built_in">name</span>   pwd</span><br><span class="line"><span class="built_in">id</span>   <span class="built_in">name</span>   password</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li> 如果世界总是这么简单就好了。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310104324897.png" alt="image-20210310104324897"></p>
<ul>
<li><p>SLF4J </p>
</li>
<li><p>LOG4J  【掌握】</p>
</li>
<li><p>LOG4J2</p>
</li>
<li><p> JDK_LOGGING</p>
</li>
<li><p>COMMONS_LOGGING</p>
</li>
<li><p>STDOUT_LOGGING   【掌握】</p>
</li>
<li><p>NO_LOGGING</p>
</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310104408391.png" alt="image-20210310104408391"></p>
<p>也可以用下列的任意一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.logging.LogFactory.useSlf4jLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useLog4JLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useJdkLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useCommonsLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useStdOutLogging();</span><br></pre></td></tr></table></figure>



<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Log4j的使用！，直接测试运行刚才的查询</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310104542421.png" alt="image-20210310104542421"></p>
</li>
</ol>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure></li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>;  #[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure>



<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--//分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList =  mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//RowBounds实现</span></span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310105034474.png" alt="image-20210310105034474"></p>
<p>PageHelper是一个Mybatis的分页插件, 负责将已经写好的sql语句, 进行分页加工。官网说法：如果你也在用 MyBatis，建议尝试该分页插件，这一定是最方便使用的分页插件。分页插件支持任何复杂的单表、多表分页。</p>
<p>优点：无需你自己去封装以及关心sql分页等问题，使用很方便，前端取数据也很方便。</p>
<h4 id="7-3-1、导入PageHelper插入依赖"><a href="#7-3-1、导入PageHelper插入依赖" class="headerlink" title="7.3.1、导入PageHelper插入依赖"></a>7.3.1、导入PageHelper插入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis的PageHelper插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加分页插件配置"><a href="#添加分页插件配置" class="headerlink" title="添加分页插件配置"></a>添加分页插件配置</h4><p>SqlMapConfig.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--合理化分页--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>必须注意配置的顺序，顺序出错，会执行报错！</p>
<p>如果是MyBatis与Spring整合，需要修改Spring的applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 注意：这里还有其他Spring相关配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            helperDialect=mysql</span><br><span class="line">            reasonable=true</span><br><span class="line">          <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Dao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.生成Dao代理对象</span></span><br><span class="line">        CustomerDao customerDao = sqlSession.getMapper(CustomerDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置分页参数</span></span><br><span class="line">        <span class="keyword">int</span> pageNun = <span class="number">1</span>; <span class="comment">// 页码</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">2</span>;<span class="comment">// 每页显示条数</span></span><br><span class="line">        PageHelper.startPage(pageNun,pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 查询用户数据</span></span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.把用户数据封装到PageInfo分页结果对象</span></span><br><span class="line">        PageInfo&lt;Customer&gt; page = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.取出PageInfo的属性</span></span><br><span class="line">        <span class="comment">//测试PageInfo全部属性</span></span><br><span class="line">        <span class="comment">//PageInfo包含了非常全面的分页属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前页码=&quot;</span>+page.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页显示条数=&quot;</span>+page.getPageSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页起始行号=&quot;</span>+page.getStartRow());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页结束行号=&quot;</span>+page.getEndRow());</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数=&quot;</span>+page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;总页数=&quot;</span>+page.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否为第1页=&quot;</span>+page.isIsFirstPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否为最后1页=&quot;</span>+page.isIsLastPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否有上一页=&quot;</span>+page.isHasPreviousPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否有下一页=&quot;</span>+page.isHasNextPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数据=&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Customer c:page.getList())&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，查看结果</p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<p> <img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310105641459.png" alt="image-20210310105641459"></p>
<p><strong>Mybatis详细的执行流程！</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310111357628.png" alt="image-20210310111357628"></p>
<h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试类</p>
<p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<ul>
<li>$ 容易SQL注入！</li>
</ul>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="class"><span class="keyword">class</span> <span class="title">has</span> <span class="title">a</span> <span class="title">fully</span> <span class="title">featured</span> <span class="title">builder</span>, <span class="title">Automate</span> <span class="title">your</span> <span class="title">logging</span> <span class="title">variables</span>, <span class="title">and</span> <span class="title">much</span> <span class="title">more</span>.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在实体类上加注解即可！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span>：无参构造，get、set、tostring、hashcode，equals</span><br><span class="line"><span class="variable">@AllArgsConstructor</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line"><span class="variable">@EqualsAndHashCode</span></span><br><span class="line"><span class="variable">@ToString</span></span><br><span class="line"><span class="variable">@Getter</span></span><br></pre></td></tr></table></figure>



<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310105837691.png" alt="image-20210310105837691"></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310105855538.png" alt="image-20210310105855538"></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>环境搭建，和刚才一样</li>
</ol>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span></span><br><span class="line"><span class="comment">    javaType=&quot;&quot; 指定属性的类型！</span></span><br><span class="line"><span class="comment">    集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p><strong>慢SQL       1s        1000s</strong>      </p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>



<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p>
</li>
</ol>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from mybatis.blog</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong></p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where标签</li>
</ul>
<h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line"></span><br><span class="line">  <span class="operator">&lt;</span>foreach item<span class="operator">=</span>&quot;id&quot; collection<span class="operator">=</span>&quot;ids&quot;</span><br><span class="line">      <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; separator<span class="operator">=</span>&quot;or&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">(id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310110351535.png" alt="image-20210310110351535"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p>
<p>建议：</p>
<ul>
<li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li>
</ul>
<h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">查询  ：  连接数据库 ，耗资源！</span><br><span class="line">	一次查询的结果，给他暂存在一个可以直接取到的地方！<span class="comment">--&gt; 内存 ： 缓存</span></span><br><span class="line">	</span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>



<ol>
<li>什么是缓存 [ Cache ]？<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li>什么样的数据能使用缓存？<ul>
<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p>
</li>
<li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p>
</li>
<li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p>
</li>
</ul>
</li>
</ul>
<h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：  SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志！</li>
<li>测试在一个Sesion中查询两次相同记录</li>
<li>查看日志输出</li>
</ol>
<p>缓存失效的情况：</p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<ol>
<li><p>问题:我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Caused by: java<span class="selector-class">.io</span><span class="selector-class">.NotSerializableException</span>: com<span class="selector-class">.kuang</span><span class="selector-class">.pojo</span>.User</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>
</ul>
<h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210310110835283.png" alt="image-20210310110835283"></p>
<h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</span><br></pre></td></tr></table></figure>

<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在mapper中指定使用我们的ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    &lt;defaultCache</span><br><span class="line">            eternal=&quot;false&quot;</span><br><span class="line">            maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">            overflowToDisk=&quot;false&quot;</span><br><span class="line">            diskPersistent=&quot;false&quot;</span><br><span class="line">            timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">            timeToLiveSeconds=&quot;259200&quot;</span><br><span class="line">            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;cache</span><br><span class="line">            name=&quot;cloud_user&quot;</span><br><span class="line">            eternal=&quot;false&quot;</span><br><span class="line">            maxElementsInMemory=&quot;5000&quot;</span><br><span class="line">            overflowToDisk=&quot;false&quot;</span><br><span class="line">            diskPersistent=&quot;false&quot;</span><br><span class="line">            timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">            timeToLiveSeconds=&quot;1800&quot;</span><br><span class="line">            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Redis数据库来做缓存！  K-V</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2021/02/15/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>
<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>
</ul>
<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<p>**最典型的MVC就是JSP + servlet + javabean的模式。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309154338645.png"></p>
<h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p>Model1优点：架构简单，比较适合小型项目开发；</p>
<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p>
<h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155009710.png" alt="image-20210309155009710"></p>
<ol>
<li>用户发请求</li>
<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给servlet</li>
<li>servlet转向到JSP，由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<ol>
<li>显示页面</li>
</ol>
<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>
<h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol>
<li><p>新建一个Maven工程当做父工程！pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p>
</li>
<li><p>导入servlet 和 jsp 的 jar 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Servlet类，用来处理用户的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kangxiaozhuang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中注册Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat，并启动测试</p>
<ul>
<li>localhost:8080/user?method=add</li>
<li>localhost:8080/user?method=delete</li>
</ul>
</li>
</ol>
<h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155417639.png" alt="image-20210309155417639"></p>
<p><font color=red>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</font></p>
<p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<p><strong>我们为什么要学习SpringMVC呢?</strong></p>
<p> Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……</p>
<h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><ul>
<li><p>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155457801.png" alt="image-20210309155457801"></p>
<p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>
</li>
<li><p>SpringMVC的原理如下图所示：</p>
<p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><font color=blue>原图</font></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155546138.png" alt="image-20210309155546138"></p>
</li>
</ul>
<p><font color=blue>中文图</font></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155615245.png" alt="image-20210309155615245"></p>
<h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309155709092.png" alt="image-20210309155709092"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<p><strong>简要分析执行流程</strong></p>
<ol>
<li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<ul>
<li><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p>
</li>
<li><p><strong>如上url拆分成三部分：</strong></p>
</li>
<li><p><a href="http://localhost:8080/">http://localhost:8080</a> ——&gt; 服务器域名</p>
</li>
<li><p>SpringMVC ——&gt; 部署在服务器上的web站点</p>
</li>
<li><p>hello ——&gt; 表示控制器</p>
</li>
<li><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>
</li>
</ul>
</li>
<li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>
</li>
<li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p>
</li>
<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p>
</li>
<li><p>Handler让具体的Controller执行。</p>
</li>
<li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>
</li>
<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
<h2 id="3、第一个MVC程序"><a href="#3、第一个MVC程序" class="headerlink" title="3、第一个MVC程序"></a>3、第一个MVC程序</h2><h3 id="3-1、配置版"><a href="#3-1、配置版" class="headerlink" title="3.1、配置版"></a>3.1、配置版</h3><ol>
<li><p>新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p>
</li>
<li><p>确定导入了SpringMVC 的依赖！</p>
</li>
<li><p>配置web.xml  ， 注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 处理映射器（可省略）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 处理器适配器（可省略）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kangxiaozhuang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat 启动测试！</p>
</li>
</ol>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309160013771.png" alt="image-20210309160013771"></p>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<h3 id="3-2、注解版"><a href="#3-2、注解版" class="headerlink" title="3.2、注解版"></a>3.2、注解版</h3><ol>
<li><p><strong>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p>
</li>
<li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>
</li>
<li><p><strong>配置web.xml</strong></p>
<p>注意点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>/ 和 /* 的区别：</strong></p>
<ul>
<li>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</li>
<li>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</li>
</ul>
</li>
<li><p><strong>添加Spring MVC配置文件</strong></p>
<p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhuang.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   支持mvc注解驱动</span></span><br><span class="line"><span class="comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">       要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">       和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">       这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p>
<ul>
<li>让IOC的注解生效</li>
<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..<ul>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
</li>
</ul>
<ol start="7">
<li><p><strong>创建Controller</strong></p>
<p>编写一个Java控制类：com.zhuang.controller.HelloController , 注意编码规范</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">       <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>
<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li>
<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>
<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li>
</ul>
</li>
<li><p><strong>创建视图层</strong></p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p>
<p>可以通过EL表示取出Model中存放的值，或者对象；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>配置Tomcat运行</strong></p>
<p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309160713973.png" alt="image-20210309160713973"></p>
<p><strong>OK，运行成功！</strong></p>
</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p>
<ol>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ol>
<p><font color=red>使用springMVC必须配置的三大件</font></p>
<p><strong><font color=red>处理器映射器、处理器适配器、视图解析器</font></strong></p>
<p><font color=red>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</font></p>
<h2 id="4、RestFul和控制器"><a href="#4、RestFul和控制器" class="headerlink" title="4、RestFul和控制器"></a>4、RestFul和控制器</h2><h3 id="4-1、控制器Controller"><a href="#4-1、控制器Controller" class="headerlink" title="4.1、控制器Controller"></a>4.1、控制器Controller</h3><ul>
<li><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p>
</li>
<li><p>控制器负责解析用户的请求并将其转换为一个模型。</p>
</li>
<li><p>在Spring MVC中一个控制器类可以包含多个方法</p>
</li>
<li><p>在Spring MVC中，对于Controller的配置方式有很多种</p>
</li>
</ul>
<h3 id="4-2、实现Controller接口"><a href="#4-2、实现Controller接口" class="headerlink" title="4.2、实现Controller接口"></a>4.2、实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">   <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">   <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<ol>
<li><p>新建一个Moudle，springmvc-04-controller！</p>
</li>
<li><ul>
<li>mvc的配置文件只留下 视图解析器！</li>
</ul>
</li>
<li><p>编写一个Controller类，ControllerTest1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Test1Controller&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/t1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.controller.ControllerTest1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kangxiaozhuang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161232765.png" alt="image-20210309161232765"></p>
</li>
</ol>
<p><strong>说明：</strong></p>
<ul>
<li><p>实现接口Controller定义控制器是较老的办法</p>
</li>
<li><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p>
</li>
</ul>
<h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul>
<li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p>
</li>
<li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>增加一个ControllerTest2类，使用注解实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行tomcat测试</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161309453.png" alt="image-20210309161309453"></p>
</li>
</ul>
<p><strong>可以发现，我们的两个请求都可以指向一个视图(test)，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p>
<ul>
<li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
</li>
<li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p>
</li>
<li><p>只注解在方法上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p>
</li>
<li><p>同时注解类与方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p>
</li>
</ul>
<h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p>
<p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<p><strong>功能</strong></p>
<p>资源：互联网所有的事物都可以被抽象为资源</p>
<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>
<p>分别对应 添加、 删除、修改、查询。</p>
<p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<pre><code>http://127.0.0.1/item/queryItem.action?id=1 查询,GET

http://127.0.0.1/item/saveItem.action 新增,POST

http://127.0.0.1/item/updateItem.action 更新,POST

http://127.0.0.1/item/deleteItem.action?id=1 删除,GET或POST
</code></pre>
<p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>
<table>
<thead>
<tr>
<th align="center">URL</th>
<th align="center">请求方式</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/account/1</td>
<td align="center">HTTP GET</td>
<td align="center">得到id=1的account</td>
</tr>
<tr>
<td align="center">/account/1</td>
<td align="center">HTTP DELETE</td>
<td align="center">删除id=1的account</td>
</tr>
<tr>
<td align="center">/account/1</td>
<td align="center">HTTP PUT</td>
<td align="center">更新id=1的account</td>
</tr>
<tr>
<td align="center">/account</td>
<td align="center">HTTP POST</td>
<td align="center">新增account</td>
</tr>
</tbody></table>
<p><strong>学习测试</strong></p>
<ol>
<li><p>在新建一个类 RestFulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们来测试请求查看下</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161734240.png" alt="image-20210309161734240"></p>
</li>
<li><p>思考：使用路径变量的好处？</p>
<ul>
<li><p>使路径变得更加简洁；</p>
</li>
<li><p>获得参数更加方便，框架会自动进行类型转换。</p>
</li>
<li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/add/1/a，则路径与方法不匹配，而不会是参数转换失败。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161744812.png" alt="image-20210309161744812"></p>
</li>
</ul>
</li>
<li><p>我们来修改下对应的参数类型，再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   String result = p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161758326.png" alt="image-20210309161758326"></p>
</li>
</ol>
<p><strong>使用method属性指定请求类型</strong></p>
<p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>
<p>我们来测试一下：</p>
<ul>
<li><p>增加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309161810788.png" alt="image-20210309161810788"></p>
</li>
<li><p>如果将POST修改为GET则正常了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20210309161823143.png" alt="image-20210309161823143"></p>
</li>
</ul>
<p><strong>小结：</strong></p>
<p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>
<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>
<p>方法级别的注解变体有如下几个：组合注解</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span></span><br><span class="line"><span class="variable">@PostMapping</span></span><br><span class="line"><span class="variable">@PutMapping</span></span><br><span class="line"><span class="variable">@DeleteMapping</span></span><br><span class="line"><span class="variable">@PatchMapping</span></span><br></pre></td></tr></table></figure>

<p>@GetMapping 是一个组合注解，平时使用的会比较多！</p>
<p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p>
<h2 id="5、结果跳转方式"><a href="#5、结果跳转方式" class="headerlink" title="5、结果跳转方式"></a>5、结果跳转方式</h2><h3 id="5-1、ModelAndView"><a href="#5-1、ModelAndView" class="headerlink" title="5.1、ModelAndView"></a>5.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2、ServletAPI"><a href="#5-2、ServletAPI" class="headerlink" title="5.2、ServletAPI"></a>5.2、ServletAPI</h3><p>ServletAPI</p>
<p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ol>
<li><p>通过HttpServletResponse进行输出</p>
</li>
<li><p>通过HttpServletResponse实现重定向</p>
</li>
<li><p>通过HttpServletResponse实现转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-3、SpringMVC"><a href="#5-3、SpringMVC" class="headerlink" title="5.3、SpringMVC"></a>5.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<ul>
<li>默认为forward转发（<font color=red>也可以加上</font>）</li>
<li>redirect转发需特别加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>
<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>
<p>可以重定向到另外一个请求实现 .</p>
<ul>
<li>默认为forward转发（<font color=red>不可以加上</font>）</li>
<li>redirect转发需特别加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6、数据处理"><a href="#6、数据处理" class="headerlink" title="6、数据处理"></a>6、数据处理</h2><h3 id="6-1、处理提交数据"><a href="#6-1、处理提交数据" class="headerlink" title="6.1、处理提交数据"></a>6.1、处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello?username=kangxiaozhuang">http://localhost:8080/hello?username=kangxiaozhuang</a></p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台输出 : kangxiaozhuang</p>
<p><strong>3、提交的是一个对象</strong></p>
<p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p>
<ol>
<li><p>实体类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="comment">//构造</span></span><br><span class="line">   <span class="comment">//get/set</span></span><br><span class="line">   <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>提交数据 : <a href="http://localhost:8080/mvc04/user?name=kangxiaozhuang&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kangxiaozhuang&amp;id=1&amp;age=15</a></p>
</li>
<li><p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>后台输出 : User { id=1, name=’kangxiaozhuang’, age=15 }</p>
<p>说明：如果使用对象的话，前端传递的<font color=red>参数名和对象名必须一致</font>，否则就是null。</p>
<h3 id="6-2、数据显示到前端"><a href="#6-2、数据显示到前端" class="headerlink" title="6.2、数据显示到前端"></a>6.2、数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p>
<p>我们前面一直都是如此 . 就不过多解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种 : 通过ModelMap</strong></p>
<p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   modelMap.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>第三种 : 通过Model</strong></p>
<p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3、对比"><a href="#6-3、对比" class="headerlink" title="6.3、对比"></a>6.3、对比</h3><p>就对于新手而言简单来说使用区别就是：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Model</span> 只有寥寥几个方法只适合用于储存数据，简化了新手对于<span class="keyword">Model</span>对象的操作和理解；</span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure>

<p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p>
<h2 id="7、乱码问题"><a href="#7、乱码问题" class="headerlink" title="7、乱码问题"></a>7、乱码问题</h2><p>测试步骤：</p>
<ol>
<li><p>我们可以在首页编写一个提交的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/e/t&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>后台编写对应的处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/e/t&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model,String name)</span></span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输入中文测试，发现乱码</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309163334044.png" alt="image-20210309163334044"></p>
</li>
</ol>
<p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p>
<p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p>
<p>修改了xml文件需要重启服务器！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">filter&gt;</span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color=red>注意：这里写/*，写/的话过滤不了jsp页面，不能解决乱码</font></p>
<p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p>
<p>处理方法 :</p>
<ol>
<li><p>修改tomcat配置文件 ：设置编码！</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义过滤器（万能解决）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="keyword">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       String method = request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p>
<p><strong>然后在web.xml中配置这个过滤器即可！</strong></p>
<p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>
</li>
</ol>
<h2 id="8、Json交互处理"><a href="#8、Json交互处理" class="headerlink" title="8、Json交互处理"></a>8、Json交互处理</h2><h3 id="8-1、什么是JSON？"><a href="#8-1、什么是JSON？" class="headerlink" title="8.1、什么是JSON？"></a>8.1、什么是JSON？</h3><ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>
<ul>
<li>对象表示为键值对，数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;QinJiang&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p>
<p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2、JSON-和-JavaScript-对象互转"><a href="#8-2、JSON-和-JavaScript-对象互转" class="headerlink" title="8.2、JSON 和 JavaScript 对象互转"></a>8.2、<strong>JSON 和 JavaScript 对象互转</strong></h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>代码测试</strong></p>
<ol>
<li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p>
</li>
<li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kangxiaozhuang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//编写一个js的对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">       name:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">       age:3,</span><br><span class="line"><span class="javascript">       sex:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="javascript">   <span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(str);</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//将json字符串转换为js对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user2 = <span class="built_in">JSON</span>.parse(str);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(user2.age,user2.name,user2.sex);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在IDEA中使用浏览器打开，查看控制台输出！</p>
</li>
</ol>
<h3 id="8-3、Controller返回JSON数据"><a href="#8-3、Controller返回JSON数据" class="headerlink" title="8.3、Controller返回JSON数据"></a>8.3、Controller返回JSON数据</h3><ul>
<li><p>Jackson应该是目前比较好的json解析工具了</p>
</li>
<li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p>
</li>
<li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置SpringMVC需要的配置</p>
<ul>
<li><p>（web.xml）</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p>
<p>编写一个Controller；</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//他就不会走视图解析器，会直接返回一个 字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//jackson,ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时输入中文会产生乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置Tomcat ， 启动测试一下！<a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p>
</li>
</ul>
</li>
</ul>
<p><font color=red>【注意：使用json记得处理乱码问题】</font></p>
<h3 id="8-4代码优化"><a href="#8-4代码优化" class="headerlink" title="8.4代码优化"></a>8.4代码优化</h3><p><strong>乱码统一解决</strong></p>
<p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p>
<p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>返回json字符串统一解决</strong></p>
<ul>
<li><p>@ResponseBody解决（每个方法都得加，不建议使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>@RestController</strong>（直接加到类上即可）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/j1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三一号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-5、测试集合输出"><a href="#8-5、测试集合输出" class="headerlink" title="8.5、测试集合输出"></a>8.5、测试集合输出</h3><p>增加一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个对象</span></span><br><span class="line">   	User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三1号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;张三2号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;张三3号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user4 = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;张三4号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    User user5 = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;张三5号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    list.add(user3);</span><br><span class="line">    list.add(user4);</span><br><span class="line">    list.add(user5);</span><br><span class="line">    <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">    String str = mapper.writeValueAsString(list);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果 : 十分完美，没有任何问题！</p>
<h3 id="8-6、输出时间对象"><a href="#8-6、输出时间对象" class="headerlink" title="8.6、输出时间对象"></a>8.6、输出时间对象</h3><ul>
<li><p>增加一个新的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果 :</p>
<p>  <img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309163701099.png" alt="image-20210309163710250"></p>
</li>
<li><p>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</p>
</li>
<li><p>Jackson 默认是会把时间转成timestamps形式</p>
</li>
</ul>
<p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">   ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果 : 成功的输出了时间！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309163731796.png" alt="image-20210309163731796"></p>
<p><strong><font color=red>抽取为工具类</font></strong></p>
<p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object, String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java自定义日期格式</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        <span class="comment">//sdf.format(date)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用ObjectMapper 来格式化输出</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//ObjectMapper,时间解析后的默认格式为：TImestamp.时间戳</span></span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们使用工具类，代码就更加简洁了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成！完美！</p>
<h3 id="8-7、FastJson"><a href="#8-7、FastJson" class="headerlink" title="8.7、FastJson"></a>8.7、FastJson</h3><ul>
<li>fastjson.jar是阿里开发的一款专门用于Java开发的包，</li>
<li>实现json对象与JavaBean对象的转换，</li>
<li>实现JavaBean对象与json字符串的转换，</li>
<li>实现json对象与json字符串的转换。</li>
<li>实现json的转换方法很多，最后的实现结果都是一样的。</li>
</ul>
<p>fastjson 的 pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fastjson 三个主要的类：</strong></p>
<ol>
<li>JSONObject  代表 json 对象<ul>
<li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li>
<li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li>
</ul>
</li>
<li>JSONArray   代表 json 对象数组<ul>
<li>内部是有List接口中的方法来完成操作的。</li>
</ul>
</li>
<li>JSON代表 JSONObject和JSONArray的转化<ul>
<li>JSON类源码分析与使用</li>
<li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li>
</ul>
</li>
</ol>
<p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j4&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody//他就不会走视图解析器，会直接返回一个 字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三1号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;张三2号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;张三3号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;张三4号&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        User user5 = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;张三5号&quot;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        list.add(user5);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p>
<h2 id="9、拦截器"><a href="#9、拦截器" class="headerlink" title="9、拦截器"></a>9、拦截器</h2><h3 id="9-1、概述"><a href="#9-1、概述" class="headerlink" title="9.1、概述"></a>9.1、概述</h3><ul>
<li>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。</li>
<li>开发者可以自己定义一些拦截器来实现特定的功能。</li>
</ul>
<p><strong>过滤器与拦截器的区别：</strong>拦截器是<font color=red>AOP思想</font>的具体应用。</p>
<p><strong>过滤器</strong></p>
<ul>
<li>servlet规范中的一部分，任何javaweb工程都可以使用</li>
<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>
</ul>
<p><strong>拦截器</strong> </p>
<ul>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>
<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li>
</ul>
<h3 id="9-2、自定义拦截器"><a href="#9-2、自定义拦截器" class="headerlink" title="9.2、自定义拦截器"></a>9.2、自定义拦截器</h3><ol>
<li><p>新建一个Moudule ， springmvc-Interceptor  ， 添加web支持</p>
</li>
<li><p>配置web.xml 和 springmvc-servlet.xml 文件</p>
</li>
<li><p>编写一个拦截器（必须实现<font color=red> HandlerInterceptor 接口</font>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//return true; 执行下一个拦截器，放行</span></span><br><span class="line">    <span class="comment">//return false; 不执行下一个拦截器，拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理前===========&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理后===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========清理===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在springmvc的配置文件中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包括这个请求下面的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;nuc.ss.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Controller，接收请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestController.test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动tomcat 测试一下！(<a href="http://localhost:8888/t1">http://localhost:8888/t1</a>)</p>
</li>
</ol>
<h3 id="10-3、验证用户是否登录-认证用户"><a href="#10-3、验证用户是否登录-认证用户" class="headerlink" title="10.3、验证用户是否登录 (认证用户)"></a>10.3、验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p>
<ol>
<li><p>有一个登陆页面，需要写一个controller访问页面。</p>
</li>
<li><p>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p>
</li>
<li><p>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p>
</li>
</ol>
<p><strong>测试：</strong></p>
<ol>
<li><p>编写一个登陆页面  login.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--在web-inf下面的所有页面或者资源，只能通过controller或者Servlet进行访问--%&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Controller处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/main&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把用户的信息存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;userLoginInfo&quot;</span>,username);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goOut&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goOut</span><span class="params">(HttpSession sessionl)</span> </span>&#123;</span><br><span class="line">        sessionl.removeAttribute(<span class="string">&quot;userLoginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个登陆成功的页面 main.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;span&gt;$&#123;password&#125;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;$&#123;username&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/goOut&quot;&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/goLogin&quot;&gt;登录页面&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/main&quot;&gt;首页&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写用户登录拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//放行:判断什么情况下登录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录页面也会放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;goLogin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;userLoginInfo&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断什么情况下没有登录</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在Springmvc的配置文件中注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>再次重启Tomcat测试！</p>
</li>
</ol>
<p><strong>OK，测试登录拦截功能无误.</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210309163924702.png" alt="image-20210309163924702"></p>
<h2 id="10、文件上传和下载"><a href="#10、文件上传和下载" class="headerlink" title="10、文件上传和下载"></a>10、文件上传和下载</h2><h3 id="11-1、准备工作"><a href="#11-1、准备工作" class="headerlink" title="11.1、准备工作"></a>11.1、准备工作</h3><ul>
<li>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传。</li>
<li>SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</li>
<li>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</li>
</ul>
<p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p>
<ul>
<li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p>
<ul>
<li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li>
<li>而Spring MVC则提供了更简单的封装。</li>
<li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li>
<li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li>
<li>CommonsMultipartResolver。因此，<font color=red>SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</font></li>
</ul>
<h3 id="11-2、文件上传"><a href="#11-2、文件上传" class="headerlink" title="11.2、文件上传"></a>11.2、文件上传</h3><ol>
<li><p>导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置bean：multipartResolver</p>
<p><font color=red>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li>
<li><strong>InputStream getInputStream()：获取文件流</strong></li>
<li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li>
</ul>
<p> 我们去实际测试一下</p>
</li>
<li><p>编写前端页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nuc.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//要下载的图片地址</span></span><br><span class="line">        String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        String  fileName = <span class="string">&quot;bg1.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、设置response 响应头</span></span><br><span class="line">        response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                <span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">        <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">        InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4、执行 写出操作</span></span><br><span class="line">        <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试上传文件，OK！</p>
</li>
</ol>
<p><strong>采用file.Transto 来保存上传的文件</strong></p>
<ol>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端表单提交地址修改</p>
</li>
<li><p>访问提交测试，OK！</p>
</li>
</ol>
<h3 id="11-3、文件下载"><a href="#11-3、文件下载" class="headerlink" title="11.3、文件下载"></a>11.3、文件下载</h3><p><strong>文件下载步骤：</strong></p>
<ol>
<li><p>设置 response 响应头</p>
</li>
<li><p>读取文件 – InputStream</p>
</li>
<li><p>写出文件 – OutputStream</p>
</li>
<li><p>执行操作</p>
</li>
<li><p>关闭流 （先开后关）</p>
</li>
</ol>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   String  fileName = <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;/download&quot;&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>测试，文件下载OK</p>
<h2 id="11-SpringMVC框架总结"><a href="#11-SpringMVC框架总结" class="headerlink" title="11.SpringMVC框架总结"></a>11.SpringMVC框架总结</h2><ul>
<li><code>DispatcherServlet</code>前端控制器：接收request，进行response</li>
<li><strong><code>HandlerMapping</code>处理器映射器</strong>：根据url查找Handler。（可以通过xml配置方式，注解方式）</li>
<li><strong><code>HandlerAdapter</code>处理器适配器</strong>：根据特定规则去执行Handler，编写Handler时需要按照HandlerAdapter的要求去编写。</li>
<li><strong><code>Handler</code>处理器</strong>（后端控制器）：需要程序员去编写，<strong>常用注解开发方式</strong>。<ul>
<li>Handler处理器执行后结果是<code>ModelAndView</code>，具体开发时<code>Handler</code>返回方法值类型包括：<code>ModelAndView</code>、<code>String</code>（逻辑视图名）、<code>void</code>（通过在Handler形参中添加request和response，类似原始 servlet开发方式，注意：可以通过指定response响应的结果类型实现json数据输出）</li>
</ul>
</li>
<li><code>View Resolver</code>视图解析器：根据逻辑视图名生成真正的视图（在springmvc中使用View对象表示）</li>
<li><code>View</code>视图：jsp页面，仅是数据展示，没有业务逻辑。</li>
</ul>
<h3 id="11-1、注解开发"><a href="#11-1、注解开发" class="headerlink" title="11.1、注解开发"></a>11.1、注解开发</h3><h4 id="使用注解方式的处理器映射器和适配器"><a href="#使用注解方式的处理器映射器和适配器" class="headerlink" title="使用注解方式的处理器映射器和适配器"></a>使用注解方式的处理器映射器和适配器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实际开发，使用<code>&lt;mvc:annotation-driven&gt;</code>代替上边处理器映射器和适配器配置。</p>
<ul>
<li><code>@controller</code>注解必须要加，作用标识类是一个Handler处理器。</li>
<li><code>@requestMapping</code>注解必须要加，作用：<ul>
<li>1、对url和Handler的<strong>方法</strong>进行映射。</li>
<li>2、可以窄化请求映射，设置Handler的根路径，url就是根路径+子路径请求方式</li>
<li>3、可以限制http请求的方法</li>
</ul>
</li>
</ul>
<p>映射成功后，springmvc框架生成一个Handler对象，对象中只包括 一个映射成功的method。</p>
<h4 id="注解开发中参数绑定"><a href="#注解开发中参数绑定" class="headerlink" title="注解开发中参数绑定"></a>注解开发中参数绑定</h4><p>将request请求过来的key/value的数据（理解一个串），通过转换（参数绑定的一部分），将key/value串转成形参，将转换后的结果传给形参（整个参数绑定过程）。</p>
<p>springmvc所支持参数绑定：</p>
<ul>
<li>1、默认支持很多类型：<code>HttpServletRequest</code>、<code>response</code>、<code>session</code>、<code>model/modelMap</code>(将模型数据填充到request域)</li>
<li>2、支持简单数据类型，整型、字符串、日期..等<ul>
<li>只要保证request请求的参数名和形参名称一致，自动绑定成功</li>
<li>如果request请求的参数名和形参名称不一致，可以使用<code>@RequestParam</code>（指定request请求的参数名），<code>@RequestParam</code>加在形参的前边。</li>
</ul>
</li>
<li>3、支持pojo类型<ul>
<li>只要保证request请求的参数名称和pojo中的属性名一致，自动将request请求的参数设置到pojo的属性中。</li>
</ul>
</li>
<li>4、包装类型pojo参数绑定<ul>
<li>第一种方法：在形参中添加<code>HttpServletRequest request</code>参数，通过request接收查询条件参数。</li>
<li>第二种方法：在形参中让包装类型的pojo接收查询条件参数。</li>
</ul>
</li>
<li>5、集合类型参数绑定<ul>
<li>数组绑定：方法形参使用数组接收页面请求的多个参数</li>
<li>list绑定：使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义<code>list&lt;pojo&gt;</code>属性</li>
<li>map绑定：在包装类中定义Map对象，并添加<code>get/set</code>方法，action使用包装对象接收</li>
</ul>
</li>
</ul>
<p><em>注意：形参中即有pojo类型又有简单类型，参数绑定互不影响。</em></p>
<p>自定义参数绑定</p>
<ul>
<li>日期类型绑定自定义：</li>
</ul>
<p>定义的<code>Converter&lt;源类型，目标类型&gt;</code>接口实现类，比如：<code>Converter&lt;String,Date&gt;</code>,表示：将请求的日期数据串转成java中的日期类型。</p>
<p><em>注意：要转换的目标类型一定和接收的pojo中的属性类型一致。</em></p>
<p>将定义的Converter实现类注入到处理器适配器中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- conversionService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 转换器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.krislin.controller.converter.CustomDateConverter&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="springmvc和struts2区别"><a href="#springmvc和struts2区别" class="headerlink" title="springmvc和struts2区别"></a>springmvc和struts2区别</h4><p>springmvc面向方法开发的（更接近service接口的开发方式），struts2面向类开发。</p>
<p>springmvc可以单例开发，struts2只能是多例开发。</p>
<h3 id="11-2、校验"><a href="#11-2、校验" class="headerlink" title="11.2、校验"></a>11.2、校验</h3><p>服务端校验：</p>
<ul>
<li>控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）</li>
<li>业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。</li>
<li>持久层dao：一般是不校验的。</li>
</ul>
<p>一般使用hibernate的校验框架，依赖<code>hibernate-validator.jar</code>,<code>jboss-logging.jar</code>,<code>validation-api.jar</code>这几个jar包</p>
<p>开发步骤</p>
<ul>
<li>在springmvc.xml中添加校验器</li>
<li>校验器注入到处理器适配器中</li>
<li>在CustomValidationMessages.properties配置校验错误信息</li>
<li>在pojo中添加校验规则</li>
<li>在控制器中对参数注解<code>@Validated</code>来捕获和显示校验错误信息</li>
</ul>
<p>分组校验</p>
<ul>
<li>定义校验分组</li>
<li>在校验规则中添加分组</li>
<li>在controller方法使用指定分组的校验</li>
</ul>
<h3 id="11-3、数据回显"><a href="#11-3、数据回显" class="headerlink" title="11.3、数据回显"></a>11.3、数据回显</h3><p>数据回显有三种方法</p>
<ul>
<li>1.springmvc默认对pojo数据进行回显。<ul>
<li>pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</li>
<li>使用<code>@ModelAttribute</code>指定pojo回显到页面在request中的key</li>
</ul>
</li>
<li>2.<code>@ModelAttribute</code>还可以将方法的返回值传到页面</li>
<li>3.使用最简单方法使用model，可以不用<code>@ModelAttribute</code></li>
</ul>
<h3 id="11-4、异常处理"><a href="#11-4、异常处理" class="headerlink" title="11.4、异常处理"></a>11.4、异常处理</h3><p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理。</p>
<p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。</p>
<p>全局异常处理器处理思路：</p>
<p>解析出异常类型</p>
<ul>
<li>如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示</li>
<li>如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</li>
</ul>
<p>抛出异常的位置</p>
<ul>
<li>如果与业务功能相关的异常，建议在service中抛出异常。</li>
<li>与业务功能没有关系的异常，建议在controller中抛出。</li>
</ul>
<h3 id="11-5、上传图片"><a href="#11-5、上传图片" class="headerlink" title="11.5、上传图片"></a>11.5、上传图片</h3><p>开发步骤</p>
<ul>
<li>在页面form中提交enctype=”multipart/form-data”的数据时，需要springmvc对multipart类型的数据进行解析。</li>
<li>在springmvc.xml中配置multipart类型解析器</li>
<li>加入上传图片的jar：<code>commons-fileupload</code></li>
<li>创建图片虚拟目录存储图片</li>
</ul>
<h3 id="11-6、json数据交互"><a href="#11-6、json数据交互" class="headerlink" title="11.6、json数据交互"></a>11.6、json数据交互</h3><p>两种json数据交互的形式：</p>
<ul>
<li>请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。</li>
<li>请求key/value、输出json。此方法比较常用。</li>
</ul>
<p>需要的依赖：</p>
<ul>
<li><code>jackson-databind</code></li>
<li><code>jackson-mapper-asl</code></li>
</ul>
<p>在注解适配器中加入<code>messageConverters</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：如果使用<code>&lt;mvc:annotation-driven /&gt;</code>则不用定义上边的内容。</strong></p>
<p>在controller的返回值上加注解<code>@ResponseBody</code>来将java对象输出json，返回json格式数据</p>
<h3 id="11-7、RESTful支持"><a href="#11-7、RESTful支持" class="headerlink" title="11.7、RESTful支持"></a>11.7、RESTful支持</h3><p><code>@RequestMapping(value=&quot;/ itemsView/&#123;id&#125;&quot;)</code>：<code>&#123;×××&#125;</code>占位符，请求的URL可以是<code>/viewItems/1</code>或<code>/viewItems/2</code>，通过在方法中使用<code>@PathVariable</code>获取{×××}中的×××变量。<code>@PathVariable</code>用于将请求URL中的模板变量映射到功能处理方法的参数上。</p>
<p>如果<code>@RequestMapping</code>中表示为<code>/itemsView/&#123;id&#125;</code>，id和形参名称一致，<code>@PathVariable</code>不用指定名称。</p>
<p>同时需要配置前端控制器。若要访问静态资源，还需在springmvc.xml中添加静态资源解析方法,如<code>&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</code></p>
<h3 id="11-8、拦截器"><a href="#11-8、拦截器" class="headerlink" title="11.8、拦截器"></a>11.8、拦截器</h3><h4 id="11-8-1、拦截器定义"><a href="#11-8-1、拦截器定义" class="headerlink" title="11.8.1、拦截器定义"></a>11.8.1、拦截器定义</h4><p>定义拦截器，实现<code>HandlerInterceptor</code>接口。接口中提供三个方法。可以从名称和参数看出各个接口的顺序和作用</p>
<ul>
<li><code>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception</code><ul>
<li>参数最少，只有三个</li>
<li>进入 Handler方法之前执行</li>
<li>用于身份认证、身份授权。比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行</li>
</ul>
</li>
<li><code>public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception</code><ul>
<li>多了一个modelAndView参数</li>
<li>进入Handler方法之后，返回modelAndView之前执行 </li>
<li>应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图</li>
</ul>
</li>
<li><code>public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception</code><ul>
<li>多了一个Exception的类型的参数</li>
<li>执行Handler完成执行此方法</li>
<li>应用场景：统一异常处理，统一日志处理</li>
</ul>
</li>
</ul>
<h4 id="11-8-2、拦截器的配置"><a href="#11-8-2、拦截器的配置" class="headerlink" title="11.8.2、拦截器的配置"></a>11.8.2、拦截器的配置</h4><ul>
<li>针对HandlerMapping配置(一般不推荐)<ul>
<li>springmvc拦截器针对HandlerMapping进行拦截设置，如果在某个HandlerMapping中配置拦截，经过该HandlerMapping映射成功的handler最终使用该拦截器 </li>
</ul>
</li>
<li>类似全局的拦截器<ul>
<li>springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中。 </li>
</ul>
</li>
</ul>
<h4 id="11-8-3、拦截器测试及其应用"><a href="#11-8-3、拦截器测试及其应用" class="headerlink" title="11.8.3、拦截器测试及其应用"></a>11.8.3、拦截器测试及其应用</h4><p>链式执行测试</p>
<ul>
<li>两个拦截器都放行<ul>
<li>preHandle方法按顺序执行，postHandle和afterCompletion按拦截器配置的逆向顺序执行</li>
</ul>
</li>
<li>拦截器1放行，拦截器2不放行<ul>
<li>拦截器1放行，拦截器2 preHandle才会执行。</li>
<li>拦截器2 preHandle不放行，拦截器2 postHandle和afterCompletion不会执行。</li>
<li>只要有一个拦截器不放行，postHandle不会执行。</li>
</ul>
</li>
<li>两个拦截器都不放 <ul>
<li>拦截器1 preHandle不放行，postHandle和afterCompletion不会执行。</li>
<li>拦截器1 preHandle不放行，拦截器2不执行。</li>
</ul>
</li>
</ul>
<p>应用</p>
<ul>
<li>统一日志处理拦截器，需要该拦截器preHandle一定要放行，且将它放在拦截器链接中第一个位置。</li>
<li>登陆认证拦截器，放在拦截器链接中第一个位置。权限校验拦截器，放在登陆认证拦截器之后。（因为登陆通过后才校验权限，当然登录认证拦截器要放在统一日志处理拦截器后面）</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2021/02/05/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>spring理念：是现有的技术更加容易使用，本身是一个大杂烩。</p>
<ul>
<li>SSH：Struct2 + Spring + Hibernate</li>
<li>SSM: SpringMVC + Spring + Mybatis</li>
</ul>
<p>官网： <a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a> </p>
<p>官方下载： <a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a> </p>
<p>GitHub： <a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a> </p>
<p><a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc">Spring Web MVC</a> <strong>»</strong> <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.5.RELEASE">5.2.5.RELEASE</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>spring是开源的免费的容器。</li>
<li>spring是一个轻量级的，非入侵式的。</li>
<li>控制反转（IOC），面向切面编程 (AOP)。</li>
<li>支持事务处理，对框架整合的支持。</li>
</ul>
<p>总结：spring是一个轻量级的控制反转(IOC)和面向切面编程(AOP)的框架。</p>
<h2 id="2-IOC理论"><a href="#2-IOC理论" class="headerlink" title="2.IOC理论"></a>2.IOC理论</h2><ol>
<li><p>UserDao</p>
</li>
<li><p>UserDaoImp</p>
</li>
<li><p>UserSevice</p>
</li>
<li><p>UserServiceImp</p>
</li>
</ol>
<p>在之前，用户的需求可能会影响原来的代码。</p>
<p>使用一个set。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>之前是主动创建对象，控制权在程序员手上。</p>
</li>
<li><p>使用set之后，是被动接受对象。</p>
</li>
</ul>
<h2 id="3-Hello-Spring"><a href="#3-Hello-Spring" class="headerlink" title="3. Hello Spring"></a>3. Hello Spring</h2><p>pojo中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resource中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean = 对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id = 变量名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--class = new的对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--property 相当于给对象中的属性设值--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hou.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象下能在都在spring·中管理了，我们要使用，直接取出来就可以了</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bean = 对象<br>id = 变量名<br>class = new的对象<br>property 相当于给对象中的属性设值</p>
<p>核心用set注入</p>
<p>第一个文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userdaomysql&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hou.zhuang.UserDaoMysqlImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.service.UserServiceImp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ref引用spring中已经创建很好的对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--value是一个具体的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userdaomysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4. IOC创建对象的方式"></a>4. IOC创建对象的方式</h2><ol>
<li>使用无参构造创建对象，默认。</li>
<li>使用有参构造</li>
</ol>
<p>下标赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hou&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类型赋值（不建议使用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dong&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接通过参数名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hou&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5. Spring配置"></a>5. Spring配置</h2><p><strong>别名</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhuang&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user2aaa&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Bean的配置</strong></p>
<ul>
<li>id：bean的id标识符</li>
<li>class：bean对象所对应的类型</li>
<li>name：别名，更高级，可以同时取多个别名。</li>
</ul>
<p><strong>import</strong></p>
<p>一般用于团队开发，它可以将多个配置文件，导入合并为一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6. DI依赖注入"></a>6. DI依赖注入</h2><p><strong>构造器注入</strong></p>
<p><strong>set方式注入</strong>（重点）</p>
<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入</li>
</ul>
<p>【环境搭建】</p>
<ol>
<li>复杂类型</li>
<li>真实测试对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties infor;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, game=&quot;</span> + game +</span><br><span class="line">                <span class="string">&quot;, infor=&quot;</span> + infor +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xian&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hou&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>eat<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>drink<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>play<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wangzhe<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>daota<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;infor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;id&quot;</span>&gt;</span>20200405<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hdk<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三方</strong></p>
<p>p标签和c标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值/set注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;use&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;dong&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间通过构造器注入/构造器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;use2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;kun&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;19&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>bean的作用域</strong></p>
<ol>
<li>单例模式（默认）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;use2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;kun&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;19&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>原型模式: 每次从容器中get的时候，都产生一个新对象！</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;use2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;kun&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其余的request、session、application这些只能在web开放中使用！</li>
</ol>
<h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7. Bean的自动装配"></a>7. Bean的自动装配</h2><ul>
<li><p>自动装配是Spring是满足bean依赖的一种方式</p>
</li>
<li><p>Spring会在上下文自动寻找，并自动给bean装配属性</p>
</li>
</ul>
<p>在Spring中有三种装配的方式</p>
<ol>
<li><p>在xml中显示配置</p>
</li>
<li><p>在java中显示配置</p>
</li>
<li><p>隐式的自动装配bean 【重要】</p>
</li>
<li><p>环境搭建：一个人有两个宠物</p>
</li>
<li><p>Byname自动装配：byname会自动查找，和自己对象set对应的值对应的id</p>
<p>保证所有id唯一，并且和set注入的值一致</p>
</li>
<li><p>Bytype自动装配：byType会自动查找，和自己对象属性相同的bean</p>
<p>保证所有的class唯一</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jiao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jiao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--byname会自动查找，和自己对象set对应的值对应的id--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;people&quot; class=&quot;com.pojo.People&quot; autowire=&quot;byName&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;name&quot; value=&quot;hou&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--byType会自动查找，和自己对象属性相同的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hou&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致！</li>
<li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致！</li>
</ul>
<h3 id="使用注解自动装配"><a href="#使用注解自动装配" class="headerlink" title="使用注解自动装配"></a>使用注解自动装配</h3><p>jdk1.5支持的注解，spring2.5支持的注解</p>
<p> The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML. </p>
<p>导入context约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>@Autowire</strong></p>
<p>在属性上个使用，也可以在set上使用</p>
<p>使用**@Autowire**我们可以不用编写set方法了，前提是你这个自动装配的属性在IOC(spring)容器中存在，且符合名字byname</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Nullable 字段标志的注解，说明这个字段可以为null</span><br></pre></td></tr></table></figure>

<p>如果@Autowired自动装配环境比较复杂。自动装配无法通过一个注解完成的时候</p>
<p>我们可以使用@Qualifier(value = “dog”)去配合使用，指定一个唯一的id对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Resource(name=”dog”)也可以</p>
<p>区别：</p>
<ul>
<li>@autowire默认通过byname实现，而且必须要求这个对象存在</li>
<li>@resource默认通过byName实现，如果找不到，通过byType实现</li>
</ul>
<h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h2><p>在spring4之后，必须要保证aop的包导入</p>
<p>使用注解需要导入contex的约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>属性如何注入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;dong&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>衍生的注解</li>
</ol>
<p>@Component有几个衍生注解，会按照web开发中，mvc架构中分层。</p>
<ul>
<li>dao （@Repository）</li>
<li>service（@Service）</li>
<li>controller（@Controller）</li>
</ul>
<p>这四个注解功能一样的，都是代表将某个类注册到容器中</p>
<ol start="3">
<li>作用域</li>
</ol>
<p>@Scope(“singleton”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;dong&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>xml与注解</p>
<ul>
<li>xml更加万能，维护简单</li>
<li>注解，不是自己的类，使用不了，维护复杂</li>
</ul>
<p>最佳实践：</p>
<ul>
<li>xml用来管理bean</li>
<li>注解只用来完成属性的注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-使用java方式配置spring"><a href="#9-使用java方式配置spring" class="headerlink" title="9. 使用java方式配置spring"></a>9. 使用java方式配置spring</h2><p>JavaConfig</p>
<p>Spring的一个子项目，在spring4之后，，他成为了核心功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//这个也会被spring容器托管，注册到容器中，因为他本来就是一个@Component</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(Config2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;dong&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-动态代理"><a href="#10-动态代理" class="headerlink" title="10. 动态代理"></a>10. 动态代理</h2><p>动态代理和静态代理</p>
<p>角色一样</p>
<p>动态代理类是动态生成的，不是我们直接写好的！</p>
<p>动态代理：基于接口，基于类</p>
<ul>
<li>基于接口：JDK的动态代理【使用】</li>
<li>基于类：cglib</li>
<li>java字节码</li>
</ul>
<p>InvocationHandler：调用处理程序并返回一个结果。</p>
<p>Proxy：代理。作用：生成动态代理这个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocation</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;see house&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fare&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;host rent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色</span></span><br><span class="line">        ProxyInvocation proxyInvocation = <span class="keyword">new</span> ProxyInvocation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过调用程序处理角色来处理我们要调用的接口对象</span></span><br><span class="line">        proxyInvocation.setRent(host);</span><br><span class="line"></span><br><span class="line">        Rent proxy = (Rent) proxyInvocation.getProxy();  <span class="comment">//这里的proxy是动态生成的</span></span><br><span class="line"></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11.AOP"></a>11.AOP</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法一：使用spring接口【springAPI接口实现】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beanss</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression:表达式，execution（要执行的位置）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImp.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method：要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returnVaule: 返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplcationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//动态代理代理的是接口</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userservice&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：自定义来实现AOP【主要是切面定义】建议第二种</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.DiyPointcut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImp.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：注解方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ann&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.Annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.service.UserServiceImp.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.service.UserServiceImp.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给地暖管一个参数，代表我们要获取切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.service.UserServiceImp.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object proceed = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;after around&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Spring 框架,如果类实现了接口,就使用 JDK 的动态代理生成代理对象,如果这个类没有实现任何接口,使用CGLIB 生成代理对象.（ 底层会自动切换）</p>
<h3 id="Spring-代理知识总结"><a href="#Spring-代理知识总结" class="headerlink" title="Spring 代理知识总结"></a>Spring 代理知识总结</h3><p>Spring 在运行期， 生成动态代理对象， 不需要特殊的编译器<br>Spring AOP 的底层就是通过 JDK 动态代理或 CGLib 动态代理技术 为目标Bean 执行横向织入</p>
<ul>
<li>1.若目标对象实现了若干接口， spring 使用 JDK 的 <code>java.lang.reflect.Proxy</code> 类代理。</li>
<li>2.若目标对象没有实现任何接口， spring 使用 CGLIB 库生成目标对象的子类。</li>
<li>程序中应优先对接口创建代理， 便于程序解耦维护</li>
<li>标记为 final 的方法， 不能被代理， 因为无法进行覆盖</li>
<li>JDK 动态代理， 是针对接口生成子类， 接口中方法不能使用 final 修饰</li>
<li>CGLib 是针对目标类生产子类， 因此类或方法 不能使 final 的</li>
<li>Spring 只支持方法连接点， 不提供属性连接</li>
</ul>
<h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql connector版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载配置文件jdbc.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring中默认的数据源"><a href="#Spring中默认的数据源" class="headerlink" title="Spring中默认的数据源"></a>Spring中默认的数据源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring内置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="C3P0数据源"><a href="#C3P0数据源" class="headerlink" title="C3P0数据源"></a>C3P0数据源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--c3p0数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="DBCP数据源"><a href="#DBCP数据源" class="headerlink" title="DBCP数据源"></a>DBCP数据源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DBCP数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="12-JdbcTemplate的增删改查"><a href="#12-JdbcTemplate的增删改查" class="headerlink" title="12.JdbcTemplate的增删改查"></a>12.JdbcTemplate的增删改查</h2><h4 id="配置数据库的操作模板-JdbcTemplate"><a href="#配置数据库的操作模板-JdbcTemplate" class="headerlink" title="配置数据库的操作模板 JdbcTemplate"></a>配置数据库的操作模板 JdbcTemplate</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个数据库的操作模板： JdbcTemplate --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring的默认数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.加载spring配置</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 2.根据id获取bean对象</span></span><br><span class="line">JdbcTemplate jdbcTemplate = (JdbcTemplate) ac.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>);</span><br><span class="line"><span class="comment">// 3.执行操作</span></span><br></pre></td></tr></table></figure>

<h4 id="保存操作"><a href="#保存操作" class="headerlink" title="保存操作"></a>保存操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 保存操作</span></span><br><span class="line">jdbcTemplate.update(<span class="string">&quot;insert into account(name,money) values (&#x27;ffff&#x27;,77777.0)&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.2 修改操作</span></span><br><span class="line">jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where id=?&quot;</span>,<span class="number">300</span>,<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.3 删除操作</span></span><br><span class="line">jdbcTemplate.update(<span class="string">&quot;delete account where id=?&quot;</span>,<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<h4 id="查询所有操作"><a href="#查询所有操作" class="headerlink" title="查询所有操作"></a>查询所有操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.4 查询所用操作</span></span><br><span class="line">List&lt;Account&gt; accounts = jdbcTemplate.query(<span class="string">&quot;select * from account where money&gt;?&quot;</span>,<span class="keyword">new</span> AccountRowMapper(),<span class="number">500</span>);</span><br><span class="line"><span class="keyword">for</span> (Account account:accounts) &#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        account.setName(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        account.setMoney(resultSet.getFloat(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询一个操作"><a href="#查询一个操作" class="headerlink" title="查询一个操作"></a>查询一个操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.5 查询一个操作</span></span><br><span class="line">List&lt;Account&gt; account = jdbcTemplate.query(<span class="string">&quot;select * from account where id=?&quot;</span>,<span class="keyword">new</span> AccountRowMapper(),<span class="number">23</span>);</span><br><span class="line">System.out.println(account.isEmpty()?<span class="string">&quot;没有结果&quot;</span>:account.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="查询一行一列操作"><a href="#查询一行一列操作" class="headerlink" title="查询一行一列操作"></a>查询一行一列操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.6 查询返回一行一列操作</span></span><br><span class="line"><span class="comment">// 查询返回一行一列：使用聚合函数，在不使用 group by 字句时，都是返回一行一列。最常用的就是分页中获取总记录条数</span></span><br><span class="line"><span class="keyword">int</span> count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account where money&gt;?&quot;</span>,Integer.class,<span class="number">500</span>);</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>

<h2 id="13-整合mybatis"><a href="#13-整合mybatis" class="headerlink" title="13. 整合mybatis"></a>13. 整合mybatis</h2><p>文档： <a href="https://mybatis.org/spring/zh/">https://mybatis.org/spring/zh/</a> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-10-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;****&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整合</p>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>spring.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--data source--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;****&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlsession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bound mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-dao.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>方法二：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--data source--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hdk123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlsession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bound mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userMapper&quot; class=&quot;com.mapper.UserMapperImpl&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;sqlSessionTemplate&quot; ref=&quot;sqlSession&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperIml2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperIml2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-声明式事务"><a href="#14-声明式事务" class="headerlink" title="14. 声明式事务"></a>14. 声明式事务</h2><ul>
<li>要么都成功，要么都失败</li>
<li>十分重要，涉及到数据一致性</li>
<li>确保完整性和一致性</li>
</ul>
<p>事务的acid原则：</p>
<ul>
<li><p>原子性</p>
</li>
<li><p>一致性</p>
</li>
<li><p>隔离性</p>
<ul>
<li>多个业务可能操作一个资源，防止数据损坏</li>
</ul>
</li>
<li><p>持久性</p>
<ul>
<li>事务一旦提交，无论系统发生什么问题，结果都不会被影响。</li>
</ul>
</li>
</ul>
<p>Spring中的事务管理</p>
<ul>
<li>声明式事务</li>
<li>编程式事务</li>
</ul>
<p>声明式事务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-tx.aop&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--data source--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlsession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bound mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合aop实现事务置入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;tx1&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txpointxut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;tx1&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txpointxut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperIml2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values</span><br><span class="line">        (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperIml2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;long&quot;</span>, <span class="string">&quot;zhi&quot;</span>);</span><br><span class="line">        SqlSession sqlSession = getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.delete(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC学习笔记</title>
    <url>/2021/01/25/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JDBC和数据库连接池"><a href="#JDBC和数据库连接池" class="headerlink" title="JDBC和数据库连接池"></a>JDBC和数据库连接池</h1><p><strong>写在前面</strong></p>
<p><strong>学习地址：<a href="https://www.bilibili.com/video/BV1zv41157NC">【韩顺平讲JDBC】</a></strong></p>
<p><strong>感谢韩老师的视频！十分感谢</strong></p>
<h1 id="1-JDBC概述"><a href="#1-JDBC概述" class="headerlink" title="1. JDBC概述"></a>1. JDBC概述</h1><h2 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h2><ul>
<li>JDBC为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题</li>
<li>使用JDBC,可以连接任何提供JDBC驱动程序的数据库系统，从而完成对数据库的各种操作</li>
</ul>
<h2 id="1-2-原理图"><a href="#1-2-原理图" class="headerlink" title="1.2 原理图"></a>1.2 原理图</h2><p><img src="https://pic.imgdb.cn/item/60c8046c844ef46bb28ab3af.jpg"></p>
<h2 id="1-3-好处"><a href="#1-3-好处" class="headerlink" title="1.3 好处"></a>1.3 好处</h2><p>JDBC是用Java提供一套用于数据库操作的接口API，Java程序员只需要面向接口编程即可，不同的数据库厂商，需要针对这套接口，提供不同的实现。</p>
<p><img src="https://pic.imgdb.cn/item/60c80569844ef46bb296377e.jpg"></p>
<h1 id="2-JDBC入门"><a href="#2-JDBC入门" class="headerlink" title="2. JDBC入门"></a>2. JDBC入门</h1><p>首先创建一个数据库和一张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line"></span><br><span class="line"> `id` <span class="type">INT</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> `name` <span class="type">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-演示一把"><a href="#2-1-演示一把" class="headerlink" title="2.1 演示一把"></a>2.1 演示一把</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Jdbc01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 示范如何使用Jdbc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 8:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jdbc01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Driver driver = <span class="keyword">new</span> Driver();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  jdbc:mysql: 规定好的协议，通过jdbc的方式连接mysql</span></span><br><span class="line"><span class="comment">         *  localhost 表示主机</span></span><br><span class="line"><span class="comment">         *  3306 表示mysql监听的端口</span></span><br><span class="line"><span class="comment">         *  mybatis表示哪个数据库</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="comment">//将账号密码 放入到Properties</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//账号密码</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connect = driver.connect(url, properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into user value (&#x27;10&#x27;,&#x27;张三&#x27;,&#x27;123&#x27;)&quot;</span>;</span><br><span class="line">        <span class="comment">//statement用于执行静态SQL语句并返回其生成的结果的对象</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="keyword">int</span> row = statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(row &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-连接数据库的5种方式"><a href="#2-2-连接数据库的5种方式" class="headerlink" title="2.2 连接数据库的5种方式"></a>2.2 连接数据库的5种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> JdbcConn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> java 连接 mysql 的 5种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 9:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        connect01();</span><br><span class="line">        connect02();</span><br><span class="line">        connect03();</span><br><span class="line">        connect04();</span><br><span class="line">        connect05();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建Driver对象</span></span><br><span class="line">        Driver driver = <span class="keyword">new</span> Driver();</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="comment">//将账号密码 放入到Properties</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//账号密码</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connect = driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用 DriverManager 替代 driver 进行统一管理</span></span><br><span class="line">        <span class="comment">//使用反射加载 Driver 类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Driver driver = (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="comment">//将账号密码 放入到Properties</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//账号密码</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connect = driver.connect(url, properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 2=&quot;</span> + connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用反射加载 Driver 类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式3=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用反射加载了 Driver 类</span></span><br><span class="line">        <span class="comment">//在加载 Driver 类时，完成注册</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        源码: 1. 静态代码块，在类加载时，会执行一次. 2. DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">        3. 因此注册 driver 的工作已经完成</span></span><br><span class="line"><span class="comment">        static &#123;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">        DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">        &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">        throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式4=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect05</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//通过 Properties 对象获取配置文件的信息</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc.properties&quot;</span>));</span><br><span class="line"><span class="comment">//获取相关的值</span></span><br><span class="line">        String user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        String url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式 5 &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-ResultSet"><a href="#3-ResultSet" class="headerlink" title="3. ResultSet"></a>3. ResultSet</h1><h2 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h2><ol>
<li>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成</li>
<li><code>ResultSet</code>对象保持一个光标指向其当前的数据行，最初，光标位于第一行</li>
<li>next方法将光标移动到下一行，并且由于在ResultSet对象中没有更多行时返回false，因此可以用<code>while</code>循环来遍历结果集</li>
</ol>
<h2 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2 代码示例"></a>3.2 代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ResultSet_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ResultSet结果集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 12:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSet_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//得到 statement对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;select id,name,pwd from user&quot;</span>;</span><br><span class="line">        <span class="comment">// 调用查询方法 返回结果集</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">            String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">            String pwd = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + pwd );</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-Statement"><a href="#4-Statement" class="headerlink" title="4. Statement"></a>4. Statement</h1><h2 id="4-1-基本介绍"><a href="#4-1-基本介绍" class="headerlink" title="4.1 基本介绍"></a>4.1 基本介绍</h2><ol>
<li><code>Statement</code>对象，用于执行静态SQL语句并返回其生成的结果的对象</li>
<li>在建立连接后，需要对数据库进行访问，执行命名或是SQL语句，可以通过</li>
</ol>
<ul>
<li><code>Statement</code> <strong>存在SQL注入问题</strong></li>
<li><code>PreparedStatement</code> <strong>预处理</strong></li>
<li><code>CallableStatement</code> <strong>存储过程</strong> </li>
</ul>
<ol start="4">
<li>Statement对象执行SQL语句，存在SQL注入风险</li>
<li>SQL注入是利用某些系统对用户输入的数据进行充分的检查，而在用户输入数据中非法的SQL语句段或命令，恶意攻击数据库</li>
<li>要防范SQL注入，用<code>PrepareStatement</code>取代<code>Statement</code>即可</li>
</ol>
<h2 id="4-2-代码演示"><a href="#4-2-代码演示" class="headerlink" title="4.2 代码演示"></a>4.2 代码演示</h2><p>首先创个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 管理员表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> admin ( </span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, pwd <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;123&#x27;</span>); <span class="comment">-- 查找某个管理是否存在</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> admin</span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"><span class="comment">-- 输入用户名 为 1&#x27; or</span></span><br><span class="line"><span class="comment">-- 输入万能密码 为 or &#x27;1&#x27;= &#x27;1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> admin</span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">OR</span><span class="string">&#x27; AND pwd = &#x27;</span><span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Statement_</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Statement_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Statement演示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 13:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Statement_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);</span><br><span class="line">        <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        String adminName = scanner.nextLine();</span><br><span class="line">        <span class="comment">//如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        String adminPwd = scanner.nextLine();</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//得到 statement对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;select name,pwd from admin &quot;</span> +</span><br><span class="line">                <span class="string">&quot;where name =&#x27;&quot;</span> + adminName + <span class="string">&quot;&#x27; and pwd = &#x27;&quot;</span> + adminPwd + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.close();</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-PrepareStatement"><a href="#5-PrepareStatement" class="headerlink" title="5. PrepareStatement"></a>5. PrepareStatement</h1><h2 id="5-1-基本介绍"><a href="#5-1-基本介绍" class="headerlink" title="5.1 基本介绍"></a>5.1 基本介绍</h2><ol>
<li><code>PrepareStatement</code>执行的SQL语句中参数用<code>?</code>表示，调用<code>PrepareStatement</code>对象的setXXX()方法来设置这些参数</li>
</ol>
<ul>
<li>setXXX()方法 有两个参数，第一个参数是设置SQL语句中的参数的索引(从1开始)，第二个参数是设置 SQL语句中的参数的值</li>
</ul>
<ol start="2">
<li>调用<code>excuteQuery()</code>返回<code>Result</code>对象</li>
<li>调用<code>excuteUpdate()</code>执行更新，包括增加，修改，删除</li>
</ol>
<h2 id="5-2-预处理的好处"><a href="#5-2-预处理的好处" class="headerlink" title="5.2 预处理的好处"></a>5.2 预处理的好处</h2><ol>
<li>不再使用+拼接SQL语句，减少语法错误</li>
<li>有效解决SQL注入问题</li>
<li>大大减少编译次数，效率较高</li>
</ol>
<h2 id="5-3-代码演示"><a href="#5-3-代码演示" class="headerlink" title="5.3 代码演示"></a>5.3 代码演示</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PreparedStatement_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> PreparedStatement使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 13:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatement_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);</span><br><span class="line">        <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        String adminName = scanner.nextLine();</span><br><span class="line">        <span class="comment">//如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        String adminPwd = scanner.nextLine();</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//得到 statement对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from admin where NAME = ? and pwd = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, adminName);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, adminPwd);</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.close();</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-CRUD操作"><a href="#5-4-CRUD操作" class="headerlink" title="5.4 CRUD操作"></a>5.4 CRUD操作</h2><p><strong>插入操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PreparedStatement_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> PreparedStatement使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 13:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatement_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);</span><br><span class="line">        <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        String adminName = scanner.nextLine();</span><br><span class="line">        <span class="comment">//如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        String adminPwd = scanner.nextLine();</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//得到 statement对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">      <span class="comment">//  String sql = &quot;select * from admin where NAME = ? and pwd = ?&quot;;</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into admin values(?, ?)&quot;</span>;</span><br><span class="line">        <span class="comment">//preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, adminName);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, adminPwd);</span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>? <span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        connection.close();</span><br><span class="line">       <span class="comment">// resultSet.close();</span></span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PreparedStatement_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> PreparedStatement使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 13:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatement_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);</span><br><span class="line">        <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        String adminName = scanner.nextLine();</span><br><span class="line">        <span class="comment">//如果希望看到 SQL 注入，这里需要用 nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        String adminPwd = scanner.nextLine();</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//得到 statement对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//sql语句</span></span><br><span class="line">        <span class="comment">//  String sql = &quot;select * from admin where NAME = ? and pwd = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into admin values(?, ?)&quot;;</span></span><br><span class="line">        <span class="comment">//preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        String sql = <span class="string">&quot;delete from admin where name = ?&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, adminName);</span><br><span class="line">     <span class="comment">//   preparedStatement.setString(2, adminPwd);</span></span><br><span class="line">        <span class="comment">// ResultSet resultSet = preparedStatement.executeQuery();</span></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.close();</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-Jdbc-API"><a href="#6-Jdbc-API" class="headerlink" title="6. Jdbc API"></a>6. Jdbc API</h1><p><img src="https://pic.imgdb.cn/item/60c848b1844ef46bb2f7e5a0.jpg"></p>
<h1 id="7-JDBCUtils"><a href="#7-JDBCUtils" class="headerlink" title="7. JDBCUtils"></a>7. JDBCUtils</h1><p>编写一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> JDBCUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> JDBCUtils工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/16 20:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义4个相关属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc.properties&quot;</span>));</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 将编译异常转成运行异常</span></span><br><span class="line">            <span class="comment">// 可以选择捕获异常或者选择默认处理异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库 返回连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭相关资源</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. ResultSet 结果集</span></span><br><span class="line"><span class="comment">        2. Statement 或者 PreparedStatement</span></span><br><span class="line"><span class="comment">        3. Connection</span></span><br><span class="line"><span class="comment">        4. 如果需要关闭资源，就传入对象，否则传入 null</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为 null</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//将编译异常转成运行异常抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用下工具类进行查询，修改，增加</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> JDBCUtils_Use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> JDBCUtils_Use演示工具类的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/16 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils_Use</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   testSelect();</span></span><br><span class="line">        testDML();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个 sql</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from user where id = ?&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet set = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建 PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//com.mysql.jdbc.JDBC4Connection</span></span><br><span class="line">            System.out.println(connection.getClass());</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?号赋值</span></span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = set.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String pwd = set.getString(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + pwd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">&quot;update user set name=? where id=?&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//创建preparedStatement对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-事务"><a href="#8-事务" class="headerlink" title="8. 事务"></a>8. 事务</h1><h2 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h2><ol>
<li>JDBC程序中当一个<code>Connection</code>对象创建时，默认情况下是自动提交事务，每次执行一个SQL语句，如果执行成功，就会向数据库自动提交，而不能回滚</li>
<li>JDBC程序中为了让多个SQL语句作为一个整体，需要<strong>使用事务</strong></li>
<li>调用<code>Connection</code>的<code>setAutoCommit(false)</code>可以取消自动提交事务</li>
<li>在所有的SQL语句都成功执行后，调用<code>Connection</code>的<code>commit()</code>，方法提交事务</li>
<li>在其中某个操作失败后，调用<code>Connection</code>的<code>rollback()</code>，方法回滚事务</li>
</ol>
<h1 id="9-数据库连接池"><a href="#9-数据库连接池" class="headerlink" title="9. 数据库连接池"></a>9. 数据库连接池</h1><ol>
<li><p>传统的JDBC数据库连接使用 DriverManager来获取，每次向数据库建立连接的时候都要将 Connection加载到内存中，再验证IP地址，用户名和密码(0.05s ~1s时间)。需要数据库连接的时候，就向数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃。</p>
</li>
<li><p>每一次数据库连接，使用完后都得断开,如果程序出现异常而未能关闭，将导致数据库内存泄漏，最终将导致重启数据库。</p>
</li>
<li><p>传统获取连接的方式,不能控制创建的连接数量，如连接过多，也可能导致内存泄漏，MySQL崩溃。</p>
</li>
<li><p>解决传统开发中的数据库连接问题，可以采用数据库连接池技术(connection pool)。</p>
</li>
</ol>
<h2 id="9-1-C3P0连接池"><a href="#9-1-C3P0连接池" class="headerlink" title="9.1 C3P0连接池"></a>9.1 C3P0连接池</h2><p>使用<code>jdbc.properties</code>和<code>c3p0-config.xml</code>测试连接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源名称代表连接池 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mybatis&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动类 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- url--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/mybatis<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 每次增长的连接数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始的连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 可连接的最多的命令对象数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 每个连接对象可连接的最多的命令对象数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> C3P0_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> C3P0连接池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/17 20:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testC3P0_01();</span><br><span class="line">        testC3P0_02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource comboPooledDataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">// 通过配置文件获取相关连接信息</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//读取相关的属性值</span></span><br><span class="line">        String user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给数据源 comboPooledDataSource 设置相关的参数</span></span><br><span class="line">        comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">        comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">        comboPooledDataSource.setUser(user);</span><br><span class="line">        comboPooledDataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始化连接数</span></span><br><span class="line">        comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大连接数</span></span><br><span class="line">        comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//测试连接池的效率, 测试对 mysql 5000 次操作</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            Connection connection = comboPooledDataSource.getConnection();</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接 OK&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//c3p0 5000 连接 mysql 耗时=391</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 5000 连接 mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource comboPooledDataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;mybatis&quot;</span>);</span><br><span class="line">        <span class="comment">//测试 5000 次连接 mysql</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            Connection connection = comboPooledDataSource.getConnection();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 的第二种方式(500000) 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-2-Druid德鲁伊连接池"><a href="#9-2-Druid德鲁伊连接池" class="headerlink" title="9.2 Druid德鲁伊连接池"></a>9.2 Druid德鲁伊连接池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Druid_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Druid连接池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/17 20:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Druid_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testDruid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        PreparedStatement prepareStatement = connection.prepareStatement(sql);</span><br><span class="line">        ResultSet resultSet = prepareStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            Object id = resultSet.getObject(<span class="number">1</span>);</span><br><span class="line">            Object username = resultSet.getObject(<span class="number">2</span>);</span><br><span class="line">            Object password = resultSet.getObject(<span class="number">3</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + username + <span class="string">&quot;:&quot;</span> + password);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        dataSource.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>写在最后</strong></p>
<ul>
<li>熟练运用JDBC和Mysql数据库对以后进阶打好基础:muscle:</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2021/01/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><p>写在前面：安装和数据库连接在此就不赘述，详情参考其他博客！</p>
<p><strong>学习参考:<a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL 教程 | 菜鸟教程 (runoob.com)</a></strong></p>
<h1 id="1-SQL语句基础语法"><a href="#1-SQL语句基础语法" class="headerlink" title="1. SQL语句基础语法"></a>1. SQL语句基础语法</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名; #创建数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> database <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>; #删除数据库</span><br><span class="line"></span><br><span class="line">use 数据库名; #选择数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables; #查看当前库的所有表</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(   #创建表</span><br><span class="line"></span><br><span class="line">	列名 列类型,</span><br><span class="line">	列名 列类型，</span><br><span class="line">	。。。</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> 表名; #查看表结构</span><br><span class="line"></span><br><span class="line">mysql <span class="comment">--version; #查看服务器的版本</span></span><br></pre></td></tr></table></figure>



<h1 id="2-SQL语句语法规范"><a href="#2-SQL语句语法规范" class="headerlink" title="2. SQL语句语法规范"></a>2. SQL语句语法规范</h1><p>​    1.不区分大小写,但建议关键字大写，表名、列名小写<br>​    2.每条命令最好用分号结尾<br>​    3.每条命令根据需要，可以进行缩进 或换行<br>​    4.注释<br>​        单行注释：#注释文字<br>​        单行注释：– 注释文字<br>​        多行注释：/* 注释文字  */</p>
<h3 id="2-1-SQL语句的分类"><a href="#2-1-SQL语句的分类" class="headerlink" title="2.1 SQL语句的分类"></a>2.1 SQL语句的分类</h3><ul>
<li><p>DQL（Data Query Language）：数据查询语言</p>
<pre><code>    select 
</code></pre>
</li>
<li><p>DML(Data Manipulate Language):数据操作语言</p>
<pre><code>    insert 、update、delete
</code></pre>
</li>
<li><p>DDL（Data Define Languge）：数据定义语言</p>
<pre><code>    create、drop、alter
</code></pre>
</li>
<li><p>TCL（Transaction Control Language）：事务控制语言</p>
<pre><code>    commit、rollback
</code></pre>
</li>
</ul>
<h3 id="2-2-插入语句"><a href="#2-2-插入语句" class="headerlink" title="2.2 插入语句"></a>2.2 插入语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span>( value1, value2,...valueN ); #插入数据</span><br></pre></td></tr></table></figure>

<h3 id="2-3-查询语句"><a href="#2-3-查询语句" class="headerlink" title="2.3 查询语句"></a>2.3 查询语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[LIMIT N][ <span class="keyword">OFFSET</span> M]        # 查询数据通用的 <span class="keyword">SELECT</span> 语法</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li>
<li>SELECT 命令可以读取一条或者多条记录。</li>
<li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>你可以使用 WHERE 语句来包含任何条件。</li>
<li>你可以使用 LIMIT 属性来设定返回的记录数。</li>
<li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li>
</ul>
<h4 id="2-3-1-WHERE-子句"><a href="#2-3-1-WHERE-子句" class="headerlink" title="2.3.1 WHERE 子句"></a>2.3.1 WHERE 子句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据</li>
</ul>
<h4 id="2-3-2-LIKE子句"><a href="#2-3-2-LIKE子句" class="headerlink" title="2.3.2 LIKE子句"></a>2.3.2 LIKE子句</h4><p>SQL LIKE 子句中使用百分号 **%**字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****。</p>
<p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>=</strong> 的效果是一样的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 <span class="operator">=</span> <span class="string">&#x27;somevalue&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以在 WHERE 子句中指定任何条件。</li>
<li>可以在 WHERE 子句中使用LIKE子句。</li>
<li>可以使用LIKE子句代替等号 **=**。</li>
<li>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索。</li>
<li>可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li>
</ul>
<blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;%a&#x27;     <span class="comment">//以a结尾的数据</span></span><br><span class="line">&#x27;a%&#x27;     <span class="comment">//以a开头的数据</span></span><br><span class="line">&#x27;%a%&#x27;    <span class="comment">//含有a的数据</span></span><br><span class="line">&#x27;_a_&#x27;    <span class="comment">//三位且中间字母是a的</span></span><br><span class="line">&#x27;_a&#x27;     <span class="comment">//两位且结尾字母是a的</span></span><br><span class="line">&#x27;a_&#x27;     <span class="comment">//两位且开头字母是a的</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>举例</strong></p>
<ul>
<li>查询以 java 字段开头的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> position <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;java%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询包含 java 字段的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> position <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%java%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询以 java 字段结尾的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> position <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%java&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-更新语句"><a href="#2-4-更新语句" class="headerlink" title="2.4 更新语句"></a>2.4 更新语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>同时更新一个或多个字段。</li>
<li>在 WHERE 子句中指定任何条件。</li>
<li>在一个单独表中同时更新数据。</li>
</ul>
<h3 id="2-5-删除语句"><a href="#2-5-删除语句" class="headerlink" title="2.5 删除语句"></a>2.5 删除语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li>
<li>可以在 WHERE 子句中指定任何条件</li>
<li>可以在单个表中一次性删除记录。</li>
</ul>
<h3 id="2-6-排序语句"><a href="#2-6-排序语句" class="headerlink" title="2.6 排序语句"></a>2.6 排序语句</h3><p>SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1 [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]], [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]]</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>可以设定多个字段来排序。</li>
<li>可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>
<li>可以添加 WHERE…LIKE 子句来设置条件。</li>
</ul>
<h3 id="2-7-分组语句"><a href="#2-7-分组语句" class="headerlink" title="2.7 分组语句"></a>2.7 分组语句</h3><p>GROUP BY 语句根据一个或多个列对结果集进行分组</p>
<p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name operator <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br></pre></td></tr></table></figure>



<h1 id="3-MySQL连接的使用"><a href="#3-MySQL连接的使用" class="headerlink" title="3. MySQL连接的使用"></a>3. MySQL连接的使用</h1><p>SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询</p>
<p>JOIN 按照功能大致分为如下三类：</p>
<ul>
<li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li>
<li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段，...</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">【<span class="keyword">inner</span><span class="operator">|</span><span class="keyword">left</span> <span class="keyword">outer</span><span class="operator">|</span><span class="keyword">right</span> <span class="keyword">outer</span><span class="operator">|</span><span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">inner</span><span class="operator">|</span><span class="keyword">left</span> <span class="keyword">outer</span><span class="operator">|</span><span class="keyword">right</span> <span class="keyword">outer</span><span class="operator">|</span><span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">3</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 分组后的筛选条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式】</span><br></pre></td></tr></table></figure>



<h1 id="4-MySQLNULL值处理"><a href="#4-MySQLNULL值处理" class="headerlink" title="4. MySQLNULL值处理"></a>4. MySQLNULL值处理</h1><p>MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作</p>
<p>MySQL提供了三大运算符:</p>
<ul>
<li><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true</li>
<li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true</li>
<li><strong>&lt;=&gt;:</strong> 比较操作符（不同于 = 运算符），当比较的的两个值相等或者都为 NULL 时返回 true</li>
</ul>
<p><strong>注意：在语句中 = 和 != 运算符是不起作用的，必须使用  IS NULL 和 IS NOT NULL</strong></p>
<h1 id="5-查询进阶"><a href="#5-查询进阶" class="headerlink" title="5.查询进阶"></a>5.查询进阶</h1><h2 id="5-1-子查询"><a href="#5-1-子查询" class="headerlink" title="5.1 子查询"></a>5.1 子查询</h2><p>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<br>在外面的查询语句，称为主查询或外查询</p>
<p>特点</p>
<ul>
<li>1、子查询都放在小括号内</li>
<li>2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧</li>
<li>3、子查询优先于主查询执行，主查询使用了子查询的执行结果</li>
<li>4、子查询根据查询结果的行数不同分为以下两类：</li>
<li>① 单行子查询<pre><code>结果集只有一行
一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;= 
非法使用子查询的情况：
a、子查询的结果为一组值
b、子查询的结果为空
</code></pre>
</li>
<li>② 多行子查询<pre><code>结果集有多行
一般搭配多行操作符使用：any、all、in、not in
in： 属于子查询结果中的任意一个就行
any和all往往可以用其他查询代替
</code></pre>
</li>
</ul>
<h2 id="5-2-分页查询"><a href="#5-2-分页查询" class="headerlink" title="5.2 分页查询"></a>5.2 分页查询</h2><p>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="operator">|</span>表达式,...</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br><span class="line">limit 【起始的条目索引，】条目数;</span><br></pre></td></tr></table></figure>

<p>特点</p>
<ul>
<li>1.起始条目索引从0开始</li>
<li>2.limit子句放在查询语句的最后</li>
<li>3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage</li>
</ul>
<blockquote>
<p>假如:<br>每页显示条目数sizePerPage<br>要显示的页数 page</p>
</blockquote>
<h2 id="5-3-联合查询"><a href="#5-3-联合查询" class="headerlink" title="5.3 联合查询"></a>5.3 联合查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="operator">|</span>常量<span class="operator">|</span>表达式<span class="operator">|</span>函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 <span class="keyword">union</span> 【<span class="keyword">all</span>】</span><br><span class="line"><span class="keyword">select</span> 字段<span class="operator">|</span>常量<span class="operator">|</span>表达式<span class="operator">|</span>函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 <span class="keyword">union</span> 【<span class="keyword">all</span>】</span><br><span class="line"><span class="keyword">select</span> 字段<span class="operator">|</span>常量<span class="operator">|</span>表达式<span class="operator">|</span>函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 <span class="keyword">union</span>  【<span class="keyword">all</span>】</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">select</span> 字段<span class="operator">|</span>常量<span class="operator">|</span>表达式<span class="operator">|</span>函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】</span><br></pre></td></tr></table></figure>

<p>特点</p>
<ul>
<li>1、多条查询语句的查询的列数必须是一致的</li>
<li>2、多条查询语句的查询的列的类型几乎相同</li>
<li>3、union代表去重，union all代表不去重</li>
</ul>
<h1 id="6-MySQL-正则表达式"><a href="#6-MySQL-正则表达式" class="headerlink" title="6. MySQL 正则表达式"></a>6. MySQL 正则表达式</h1><table>
<thead>
<tr>
<th>模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td align="left">匹配输入字符串的开始位置</td>
</tr>
<tr>
<td>$</td>
<td align="left">匹配输入字符串的结束位置</td>
</tr>
<tr>
<td>.</td>
<td align="left">匹配除 “\n” 之外的任何单个字符</td>
</tr>
<tr>
<td>[…]</td>
<td align="left">字符集合。匹配所包含的任意一个字符</td>
</tr>
<tr>
<td>[^…]</td>
<td align="left">负值字符集合。匹配未包含的任意字符</td>
</tr>
<tr>
<td>p1|p2|p3</td>
<td align="left">匹配 p1 或 p2 或 p3</td>
</tr>
<tr>
<td>*</td>
<td align="left">匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td>+</td>
<td align="left">匹配前面的子表达式一次或多次</td>
</tr>
<tr>
<td>{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 n 次</td>
</tr>
<tr>
<td>{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中n &lt;= m，最少匹配 n 次且最多匹配 m 次。</td>
</tr>
</tbody></table>
<p> 举几个例子</p>
<ul>
<li>查找name字段中以’st’为开头的所有数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^st&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中以’ok’为结尾的所有数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;ok$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中包含’mar’字符串的所有数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;mar&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h1 id="7-MySQL事务"><a href="#7-MySQL事务" class="headerlink" title="7. MySQL事务"></a>7. MySQL事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）</p>
<ul>
<li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>
<li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<h2 id="7-1-事务控制语句："><a href="#7-1-事务控制语句：" class="headerlink" title="7.1 事务控制语句："></a>7.1 事务控制语句：</h2><ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h2 id="7-2-MYSQL-事务处理主要有两种方法："><a href="#7-2-MYSQL-事务处理主要有两种方法：" class="headerlink" title="7.2 MYSQL 事务处理主要有两种方法："></a>7.2 MYSQL 事务处理主要有两种方法：</h2><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>
</ul>
<h2 id="7-3-事务的隔离级别"><a href="#7-3-事务的隔离级别" class="headerlink" title="7.3 事务的隔离级别"></a>7.3 事务的隔离级别</h2><p>事务并发问题如何发生？</p>
<ul>
<li>当多个事务同时操作同一个数据库的相同数据时</li>
</ul>
<p>事务的并发问题有哪些？</p>
<ul>
<li>脏读：一个事务读取到了另外一个事务未提交的数据<br>不可重复读：同一个事务中，多次读取到的数据不一致</li>
<li>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</li>
</ul>
<p>如何避免事务的并发问题？</p>
<blockquote>
<p>通过设置事务的隔离级别<br>1、READ UNCOMMITTED<br>2、READ COMMITTED 可以避免脏读<br>3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读<br>4、SERIALIZABLE可以避免脏读、不可重复读和幻读</p>
</blockquote>
<ul>
<li>设置隔离级别：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session<span class="operator">|</span><span class="keyword">global</span>  transaction isolation level 隔离级别名;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看隔离级别:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure>



<h1 id="8-MySQL索引"><a href="#8-MySQL索引" class="headerlink" title="8. MySQL索引"></a>8. MySQL索引</h1><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p>
<p>索引分单列索引和组合索引。</p>
<ul>
<li><p>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</p>
</li>
<li><p>组合索引，即一个索引包含多个列。</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p>
</li>
<li><p>建立索引会占用磁盘空间的索引文件。</p>
</li>
</ul>
<h2 id="8-1-普通索引"><a href="#8-1-普通索引" class="headerlink" title="8.1 普通索引"></a>8.1 普通索引</h2><p><strong>创建索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure>

<p><strong>修改表结构(添加索引)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> INDEX indexName(columnName)</span><br></pre></td></tr></table></figure>

<p><strong>创建表的时候直接指定</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line">ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line"> </span><br><span class="line">INDEX [indexName] (username(length))  </span><br><span class="line"> </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<p><strong>删除索引的语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX [indexName] <span class="keyword">ON</span> mytable; </span><br></pre></td></tr></table></figure>

<h2 id="8-2-唯一索引"><a href="#8-2-唯一索引" class="headerlink" title="8.2 唯一索引"></a>8.2 唯一索引</h2><p>索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p>
<p><strong>创建索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> mytable(username(length)) </span><br></pre></td></tr></table></figure>

<p><strong>修改表结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (username(length))</span><br></pre></td></tr></table></figure>

<p><strong>创建表的时候直接指定</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line">ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">UNIQUE</span> [indexName] (username(length))  </span><br><span class="line"> </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>



<h1 id="9-MySQL处理重复数据"><a href="#9-MySQL处理重复数据" class="headerlink" title="9. MySQL处理重复数据"></a>9. MySQL处理重复数据</h1><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p>
<p><strong>防止表中出现重复数据</strong></p>
<p>你可以在 MySQL 数据表中设置指定的字段为 <strong>PRIMARY KEY（主键）</strong> 或者 <strong>UNIQUE（唯一）</strong> 索引来保证数据的唯一性。</p>
<p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">    first_name <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    last_name <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>如果你想设置表中字段 first_name，last_name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   last_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   sex <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p>
<p>INSERT IGNORE INTO 与 INSERT INTO 的区别就是 INSERT IGNORE INTO 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p>
<p>以下实例使用了 INSERT IGNORE INTO，执行后不会出错，也不会向数据表中插入重复数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> person_tbl (last_name, first_name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>( <span class="string">&#x27;Jay&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> person_tbl (last_name, first_name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>( <span class="string">&#x27;Jay&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p>
<p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   last_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   sex <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">UNIQUE</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>统计重复数据</strong></p>
<p>以下我们将统计表中 first_name 和 last_name的重复记录数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> repetitions, last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> repetitions <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p>
<ul>
<li>确定哪一列包含的值可能会重复。</li>
<li>在列选择列表使用COUNT(*)列出的那些列。</li>
<li>在GROUP BY子句中列出的列。</li>
<li>HAVING子句设置重复数大于1。</li>
</ul>
<p><strong>过滤重复数据</strong></p>
<p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl;</span><br></pre></td></tr></table></figure>

<p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> (last_name, first_name);</span><br></pre></td></tr></table></figure>

<p><strong>删除重复数据</strong></p>
<p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp <span class="keyword">SELECT</span> last_name, first_name, sex <span class="keyword">FROM</span> person_tbl  <span class="keyword">GROUP</span> <span class="keyword">BY</span> (last_name, first_name, sex);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> person_tbl;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tmp RENAME <span class="keyword">TO</span> person_tbl;</span><br></pre></td></tr></table></figure>

<p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> IGNORE <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (last_name, first_name);</span><br></pre></td></tr></table></figure>



<h1 id="10-MySQL-导出数据"><a href="#10-MySQL-导出数据" class="headerlink" title="10.MySQL 导出数据"></a>10.MySQL 导出数据</h1><p>MySQL中你可以使用<strong>SELECT…INTO OUTFILE</strong>语句来简单的导出数据到文本文件上。</p>
<p><strong>使用 SELECT … INTO OUTFILE 语句导出数据</strong></p>
<p>将数据表 runoob_tbl 数据导出到 /tmp/runoob.txt 文件中:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> runoob_tbl </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/runoob.txt&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>你可以通过命令选项来设置数据输出的指定格式，以下实例为导出 CSV 格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> passwd <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/runoob.txt&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SELECT … INTO OUTFILE 语句有以下属性:</strong></p>
<ul>
<li>LOAD DATA INFILE是SELECT … INTO OUTFILE的逆操作，SELECT句法。为了将一个数据库的数据写入一个文件，使用SELECT … INTO OUTFILE，为了将文件读回数据库，使用LOAD DATA INFILE。</li>
<li>SELECT…INTO OUTFILE ‘file_name’形式的SELECT可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。</li>
<li>输出不能是一个已存在的文件。防止文件数据被篡改。</li>
<li>你需要有一个登陆服务器的账号来检索文件。否则 SELECT … INTO OUTFILE 不会起任何作用。</li>
<li>在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li>
</ul>
<p><strong>导出表作为原始数据</strong></p>
<p><strong>mysqldump</strong> 是 mysql 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 CREATE TABLE INSERT 等。</p>
<p><strong>导出 SQL 格式的数据</strong></p>
<p>导出 SQL 格式的数据到指定文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p RUNOOB runoob_tbl <span class="operator">&gt;</span> dump.txt</span><br><span class="line">password <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure>

<p><strong>需要导出整个数据库的数据，可以使用以下命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p RUNOOB <span class="operator">&gt;</span> database_dump.txt</span><br><span class="line">password <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure>

<p><strong>需要备份所有数据库，可以使用以下命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p <span class="comment">--all-databases &gt; database_dump.txt</span></span><br><span class="line">password <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure>



<h1 id="11-MySQL导入数据"><a href="#11-MySQL导入数据" class="headerlink" title="11. MySQL导入数据"></a>11. MySQL导入数据</h1><p><strong>1、mysql 命令导入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u用户名    <span class="operator">-</span>p密码    <span class="operator">&lt;</span>  要导入的数据库数据(xxxx.sql)</span><br><span class="line"></span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">&lt;</span> xxxx.sql</span><br></pre></td></tr></table></figure>

<p><strong>2、source 命令导入</strong></p>
<p>source 命令导入数据库需要先登录到数库终端：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database xxx;      # 创建数据库</span><br><span class="line">mysql<span class="operator">&gt;</span> use xxx;                  # 使用已创建的数据库 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> names utf8;           # 设置编码</span><br><span class="line">mysql<span class="operator">&gt;</span> source <span class="operator">/</span>xxx<span class="operator">/</span>xxx<span class="operator">/</span>xxx.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure>



<h1 id="12-MySQL函数"><a href="#12-MySQL函数" class="headerlink" title="12.MySQL函数"></a>12.MySQL函数</h1><p>需要用到来参考</p>
<p><strong>参考地址：<a href="https://www.runoob.com/mysql/mysql-functions.html">MySQL 函数 | 菜鸟教程 (runoob.com)</a></strong></p>
<h1 id="13-MySQL运算符"><a href="#13-MySQL运算符" class="headerlink" title="13. MySQL运算符"></a>13. MySQL运算符</h1><p><strong>参考地址：<a href="https://www.runoob.com/mysql/mysql-operator.html">MySQL 运算符 | 菜鸟教程 (runoob.com)</a></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射学习笔记</title>
    <url>/2021/01/15/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java反射学习笔记"><a href="#Java反射学习笔记" class="headerlink" title="Java反射学习笔记"></a>Java反射学习笔记</h1><p>写在前面</p>
<ul>
<li>感谢韩老师的视频讲解！</li>
<li>学习地址：<a href="https://www.bilibili.com/video/BV1g84y1F7df">【韩顺平讲Java】Java反射专题 </a></li>
</ul>
<h1 id="1-反射机制"><a href="#1-反射机制" class="headerlink" title="1. 反射机制"></a>1. 反射机制</h1><ul>
<li>反射机制允许程序在执行期借助于<code>ReflectionAPI</code>取得任何类的内部信息，(比如成员变量，构造器，成员方法等)，并能操作对象的属性及方法，在设计模式和框架都会用到</li>
<li>加载完类后，在堆中就产生了一个<code>Class</code>类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息，通过对这个对象得到这类的结构，这个<code>Class</code>对象就像一面镜子，透过这个镜子看到类的结构，形象的称之为反射</li>
</ul>
<h2 id="1-1-反射机制原理示意图"><a href="#1-1-反射机制原理示意图" class="headerlink" title="1.1 反射机制原理示意图"></a>1.1 反射机制原理示意图</h2><p><a href="https://imgtu.com/i/2R8eL8"><img src="https://z3.ax1x.com/2021/06/10/2R8eL8.png" alt="2R8eL8.png"></a></p>
<h2 id="1-2-Java-反射机制可以完成"><a href="#1-2-Java-反射机制可以完成" class="headerlink" title="1.2 Java 反射机制可以完成"></a>1.2 Java 反射机制可以完成</h2><ol>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行构造时任意一个类的对象</li>
<li>在运行时得到任意一个类所具有的成员变量和方法</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>生成动态代理</li>
</ol>
<h2 id="1-3-反射相关的主要类"><a href="#1-3-反射相关的主要类" class="headerlink" title="1.3 反射相关的主要类"></a>1.3 反射相关的主要类</h2><p><a href="https://imgtu.com/i/2R8sQx"><img src="https://z3.ax1x.com/2021/06/10/2R8sQx.png" alt="2R8sQx.png"></a></p>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Reflection01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 反射类01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 19:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//使用Properties类 ，读写配置文件</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;f:\\re.properties&quot;</span>));</span><br><span class="line">        String classfullPath=properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();</span><br><span class="line">        String methodName=properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">        System.out.println(classfullPath);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制解决</span></span><br><span class="line">        <span class="comment">//加载类，返回Class类型对象</span></span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;com.zhuang.reflection.Cat&quot;</span>);</span><br><span class="line">        <span class="comment">//通过cls的到加载类的对象实例</span></span><br><span class="line">        Object o = cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;o的运行类型=&quot;</span>+o.getClass());</span><br><span class="line">        <span class="comment">//通过cls的加载的类 的方法</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法是&quot;</span>+method);</span><br><span class="line">        <span class="comment">//通过method调用方法，通过方法对象来实现调用方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        传统方法 对象.方法()</span></span><br><span class="line"><span class="comment">        反射机制 方法.invoke(对象)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        method.invoke(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Field: 代表类的成员变量, Field 对象表示某个类的成员变量</span></span><br><span class="line">        <span class="comment">//得到 name 字段</span></span><br><span class="line">        <span class="comment">//getField 不能得到私有的属性</span></span><br><span class="line">        Field nameField = cls.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="comment">// 传统写法 对象.成员变量 , 反射 : 成员变量对象.get(对象)</span></span><br><span class="line">        System.out.println(nameField.get(o));</span><br><span class="line">    <span class="comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor 对象表示构造器</span></span><br><span class="line">        <span class="comment">//()中可以指定构造器参数类型, 返回无参构造器</span></span><br><span class="line">        Constructor constructor = cls.getConstructor();</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2RJqiQ"><img src="https://z3.ax1x.com/2021/06/10/2RJqiQ.png" alt="2RJqiQ.png"></a></p>
<h2 id="1-4-反射优点和缺点"><a href="#1-4-反射优点和缺点" class="headerlink" title="1.4 反射优点和缺点"></a>1.4 反射优点和缺点</h2><p>优点：</p>
<ul>
<li>可以动态地创建和使用对象，灵活</li>
</ul>
<p>缺点</p>
<ul>
<li><p>使用反射基本是解释执行，对执行速度有影响</p>
</li>
<li><p><strong>优化可以使用下列方法</strong></p>
</li>
</ul>
<p><a href="https://imgtu.com/i/2RYAzR"><img src="https://z3.ax1x.com/2021/06/10/2RYAzR.png" alt="2RYAzR.png"></a></p>
<h1 id="2-Class类"><a href="#2-Class类" class="headerlink" title="2. Class类"></a>2. Class类</h1><p>基本介绍</p>
<p><a href="https://imgtu.com/i/2RYeL6"><img src="https://z3.ax1x.com/2021/06/10/2RYeL6.png" alt="2RYeL6.png"></a></p>
<ol>
<li><code>Class</code>也是类，继承自<code>Object</code>类</li>
<li><code>Class</code>类对象不是new出来的，而是系统创建的</li>
<li>对于某个类的<code>Class</code>类对象，在内存中只有一份</li>
<li>每个类的示例都会记得自己是由哪个<code>Class</code>实例所生成</li>
<li>通过<code>Class</code>对象完整的一个类的完整结构，通过一系列API</li>
<li><code>Class</code>对象是存放在堆里的</li>
<li>类的字节码二进制数据，是在方法区的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ClassLoader 类, 仍然是通过 ClassLoader 类加载 Cat 类的 Class 对象</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">	<span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Class01</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Class01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 20:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//某个类的对象Class ，在内存中只有一份，类只加载一次</span></span><br><span class="line">        Class&lt;?&gt; cls1 = Class.forName(<span class="string">&quot;com.zhuang.reflection.Cat&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; cls2 = Class.forName(<span class="string">&quot;com.zhuang.reflection.Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cls1.hashCode());</span><br><span class="line">        System.out.println(cls2.hashCode());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        22307196</span></span><br><span class="line"><span class="comment">		22307196</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-Class类常用方法"><a href="#2-1-Class类常用方法" class="headerlink" title="2.1 Class类常用方法"></a>2.1 Class类常用方法</h2><p><a href="https://imgtu.com/i/2RtH3j"><img src="https://z3.ax1x.com/2021/06/10/2RtH3j.png" alt="2RtH3j.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Class02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示Class类的常用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 20:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String classAllPath = <span class="string">&quot;com.zhuang.reflection.Car&quot;</span>;</span><br><span class="line">        <span class="comment">//1 . 获取到 Car 类 对应的 Class 对象</span></span><br><span class="line">        <span class="comment">//&lt;?&gt; 表示不确定的 Java 类型</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 输出 cls</span></span><br><span class="line">        <span class="comment">//显示 cls 对象, 是哪个类的 Class 对象 com.hspedu.Car</span></span><br><span class="line">        System.out.println(cls);</span><br><span class="line">        <span class="comment">//输出 cls 运行类型 java.lang.Class</span></span><br><span class="line">        System.out.println(cls.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到包名</span></span><br><span class="line">        System.out.println(cls.getPackage().getName());</span><br><span class="line">        <span class="comment">//4. 得到全类名</span></span><br><span class="line">        System.out.println(cls.getName());</span><br><span class="line">        <span class="comment">//5. 通过 cls 创建对象实例</span></span><br><span class="line">        Car car = (Car) cls.newInstance();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">        <span class="comment">//6. 通过反射获取属性 brand</span></span><br><span class="line">        Field brand = cls.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));</span><br><span class="line">        <span class="comment">//7. 通过反射给属性赋值</span></span><br><span class="line">        brand.set(car, <span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));</span><br><span class="line">        <span class="comment">//8 我希望大家可以得到所有的属性(字段)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======所有的字段属性====&quot;</span>);</span><br><span class="line">        Field[] fields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2RNXzd"><img src="https://z3.ax1x.com/2021/06/10/2RNXzd.png" alt="2RNXzd.png"></a></p>
<h2 id="2-2-获取Class类对象"><a href="#2-2-获取Class类对象" class="headerlink" title="2.2 获取Class类对象"></a>2.2 获取Class类对象</h2><ol>
<li>前提：已知一个类的全类名，且该类在类路径下，可通过<code>Class</code>类的静态方法<code>forName()</code>获取，</li>
<li>前提：若已知具体的类，通过类的<code>class</code>，程序性能最高</li>
<li>前提：已知某个类的实例，调用该实例的<code>getClass()</code>方法获取<code>Class</code>对象</li>
<li>基本数据类型， 按照 <code>Class cls=基本数据类型.class</code>方法</li>
<li>基本数据类型的包装类，可以通过<code>.TYPE</code>得到<code>Class</code>对象 <code>Class cls=包装类.TYPE</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> GetClass_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示得到 Class 对象的各种方式(6)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 20:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClass_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. Class.forName</span></span><br><span class="line">        String classAllPath = <span class="string">&quot;com.zhuang.reflection.Car&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; cls1 = Class.forName(classAllPath);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">//2. 类名.class , 应用场景: 用于参数传递</span></span><br><span class="line">        Class cls2 = Car.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">//3. 对象.getClass(), 应用场景，有对象实例</span></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        Class cls3 = car.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line">        <span class="comment">//4. 通过类加载器【4 种】来获取到类的 Class 对象</span></span><br><span class="line">        <span class="comment">//(1)先得到类加载器 car</span></span><br><span class="line">        ClassLoader classLoader = car.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//(2)通过类加载器得到 Class 对象</span></span><br><span class="line">        Class cls4 = classLoader.loadClass(classAllPath);</span><br><span class="line">        System.out.println(cls4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 基本数据(int, char,boolean,float,double,byte,long,short) 按如下方式得到 Class 类对象</span></span><br><span class="line">        Class&lt;Integer&gt; integerClass = <span class="keyword">int</span>.class;</span><br><span class="line">        Class&lt;Character&gt; characterClass = <span class="keyword">char</span>.class;</span><br><span class="line">        Class&lt;Boolean&gt; booleanClass = <span class="keyword">boolean</span>.class;</span><br><span class="line">        System.out.println(integerClass);</span><br><span class="line">        System.out.println(characterClass);</span><br><span class="line">        System.out.println(booleanClass);</span><br><span class="line">        <span class="comment">//6. 基本数据类型对应的包装类，可以通过 .TYPE 得到 Class 类对象</span></span><br><span class="line">        Class&lt;Integer&gt; type1 = Integer.TYPE;</span><br><span class="line">        Class&lt;Character&gt; type2 = Character.TYPE;</span><br><span class="line">        System.out.println(type1);</span><br><span class="line">        System.out.println(integerClass.hashCode());</span><br><span class="line">        System.out.println(type1.hashCode());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2Ra8N8"><img src="https://z3.ax1x.com/2021/06/10/2Ra8N8.png" alt="2Ra8N8.png"></a></p>
<h2 id="2-3-哪些类型有-Class-对象"><a href="#2-3-哪些类型有-Class-对象" class="headerlink" title="2.3 哪些类型有 Class 对象"></a>2.3 哪些类型有 Class 对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> AllTypeClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示哪些类型有 Class 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 21:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllTypeClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//外部类</span></span><br><span class="line">        Class&lt;String&gt; cls1 = String.class;</span><br><span class="line">        <span class="comment">//接口</span></span><br><span class="line">        Class&lt;Serializable&gt; cls2 = Serializable.class;</span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        Class&lt;Integer[]&gt; cls3 = Integer[].class;</span><br><span class="line">        <span class="comment">//二维数组</span></span><br><span class="line">        Class&lt;<span class="keyword">float</span>[][]&gt; cls4 = <span class="keyword">float</span>[][].class;</span><br><span class="line">        <span class="comment">//注解</span></span><br><span class="line">        Class&lt;Deprecated&gt; cls5 = Deprecated.class;</span><br><span class="line">        <span class="comment">//枚举</span></span><br><span class="line">        Class&lt;Thread.State&gt; cls6 = Thread.State.class;</span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        Class&lt;Long&gt; cls7 = <span class="keyword">long</span>.class;</span><br><span class="line">        <span class="comment">//void 数据类型</span></span><br><span class="line">        Class&lt;Void&gt; cls8 = <span class="keyword">void</span>.class;</span><br><span class="line">        Class&lt;Class&gt; cls9 = Class.class;</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line">        System.out.println(cls4);</span><br><span class="line">        System.out.println(cls5);</span><br><span class="line">        System.out.println(cls6);</span><br><span class="line">        System.out.println(cls7);</span><br><span class="line">        System.out.println(cls8);</span><br><span class="line">        System.out.println(cls9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2R0t3D"><img src="https://z3.ax1x.com/2021/06/10/2R0t3D.png" alt="2R0t3D.png"></a></p>
<h1 id="3-类加载"><a href="#3-类加载" class="headerlink" title="3. 类加载"></a>3. 类加载</h1><ul>
<li>反射机制是java实现冬天语言的关键，也就是通过反射实现类动态加载</li>
<li>静态加载：编译时加载相关的类，如果没有报错，<strong>依赖性太强</strong></li>
<li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，<strong>降低了依赖性</strong></li>
</ul>
<h2 id="3-1-类加载时机"><a href="#3-1-类加载时机" class="headerlink" title="3.1 类加载时机"></a>3.1 类加载时机</h2><p><strong>静态加载</strong></p>
<ol>
<li>当创建对象时 <code>new </code></li>
<li>当子类被加载时，父类也加载</li>
<li>调用类中的静态车成员时</li>
</ol>
<p><strong>动态加载</strong></p>
<ol>
<li>通过反射</li>
</ol>
<h2 id="3-2-类加载过程图"><a href="#3-2-类加载过程图" class="headerlink" title="3.2 类加载过程图"></a>3.2 类加载过程图</h2><p><a href="https://imgtu.com/i/2RBixe"><img src="https://z3.ax1x.com/2021/06/10/2RBixe.png" alt="2RBixe.png"></a></p>
<h2 id="3-3-类加载各阶段完成任务"><a href="#3-3-类加载各阶段完成任务" class="headerlink" title="3.3 类加载各阶段完成任务"></a>3.3 类加载各阶段完成任务</h2><p><a href="https://imgtu.com/i/2RBKG8"><img src="https://z3.ax1x.com/2021/06/10/2RBKG8.png" alt="2RBKG8.png"></a></p>
<h2 id="3-4-加载阶段"><a href="#3-4-加载阶段" class="headerlink" title="3.4 加载阶段"></a>3.4 加载阶段</h2><p><a href="https://imgtu.com/i/2RB8qs"><img src="https://z3.ax1x.com/2021/06/10/2RB8qs.png" alt="2RB8qs.png"></a></p>
<h2 id="3-5-连接阶段-验证"><a href="#3-5-连接阶段-验证" class="headerlink" title="3.5 连接阶段-验证"></a>3.5 连接阶段-验证</h2><ol>
<li>目的是为了确保<code>Class</code>文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全</li>
<li>包括：文件格式验证，元数据验证，字节码验证，符号引用验证等</li>
</ol>
<h2 id="3-6-连接阶段-准备"><a href="#3-6-连接阶段-准备" class="headerlink" title="3.6 连接阶段-准备"></a>3.6 连接阶段-准备</h2><ul>
<li>JVM会在该阶段对静态变量，分配内存并默认初始化(对应数据类型的默认初始值)，这些变量所使用的内存都将在方法区进行分配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. n1 是实例属性, 不是静态变量，因此在准备阶段，是不会分配内存</span></span><br><span class="line"><span class="comment">//2. n2 是静态变量，分配内存 n2 是默认初始化 0 ,而不是 20</span></span><br><span class="line"><span class="comment">//3. n3 是 static final 是常量, 他和静态变量不一样, 因为一旦赋值就不变 n3 = 30</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> n3 = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>



<h2 id="3-7-Initialization（初始化"><a href="#3-7-Initialization（初始化" class="headerlink" title="3.7 Initialization（初始化)"></a>3.7 Initialization（初始化)</h2><ol>
<li>到初始化阶段，真正开始执行类中的定义Java程序代码，此阶段执行<clinit>方法的过程</li>
<li><clinit>方法是由编译器按语句在源文件中出现的顺序，<strong>依次自动收集类中的所有的静态变量赋值动作和静态代码块的语句，并进行合并</strong></li>
<li>虚拟机会保证一个类的<clinit>方法在多线程环境中正确地加锁，同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>方法，其他线程都需要阻塞等待，知道活动线程执行<clinit>方法完毕</li>
</ol>
<h1 id="4-通过反射获取类的结构信息"><a href="#4-通过反射获取类的结构信息" class="headerlink" title="4. 通过反射获取类的结构信息"></a>4. 通过反射获取类的结构信息</h1><h2 id="4-1-java-lang-Class-类"><a href="#4-1-java-lang-Class-类" class="headerlink" title="4.1 java.lang.Class 类"></a>4.1 java.lang.Class 类</h2><p><a href="https://imgtu.com/i/2RgBhn"><img src="https://z3.ax1x.com/2021/06/10/2RgBhn.png" alt="2RgBhn.png"></a></p>
<h2 id="4-2-java-lang-reflect-Field-类"><a href="#4-2-java-lang-reflect-Field-类" class="headerlink" title="4.2 java.lang.reflect.Field 类"></a>4.2 java.lang.reflect.Field 类</h2><p><a href="https://imgtu.com/i/2Rg0ts"><img src="https://z3.ax1x.com/2021/06/10/2Rg0ts.png" alt="2Rg0ts.png"></a></p>
<h2 id="4-3-java-lang-reflect-Method-类"><a href="#4-3-java-lang-reflect-Method-类" class="headerlink" title="4.3 java.lang.reflect.Method 类"></a>4.3 java.lang.reflect.Method 类</h2><p><a href="https://imgtu.com/i/2Rgwkj"><img src="https://z3.ax1x.com/2021/06/10/2Rgwkj.png" alt="2Rgwkj.png"></a></p>
<h2 id="4-4-java-lang-reflect-Constructor-类"><a href="#4-4-java-lang-reflect-Constructor-类" class="headerlink" title="4.4 java.lang.reflect.Constructor 类"></a>4.4 java.lang.reflect.Constructor 类</h2><p><a href="https://imgtu.com/i/2Rgs10"><img src="https://z3.ax1x.com/2021/06/10/2Rgs10.png" alt="2Rgs10.png"></a></p>
<h1 id="5-通过反射创建对象"><a href="#5-通过反射创建对象" class="headerlink" title="5. 通过反射创建对象"></a>5. 通过反射创建对象</h1><p><a href="https://imgtu.com/i/2W1iVg"><img src="https://z3.ax1x.com/2021/06/11/2W1iVg.png" alt="2W1iVg.png"></a></p>
<ul>
<li><p>测试 1：通过反射创建某类的对象，要求该类中必须有 public 的无参构造 </p>
</li>
<li><p>测试 2：通过调用某个特定构造器的方式，实现创建某类的对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ReflecCreateInstance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示通过反射机制创建实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/11 10:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflecCreateInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1. 先获取到 User 类的 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;com.zhuang.reflection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过 public 的无参构造器创建实例</span></span><br><span class="line">        Object o = userClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//3. 通过 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        constructor 对象就是</span></span><br><span class="line"><span class="comment">        public User(String name) &#123;//public 的有参构造器</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//3.1 先得到对应构造器</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//3.2 创建实例，并传入实参</span></span><br><span class="line">        Object zk = constructor.newInstance(<span class="string">&quot;zk&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zk=&quot;</span> + zk);</span><br><span class="line">        <span class="comment">//4. 通过非 public 的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">//4.1 得到 private 的构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="keyword">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//4.2 创建实例</span></span><br><span class="line">        <span class="comment">//暴破【暴力破解】 , 使用反射可以访问 private 构造器/方法/属性</span></span><br><span class="line">        constructor1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object user2 = constructor1.newInstance(<span class="number">100</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2=&quot;</span> + user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; <span class="comment">//User 类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;康小庄&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//public 的有参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2WGLOP"><img src="https://z3.ax1x.com/2021/06/11/2WGLOP.md.png" alt="2WGLOP.md.png"></a></p>
<h1 id="6-访问方法"><a href="#6-访问方法" class="headerlink" title="6. 访问方法"></a>6. 访问方法</h1><p><a href="https://imgtu.com/i/2WUEv9"><img src="https://z3.ax1x.com/2021/06/11/2WUEv9.png" alt="2WUEv9.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ReflecAccessMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示通过反射调用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/11 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflecAccessMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//得到Boss类对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; bossClass = Class.forName(<span class="string">&quot;com.zhuang.reflection.Boss&quot;</span>);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object o = bossClass.newInstance();</span><br><span class="line">        <span class="comment">//调用public 方法 得到方法对象</span></span><br><span class="line">        Method show = bossClass.getMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        show.invoke(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用private方法</span></span><br><span class="line">        Method say = bossClass.getDeclaredMethod(<span class="string">&quot;say&quot;</span>,<span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//say方法是private，需要设置权限</span></span><br><span class="line">        say.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        say.invoke(o,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">()</span> </span>&#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//public 的有参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Boss</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是老板哈哈哈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是老板嘿嘿嘿-&gt;&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-作业练习"><a href="#7-作业练习" class="headerlink" title="7. 作业练习"></a>7. 作业练习</h2><p><strong>HomeWork01</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HomeWork01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 作业1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/11 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeWork01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义Student类，有私有name属性，并且属性值为hellokitty</span></span><br><span class="line"><span class="comment">         * 提供getName的公有方法</span></span><br><span class="line"><span class="comment">         * 创建Student的类，利用Class类得到私有的name属性，修改私有的name属性值，并调用getName()的方法打印name属性值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1. 得到 Student类对应的Class对象</span></span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line">        <span class="comment">//创建对象实例</span></span><br><span class="line">        Student student = studentClass.newInstance();</span><br><span class="line">        <span class="comment">//得到name属性对象</span></span><br><span class="line">        Field name = studentClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置权限</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        name.set(student,<span class="string">&quot;康小庄&quot;</span>);</span><br><span class="line">        <span class="comment">//获得方法</span></span><br><span class="line">        Method getName = studentClass.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        Object invoke = getName.invoke(student);</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;hellokitty&quot;</span>;</span><br><span class="line">    <span class="comment">//默认无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HomeWork02</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.reflection.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HomeWork02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 作业2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/11 11:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Class类的forName方法得到File类的class 对象</span></span><br><span class="line"><span class="comment"> * 在控制台打印File类的所有构造器</span></span><br><span class="line"><span class="comment"> * 通过newInstance的方法创建File对象，并创建F:\my.txt文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeWork02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获取类class对象</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.io.File&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历cls类对象构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : cls.getDeclaredConstructors()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;构造方法&quot;</span>+declaredConstructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//指定的得到 public java.io.File(java.lang.String)</span></span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = cls.getDeclaredConstructor(String.class);</span><br><span class="line">        String filePath=<span class="string">&quot;f:\\my.text&quot;</span>;</span><br><span class="line">        Object file = declaredConstructor.newInstance(filePath);</span><br><span class="line">        <span class="comment">//得到createNewFile 的方法对象</span></span><br><span class="line">        Method createNewFile = cls.getMethod(<span class="string">&quot;createNewFile&quot;</span>);</span><br><span class="line">        createNewFile.invoke(file);</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件创建成功&quot;</span>+filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/2WcCpq"><img src="https://z3.ax1x.com/2021/06/11/2WcCpq.png" alt="2WcCpq.png"></a></p>
<p><strong>写在最后</strong></p>
<ul>
<li>许多基础仍需要补充</li>
<li>提高独立写代码和思考的能力</li>
<li>多练习，多思考:muscle:</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java网络编程学习笔记</title>
    <url>/2021/01/11/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java网络编程学习笔记"><a href="#Java网络编程学习笔记" class="headerlink" title="Java网络编程学习笔记"></a>Java网络编程学习笔记</h1><p>写在前面：感谢韩老师的讲解视频！</p>
<p><strong>学习地址：<a href="https://www.bilibili.com/video/BV1j54y1b7qv">【韩顺平讲Java】Java网络多线程专题 - TCP UDP Socket编程</a></strong></p>
<h1 id="1-网络的相关概念"><a href="#1-网络的相关概念" class="headerlink" title="1. 网络的相关概念"></a>1. 网络的相关概念</h1><h2 id="1-1-网络通信"><a href="#1-1-网络通信" class="headerlink" title="1.1 网络通信"></a>1.1 网络通信</h2><ul>
<li>概念：两台设备之间通过网络实现数据传输</li>
<li>网络通信：将数据通过网络从一台设备传输到另以台设备</li>
<li>java.net包下提供了一系列的类或接口，供程序员使用，完成网络通信</li>
</ul>
<p><a href="https://imgtu.com/i/21wsEj"><img src="https://z3.ax1x.com/2021/06/03/21wsEj.png" alt="21wsEj.png"></a></p>
<h2 id="1-2-网络"><a href="#1-2-网络" class="headerlink" title="1.2 网络"></a>1.2 网络</h2><ul>
<li>概念：两台或多台设备通过一定物理设备连接来构成了网络</li>
<li>根据网络的覆盖范围不同，对网络进行分类</li>
<li>局域网：覆盖范围最小，仅仅覆盖一个教室或者一个机房</li>
<li>城域网：覆盖范围比较大，可以覆盖一个城市</li>
<li>广域网：覆盖范围最大，可以覆盖全国，甚至全球，万维网是广域网的代表</li>
</ul>
<p><a href="https://imgtu.com/i/21wyUs"><img src="https://z3.ax1x.com/2021/06/03/21wyUs.png" alt="21wyUs.png"></a></p>
<h2 id="1-3-IP地址"><a href="#1-3-IP地址" class="headerlink" title="1.3 IP地址"></a>1.3 IP地址</h2><ul>
<li>概念：用于唯一标识网络中的每台主机/计算机</li>
<li>查看IP地址的命令：ipconfig</li>
<li>ip地址的表示形式：点分十进制 xx.xx.xx.xx</li>
<li>每一个十进制的范围 0-255</li>
<li>ip地址的组成=网络地址+主机地址  例如192.168.152.xxx</li>
<li>ipv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议</li>
<li>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展，IPv6的使用可以解决网络地址资源数量的问题，也解决了多种接入设备互联网的障碍</li>
</ul>
<p>更多了解IPv6参考 <a href="https://baike.baidu.com/item/IPv6/172297">IPv6_百度百科 (baidu.com)</a></p>
<h2 id="1-4-ipv4-地址分类"><a href="#1-4-ipv4-地址分类" class="headerlink" title="1.4 ipv4 地址分类"></a>1.4 ipv4 地址分类</h2><p><a href="https://imgtu.com/i/21w65n"><img src="https://z3.ax1x.com/2021/06/03/21w65n.png" alt="21w65n.png"></a></p>
<p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210601211137383.png" alt="image-20210601211137383"></p>
<h2 id="1-5-域名"><a href="#1-5-域名" class="headerlink" title="1.5 域名"></a>1.5 域名</h2><ul>
<li>好处：方便记忆，解决记ip的困难</li>
<li>概念：将ip地址映射成域名，HTTP协议</li>
</ul>
<p><strong>端口号</strong></p>
<ul>
<li>概念：用于标识计算机上某个特定的网络程序</li>
<li>表示形式：以整数形式，端口范围0-65535 [2个字节表示端口 0~2的16次-1]</li>
<li>常见网络程序端口号<ul>
<li>tomcat：8080</li>
<li>mysql：3306</li>
<li>sqlserve：1433</li>
</ul>
</li>
</ul>
<h2 id="1-6-网络通信协议"><a href="#1-6-网络通信协议" class="headerlink" title="1.6 网络通信协议"></a>1.6 网络通信协议</h2><p><a href="https://imgtu.com/i/21wDbQ"><img src="https://z3.ax1x.com/2021/06/03/21wDbQ.png" alt="21wDbQ.png"></a></p>
<ul>
<li>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇</li>
</ul>
<table>
<thead>
<tr>
<th align="center">OSI模型</th>
<th align="center">TCP/IP模型</th>
<th align="center">TCP/IP模型各层对应协议</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层</td>
<td align="center">应用层</td>
<td align="center">HTTP FTP DNS…</td>
</tr>
<tr>
<td align="center">表示层</td>
<td align="center">应用层</td>
<td align="center">HTTP FTP DNS…</td>
</tr>
<tr>
<td align="center">会话层</td>
<td align="center">应用层</td>
<td align="center">HTTP FTP DNS…</td>
</tr>
<tr>
<td align="center">传输层</td>
<td align="center">传输层(TCP)</td>
<td align="center">TCP UDP…</td>
</tr>
<tr>
<td align="center">网络层</td>
<td align="center">网络层(IP)</td>
<td align="center">IP ICMP ARP</td>
</tr>
<tr>
<td align="center">数据链路层</td>
<td align="center">物理+数据链路层</td>
<td align="center">Link</td>
</tr>
<tr>
<td align="center">物理层</td>
<td align="center">物理+数据链路层</td>
<td align="center">Link</td>
</tr>
</tbody></table>
<h2 id="1-7-TCP和UDP"><a href="#1-7-TCP和UDP" class="headerlink" title="1.7 TCP和UDP"></a>1.7 TCP和UDP</h2><p><strong>TCP协议:传输控制协议</strong></p>
<ul>
<li>1.使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>
<li>2.传输前，采用”三次握手”方式，是可靠的</li>
<li>3.TCP协议进行通信的两个应用进程:客户端、服务端</li>
<li>4.在连接中可进行大数据量的传输</li>
<li>5.传输完毕，需释放已建立的连接，效率低</li>
</ul>
<p><strong>UDP协议:用户数据协议</strong></p>
<ul>
<li>1.将数据、源、目的封装成数据包，不需要建立连接</li>
<li>2.每个数据报的大小限制在64K内,不适合传输大量数据</li>
<li>3.因无需连接，故是不可靠的</li>
<li>4.发送数据结束时无需释放资源(因为不是面向连接的)，速度快</li>
<li>5.举例:厕所通知:发短信</li>
</ul>
<h1 id="2-InetAddress类"><a href="#2-InetAddress类" class="headerlink" title="2. InetAddress类"></a>2. InetAddress类</h1><p>常用方法</p>
<p><a href="https://imgtu.com/i/21wBDg"><img src="https://z3.ax1x.com/2021/06/03/21wBDg.png" alt="21wBDg.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> API_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 网络编程常用api</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">API_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取本机 InetAddress 对象 getLocalHost</span></span><br><span class="line">        InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line">        <span class="comment">//根据指定主机名/域名获取 ip 地址对象 getByName</span></span><br><span class="line">        InetAddress host2 = InetAddress.getByName(<span class="string">&quot;DESKTOP-5H1AECH&quot;</span>);</span><br><span class="line">        System.out.println(host2);</span><br><span class="line">        InetAddress host3 = InetAddress.getByName(<span class="string">&quot;itkxz.cn&quot;</span>);</span><br><span class="line">        System.out.println(host3);</span><br><span class="line">        <span class="comment">//获取 InetAddress 对象的主机名 getHostName</span></span><br><span class="line">        String host3Name = host3.getHostName();</span><br><span class="line">        System.out.println(host3Name);</span><br><span class="line">        <span class="comment">//获取 InetAddress 对象的地址 getHostAddress</span></span><br><span class="line">        String host3Address = host3.getHostAddress();</span><br><span class="line">        System.out.println(host3Address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-Socket"><a href="#3-Socket" class="headerlink" title="3. Socket"></a>3. Socket</h1><p>基本介绍</p>
<ul>
<li>套接字(Socket)开发网络应用程序被广泛使用</li>
<li>通信的两端都要有Socket，是两台机器通信的端点</li>
<li>网络通信其实就是Socket的通信</li>
<li>Socket允许程序把网络连接当初一个流，数据在两个Socket间通过IO传输</li>
<li>一般主动发起通信的应用程序属于<code>客户端</code>，等待通信请求的为<code>服务端</code></li>
</ul>
<p><strong>示意图</strong></p>
<p><a href="https://imgtu.com/i/21wgCq"><img src="https://z3.ax1x.com/2021/06/03/21wgCq.png" alt="21wgCq.png"></a></p>
<h1 id="4-TCP-网络通信编程"><a href="#4-TCP-网络通信编程" class="headerlink" title="4. TCP 网络通信编程"></a>4. TCP 网络通信编程</h1><p>基本介绍</p>
<ul>
<li>基于客户端—服务端的网络通信</li>
<li>底层使用的是TCP/IP协议</li>
<li>场景举例：客户端发送数据，服务端接受并显示在控制台</li>
<li>基于Socket的TCP编程</li>
</ul>
<h2 id="4-1-练习"><a href="#4-1-练习" class="headerlink" title="4.1 练习"></a>4.1 练习</h2><h3 id="4-1-1-使用字节流-练习1"><a href="#4-1-1-使用字节流-练习1" class="headerlink" title="4.1.1 使用字节流(练习1)"></a>4.1.1 使用字节流(练习1)</h3><p><a href="https://imgtu.com/i/21wR2V"><img src="https://z3.ax1x.com/2021/06/03/21wR2V.png" alt="21wR2V.png"></a></p>
<p><strong>SocketTCP01Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP01Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有客户端连接9999端口会一直阻塞，等待连接</span></span><br><span class="line"><span class="comment">        如果有客户端连接，会返回Socket对象，程序继续</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在9999端口监听！&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 socket=&quot;</span>+socket.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket.getInputStream()  读取客户端写入数据通信的数据，显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IO读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((readLength=inputStream.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//读取到的实际长度，显示内容</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buf,<span class="number">0</span>, readLength));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        关闭流和socket</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SocketTCP01Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP01Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">    <span class="comment">//1. 连接服务端 (ip , 端口）</span></span><br><span class="line">    <span class="comment">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 socket 返回=&quot;</span> + socket.getClass());</span><br><span class="line">    <span class="comment">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span></span><br><span class="line">    <span class="comment">// 得到 和 socket 对象关联的输出流对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="comment">//3. 通过输出流，写入数据到 数据通道</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;hello, server&quot;</span>.getBytes());</span><br><span class="line">    <span class="comment">//4. 关闭流对象和 socket, 必须关闭</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-使用字节流-练习2"><a href="#4-1-2-使用字节流-练习2" class="headerlink" title="4.1.2 使用字节流(练习2)"></a>4.1.2 使用字节流(练习2)</h3><p><a href="https://imgtu.com/i/21wWvT"><img src="https://z3.ax1x.com/2021/06/03/21wWvT.png" alt="21wWvT.png"></a></p>
<p><strong>SocketTCP02Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP02Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP02Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有客户端连接9999端口会一直阻塞，等待连接</span></span><br><span class="line"><span class="comment">        如果有客户端连接，会返回Socket对象，程序继续</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在9999端口监听！&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 socket=&quot;</span>+socket.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket.getInputStream()  读取客户端写入数据通信的数据，显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IO读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((readLength=inputStream.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//读取到的实际长度，显示内容</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buf,<span class="number">0</span>, readLength));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 获取 socket 相关联的输出流</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello, client&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 设置结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭流和socket</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SocketTCP02Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP02Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP02Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">    <span class="comment">//1. 连接服务端 (ip , 端口）</span></span><br><span class="line">    <span class="comment">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 socket 返回=&quot;</span> + socket.getClass());</span><br><span class="line">    <span class="comment">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span></span><br><span class="line">    <span class="comment">// 得到 和 socket 对象关联的输出流对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="comment">//3. 通过输出流，写入数据到 数据通道</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;hello, server&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 设置结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">    <span class="comment">//4. 获取和 socket 关联的输入流. 读取数据(字节)，并显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, readLen));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//5. 关闭流对象和 socket, 必须关闭</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-3-使用字符流-练习3"><a href="#4-1-3-使用字符流-练习3" class="headerlink" title="4.1.3 使用字符流(练习3)"></a>4.1.3 使用字符流(练习3)</h3><p><a href="https://imgtu.com/i/21whKU"><img src="https://z3.ax1x.com/2021/06/03/21whKU.png" alt="21whKU.png"></a></p>
<p><strong>SocketTCP03Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP03Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP03Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有客户端连接9999端口会一直阻塞，等待连接</span></span><br><span class="line"><span class="comment">        如果有客户端连接，会返回Socket对象，程序继续</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在9999端口监听！&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 socket=&quot;</span>+socket.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">//3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4. IO 读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取 socket 相关联的输出流</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用字符输出流的方式回复信息</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello client 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">//注意需要手动的 flush</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();<span class="comment">//关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SocketTCP03Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SocketTCP03Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 12:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTCP03Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 socket 返回=&quot;</span> + socket.getClass());</span><br><span class="line">        <span class="comment">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">// 得到 和 socket 对象关联的输出流对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, server 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用 readLine()!!!!</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span></span><br><span class="line">        <span class="comment">//4. 获取和 socket 关联的输入流. 读取数据(字符)，并显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//5. 关闭流对象和 socket, 必须关闭</span></span><br><span class="line">        bufferedReader.close();<span class="comment">//关闭外层流</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-4-发送图片-练习4"><a href="#4-1-4-发送图片-练习4" class="headerlink" title="4.1.4 发送图片(练习4)"></a>4.1.4 发送图片(练习4)</h3><blockquote>
<ul>
<li>编写一个服务端，和一个客户端</li>
<li>在8888端口监听</li>
<li>连接到服务端 发送一张图片</li>
<li>服务端接收到 客户端发送的图片 保存到指定目录下，发送“收到图片”后退出</li>
<li>客户端接受到服务端发送“收到图片” 再退出</li>
</ul>
</blockquote>
<p><strong>使用到一个工具类 StreamUtils</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> StreamUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/3 13:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类用于演示关于流的读写方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：将输入流转换成byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] streamToByteArray(InputStream is) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//创建输出流对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] array = bos.toByteArray();</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：将InputStream转换成String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">streamToString</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        StringBuilder builder= <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            builder.append(line+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TCPFileUploadServer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> TCPFileUploadServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 文件上传服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 9:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPFileUploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 在本机监听8888端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在8888端口监听......&quot;</span>);</span><br><span class="line">        <span class="comment">//等待连接</span></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        <span class="comment">//读取客户端的数据 通过Socket得到输入流</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//将得到的数组写入指定路径</span></span><br><span class="line">        String desFilePath = <span class="string">&quot;f:\\2.jpg&quot;</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(desFilePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向客户端回复 收到图片</span></span><br><span class="line">        <span class="comment">//通过socket 获取到输入流</span></span><br><span class="line">        BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        <span class="comment">// 把内容刷新到数据通道</span></span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="comment">//设置写入结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TCPFileUploadClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> TCPFileUploadClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 文件上传客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 9:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPFileUploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//客户端连接服务端8888，得到Socket对象</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//创建读取磁盘的文件</span></span><br><span class="line">        String filePath=<span class="string">&quot;f:\\1.jpg&quot;</span>;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">        <span class="comment">//数组就是FilePath所对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        通过socket获取到输入流，将bytes数据发送给服务端</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bis.close();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        接受从服务端回复的消息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//转成字符串</span></span><br><span class="line">        String s = StreamUtils.streamToString(inputStream);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-netstat-指令"><a href="#5-netstat-指令" class="headerlink" title="5. netstat 指令"></a>5. netstat 指令</h1><p><a href="https://imgtu.com/i/2GKweP"><img src="https://z3.ax1x.com/2021/06/04/2GKweP.png" alt="2GKweP.png"></a></p>
<p><strong>示意图</strong></p>
<p><a href="https://imgtu.com/i/2GlBo6"><img src="https://z3.ax1x.com/2021/06/04/2GlBo6.png" alt="2GlBo6.png"></a></p>
<ul>
<li>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端来进行通讯的，这个端口是TVP/IP来分配的，是随机的</li>
</ul>
<h1 id="6-UDP-网络通信编程"><a href="#6-UDP-网络通信编程" class="headerlink" title="6. UDP 网络通信编程"></a>6. UDP 网络通信编程</h1><p><strong>基本介绍</strong></p>
<p><a href="https://imgtu.com/i/2G1CpF"><img src="https://z3.ax1x.com/2021/06/04/2G1CpF.png" alt="2G1CpF.png"></a></p>
<p><strong>基本流程</strong></p>
<p><a href="https://imgtu.com/i/2G1nfO"><img src="https://z3.ax1x.com/2021/06/04/2G1nfO.png" alt="2G1nfO.png"></a></p>
<p><strong>案例</strong></p>
<p><a href="https://imgtu.com/i/2G1lXd"><img src="https://z3.ax1x.com/2021/06/04/2G1lXd.png" alt="2G1lXd.png"></a></p>
<p><strong>UDPReceiverA</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> UDPReceiverA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> UDP 接收端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiverA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//当有数据包发送到 本机的9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="keyword">int</span> length = packet.getLength();</span><br><span class="line">        <span class="comment">//接收到数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">        String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UDPSenderB</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> UDPSenderB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 发送端 B ====&gt; 也可以接收数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSenderB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        DatagramPacket packet =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//当有数据包发送到 本机的9998端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="keyword">int</span> length = packet.getLength();</span><br><span class="line">        <span class="comment">//接收到数据</span></span><br><span class="line">        data = packet.getData();</span><br><span class="line">        String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-练习"><a href="#6-1-练习" class="headerlink" title="6.1 练习"></a>6.1 练习</h2><h3 id="6-1-1-作业1"><a href="#6-1-1-作业1" class="headerlink" title="6.1.1 作业1"></a>6.1.1 作业1</h3><p><a href="https://imgtu.com/i/2G1R9U"><img src="https://z3.ax1x.com/2021/06/04/2G1R9U.png" alt="2G1R9U.png"></a></p>
<p><strong>Homework01Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework01Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 服务端, 使用字符流方式读写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 在本机 的9999端口监听, 等待连接</span></span><br><span class="line">        <span class="comment">//   细节: 要求在本机没有其它服务在监听9999</span></span><br><span class="line">        <span class="comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span></span><br><span class="line">        <span class="comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span></span><br><span class="line"></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4. IO读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line">        String answer = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(s)) &#123;</span><br><span class="line">            answer = <span class="string">&quot;我是zk&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;hobby&quot;</span>.equals(s)) &#123;</span><br><span class="line">            answer = <span class="string">&quot;编写java程序&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            answer = <span class="string">&quot;你说的啥子&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取socket相关联的输出流</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//    使用字符输出流的方式回复信息</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream));</span><br><span class="line">        bufferedWriter.write(answer);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭流和socket</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();<span class="comment">//关闭</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Homework01Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework01Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 客户端，发送 &quot;hello, server&quot; 给服务端， 使用字符流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 连接服务端 (ip , 端口）</span></span><br><span class="line">        <span class="comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">//   得到 和 socket对象关联的输出流对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从键盘读取用户的问题</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的问题&quot;</span>);</span><br><span class="line">        String question = scanner.next();</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(question);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取和socket关联的输入流. 读取数据(字符)，并显示</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String s = bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭流对象和socket, 必须关闭</span></span><br><span class="line">        bufferedReader.close();<span class="comment">//关闭外层流</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-1-2-作业2"><a href="#6-1-2-作业2" class="headerlink" title="6.1.2 作业2"></a>6.1.2 作业2</h3><p><a href="https://imgtu.com/i/2G1ghT"><img src="https://z3.ax1x.com/2021/06/04/2G1ghT.png" alt="2G1ghT.png"></a></p>
<p><strong>Homework02ReceiverA</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework02ReceiverA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> UDP接收端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02ReceiverA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在8888接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端 等待接收问题 &quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="keyword">int</span> length = packet.getLength();</span><br><span class="line">        <span class="comment">//接收到数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">        String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, length);</span><br><span class="line">        <span class="comment">//判断接收到的信息是什么</span></span><br><span class="line">        String answer = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;四大名著是哪些&quot;</span>.equals(s)) &#123;</span><br><span class="line">            answer = <span class="string">&quot;四大名著 &lt;&lt;红楼梦&gt;&gt; &lt;&lt;三国演示&gt;&gt; &lt;&lt;西游记&gt;&gt; &lt;&lt;水浒传&gt;&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            answer = <span class="string">&quot;what?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = answer.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Homework02SenderB</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Homework02SenderB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 发送端B ====&gt; 也可以接收数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02SenderB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的问题: &quot;</span>);</span><br><span class="line">        String question = scanner.next();</span><br><span class="line">        <span class="keyword">byte</span>[] data = question.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        DatagramPacket packet =</span><br><span class="line">                <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="keyword">int</span> length = packet.getLength();</span><br><span class="line">        <span class="comment">//接收到数据</span></span><br><span class="line">        data = packet.getData();</span><br><span class="line">        String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-多用户即时通讯"><a href="#7-多用户即时通讯" class="headerlink" title="7. 多用户即时通讯"></a>7. 多用户即时通讯</h1><p>此项目是用来总结 <code>多线程</code>，<code>IO流</code>，<code>网络编程</code>所学的重要知识点</p>
<p><strong>先看项目 目录一览</strong></p>
<p><a href="https://imgtu.com/i/2szH4f"><img src="https://z3.ax1x.com/2021/06/09/2szH4f.png" alt="2szH4f.png"></a></p>
<p>所包含的功能</p>
<ol>
<li>用户登录</li>
<li>拉取在线用户列表</li>
<li>无异常退出（客户端，服务端）</li>
<li>私聊</li>
<li>群聊</li>
<li>发文件</li>
<li>服务器推送新闻</li>
</ol>
<h2 id="7-1-功能实现-用户登录"><a href="#7-1-功能实现-用户登录" class="headerlink" title="7.1 功能实现-用户登录"></a>7.1 功能实现-用户登录</h2><p>先看示意图，看懂图才能了解功能如何实现！</p>
<p><a href="https://imgtu.com/i/2ypoff"><img src="https://z3.ax1x.com/2021/06/09/2ypoff.png" alt="2ypoff.png"></a></p>
<p><strong>图解读</strong></p>
<p><strong>客户端</strong></p>
<ul>
<li>和服务端通信时，使用对象方式，可以使用<code>对象流</code>来读写</li>
<li>当客户端连接到服务端，也会得到<code>socket</code></li>
<li>启动一个线程，该线程持有<code>socket</code></li>
<li>方便管理线程，将线程放入到集合</li>
</ul>
<p><strong>服务端</strong></p>
<ul>
<li>有客户端连接到服务器，得到一个<code>socket</code></li>
<li>启动一个线程，持有该<code>socket</code>,且包含该线程所有属性</li>
<li>方便管理线程，需要使用集合管理</li>
</ul>
<h2 id="7-2-功能实现-私聊"><a href="#7-2-功能实现-私聊" class="headerlink" title="7.2 功能实现-私聊"></a>7.2 功能实现-私聊</h2><p><a href="https://imgtu.com/i/2ypoff"><img src="https://z3.ax1x.com/2021/06/09/2ypoff.png" alt="2ypoff.png"></a></p>
<p><strong>客户端</strong></p>
<ul>
<li>接受用户希望给其他在线用户聊天的内容</li>
<li>将消息构成<code>Message</code>对象，通过对应的<code>socket</code>发送给服务器</li>
<li>在通信线程中，读取到发送的<code>message</code>消息，显示</li>
</ul>
<p><strong>服务端</strong></p>
<ul>
<li>可以从客户端读取到消息</li>
<li>从管理线程的集合中，根据<code>message</code>对象的<code>id</code>获取对应的<code>socket</code></li>
<li>最后将<code>message</code>对象转发给指定用户</li>
</ul>
<h2 id="7-3-功能实现-发文件"><a href="#7-3-功能实现-发文件" class="headerlink" title="7.3 功能实现-发文件"></a>7.3 功能实现-发文件</h2><p><a href="https://imgtu.com/i/2yP7p6"><img src="https://z3.ax1x.com/2021/06/09/2yP7p6.png" alt="2yP7p6.png"></a></p>
<p><strong>客户端</strong></p>
<ul>
<li>先把文件读取到客户端，存放在字节数组中</li>
<li>把对应的文件字节数组封装到<code>message</code>对(文件内容，sender,getter)</li>
<li>将<code>message</code>对象发送给服务端</li>
<li>在接收到文件的消息后，将该文件保存到磁盘</li>
</ul>
<p><strong>服务端</strong></p>
<ul>
<li>接收<code>message</code>对象</li>
<li>拆解<code>message</code>对象的<code>id</code>，获取用户的通信线程</li>
<li>将<code>message</code>转发给指定用户</li>
</ul>
<h2 id="7-4-代码实现"><a href="#7-4-代码实现" class="headerlink" title="7.4 代码实现"></a>7.4 代码实现</h2><p>分析完看代码实现，关键方法都有注释</p>
<h3 id="7-4-1-QQServe"><a href="#7-4-1-QQServe" class="headerlink" title="7.4.1 QQServe"></a>7.4.1 QQServe</h3><p><strong>Message</strong></p>
<ul>
<li>实现序列化接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqcommon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 表示客户端和服务端通信时的消息对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//发送者</span></span><br><span class="line">    <span class="keyword">private</span> String sender;</span><br><span class="line">    <span class="comment">//接受者</span></span><br><span class="line">    <span class="keyword">private</span> String getter;</span><br><span class="line">    <span class="comment">//消息内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//发送时间</span></span><br><span class="line">    <span class="keyword">private</span> String sendTime;</span><br><span class="line">    <span class="comment">//消息类型</span></span><br><span class="line">    <span class="keyword">private</span> String mesType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行拓展 和文件相关的成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] fileBytes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fileLen=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//文件传输的目的地</span></span><br><span class="line">    <span class="keyword">private</span> String dest;</span><br><span class="line">    <span class="comment">//源文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String src;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getFileBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> fileBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileBytes</span><span class="params">(<span class="keyword">byte</span>[] fileBytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileBytes = fileBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFileLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFileLen</span><span class="params">(<span class="keyword">int</span> fileLen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileLen = fileLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDest</span><span class="params">(String dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dest = dest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSrc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSrc</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.src = src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMesType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mesType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMesType</span><span class="params">(String mesType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mesType = mesType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSender</span><span class="params">(String sender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender = sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGetter</span><span class="params">(String getter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = getter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSendTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSendTime</span><span class="params">(String sendTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sendTime = sendTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MessageType</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqcommon;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MessageType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 表示消息类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接口中定义一些常量</span></span><br><span class="line"><span class="comment">    不同常量表示不同的消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String MESSAGE_LOGIN_SUCCEED = <span class="string">&quot;1&quot;</span>; <span class="comment">//表示登录成功</span></span><br><span class="line">    String MESSAGE_LOGIN_FAIL = <span class="string">&quot;2&quot;</span>; <span class="comment">// 表示登录失败</span></span><br><span class="line">    String MESSAGE_COMM_MES = <span class="string">&quot;3&quot;</span>; <span class="comment">//普通信息包</span></span><br><span class="line">    String MESSAGE_GET_ONLINE_FRIEND = <span class="string">&quot;4&quot;</span>; <span class="comment">//要求返回在线用户列表</span></span><br><span class="line">    String MESSAGE_RET_ONLINE_FRIEND = <span class="string">&quot;5&quot;</span>; <span class="comment">//返回在线用户列表</span></span><br><span class="line">    String MESSAGE_CLIENT_EXIT = <span class="string">&quot;6&quot;</span>; <span class="comment">//客户端请求退出</span></span><br><span class="line">    String MESSAGE_TO_ALL_MES = <span class="string">&quot;7&quot;</span>; <span class="comment">//群发消息报</span></span><br><span class="line">    String MESSAGE_FILE_MES = <span class="string">&quot;8&quot;</span>; <span class="comment">//文件消息(发送文件)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqcommon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 表示一个用户/客户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String userId;<span class="comment">//用户Id/用户名</span></span><br><span class="line">    <span class="keyword">private</span> String passwd;<span class="comment">//用户密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userId, String passwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPasswd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasswd</span><span class="params">(String passwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>工具类 方便管理输入</strong></p>
<p><strong>Utility</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Utility</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 工具类的作用:</span></span><br><span class="line"><span class="comment"> 处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utility</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态属性。。。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1——5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);<span class="comment">//包含一个字符的字符串</span></span><br><span class="line">            c = str.charAt(<span class="number">0</span>);<span class="comment">//将字符串转换成字符char类型</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp;</span><br><span class="line">                    c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);<span class="comment">//就是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认值或输入的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">(<span class="keyword">char</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">true</span>);<span class="comment">//要么是空字符串，要么是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的整型，长度小于2位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">10</span>, <span class="keyword">false</span>);<span class="comment">//一个整数，长度&lt;=10位</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);<span class="comment">//将字符串转换成整数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数或默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">10</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//异常处理...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit, String defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(limit, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的确认选项，Y或N</span></span><br><span class="line"><span class="comment">     * 将小的功能，封装到一个方法中.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Y或N</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的选择(Y/N): 请小心选择&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="comment">//在这里，将接受到字符，转成了大写字母</span></span><br><span class="line">            <span class="comment">//y =&gt; Y n=&gt;N</span></span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能： 读取一个字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span></span><br><span class="line"><span class="comment">     *                   如果为false表示 不能读空字符串。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了字符串</span></span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//scanner.hasNextLine() 判断有没有下一行</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();<span class="comment">//读取这一行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) &#123;</span><br><span class="line">                    <span class="keyword">return</span> line;<span class="comment">//如果blankReturn=true,可以返回空串</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">//如果blankReturn=false,不接受空串，必须输入内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果用户输入的内容大于了 limit，就提示重写输入</span></span><br><span class="line">            <span class="comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ManageClientThreads</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ManageClientThreads</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 该类用于管理和客户端通信的线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageClientThreads</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String,ServerConnectClientThread&gt; hm=<span class="keyword">new</span> HashMap&lt;String, ServerConnectClientThread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回hm</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ServerConnectClientThread&gt; <span class="title">getHm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将线程添加对象到hm集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">addClientThread</span><span class="params">(String userId,ServerConnectClientThread serverConnectClientThread)</span></span>&#123;</span><br><span class="line">        hm.put(userId, serverConnectClientThread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据userId，返回ServerConnectClientThread线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ServerConnectClientThread <span class="title">getServerConnectClientThread</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hm.get(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个方法，从集合中，移除某个线程对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeServerConnectClientThread</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        hm.remove(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回在线用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOnlineUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        遍历集合</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = hm.keySet().iterator();</span><br><span class="line">        String onlineUserList=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            onlineUserList+=iterator.next().toString()+<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> onlineUserList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>SendNewsToAllService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.utils.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SendNewsToAllService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendNewsToAllService</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//为了多次推送新闻可以使用while循环</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入服务器要推送的新闻/消息[输入exit表示退出服务线程]&quot;</span>);</span><br><span class="line">            String news= Utility.readString(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;exit&quot;</span>.equals(news))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//构建一个消息，群发信息</span></span><br><span class="line">            Message message=<span class="keyword">new</span> Message();</span><br><span class="line">            message.setSender(<span class="string">&quot;服务器&quot;</span>);</span><br><span class="line">            message.setMesType(MessageType.MESSAGE_TO_ALL_MES);</span><br><span class="line">            message.setContent(news);</span><br><span class="line">            message.setSendTime(<span class="keyword">new</span> Date().toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器推送消息给所有人 说&quot;</span>+news);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历当前所有的通信线程，得到socket,并发送message</span></span><br><span class="line">            HashMap&lt;String, ServerConnectClientThread&gt; hm = ManageClientThreads.getHm();</span><br><span class="line">            Iterator&lt;String&gt; iterator = hm.keySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                String onLineUserId = iterator.next().toString();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ObjectOutputStream oos</span><br><span class="line">                            = <span class="keyword">new</span> ObjectOutputStream(hm.get(onLineUserId).getSocket().getOutputStream());</span><br><span class="line">                    oos.writeObject(message);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ServerConnectClientThread</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ServerConnectClientThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 该类的一个对象和某个客户端保持通信</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 12:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnectClientThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="comment">//连接服务端的id</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerConnectClientThread</span><span class="params">(Socket socket, String userId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        label:</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务端和客户端&quot;</span> + userId + <span class="string">&quot; 保持通信，读取数据中！&quot;</span>);</span><br><span class="line">                ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                Message message = (Message) ois.readObject();</span><br><span class="line">                <span class="comment">//后面根据MessageType的类型做相应的业务处理</span></span><br><span class="line">                <span class="keyword">switch</span> (message.getMesType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MessageType.MESSAGE_GET_ONLINE_FRIEND: &#123;</span><br><span class="line">                        <span class="comment">//显示客户端在线列表</span></span><br><span class="line">                        System.out.println(message.getSender() + <span class="string">&quot; 要在线用户列表&quot;</span>);</span><br><span class="line">                        String onlineUser = ManageClientThreads.getOnlineUser();</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    返回message</span></span><br><span class="line"><span class="comment">                    构建一个Message对象 返回客户端</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                        Message message2 = <span class="keyword">new</span> Message();</span><br><span class="line">                        message2.setMesType(MessageType.MESSAGE_RET_ONLINE_FRIEND);</span><br><span class="line">                        message2.setContent(onlineUser);</span><br><span class="line">                        message2.setGetter(message.getSender());</span><br><span class="line">                        <span class="comment">//返回给客户端</span></span><br><span class="line">                        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                        oos.writeObject(message2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> MessageType.MESSAGE_COMM_MES: &#123;</span><br><span class="line">                        <span class="comment">//根据message获取id 然后得到对应线程</span></span><br><span class="line">                        ServerConnectClientThread serverConnectClientThread</span><br><span class="line">                                = ManageClientThreads.getServerConnectClientThread(message.getGetter());</span><br><span class="line">                        <span class="comment">//得到对应Socket的对象输出流，将message对象转发给指定的客户端</span></span><br><span class="line">                        ObjectOutputStream oos</span><br><span class="line">                                = <span class="keyword">new</span> ObjectOutputStream(serverConnectClientThread.getSocket().getOutputStream());</span><br><span class="line">                        oos.writeObject(message);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> MessageType.MESSAGE_TO_ALL_MES:</span><br><span class="line">                        <span class="comment">//需要遍历 管理线程的集合 把所有的线程的socket得到 得到把message进行转发即可</span></span><br><span class="line">                        HashMap&lt;String, ServerConnectClientThread&gt; hm = ManageClientThreads.getHm();</span><br><span class="line">                        Iterator&lt;String&gt; iterator = hm.keySet().iterator();</span><br><span class="line">                        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                            <span class="comment">//取出在线用户id</span></span><br><span class="line">                            String onLineUserId = iterator.next().toString();</span><br><span class="line">                            <span class="keyword">if</span> (!onLineUserId.equals(message.getSender())) &#123;</span><br><span class="line">                                <span class="comment">//排除群发消息的用户</span></span><br><span class="line">                                <span class="comment">//进行转发消息message</span></span><br><span class="line">                                ObjectOutputStream oos</span><br><span class="line">                                        = <span class="keyword">new</span> ObjectOutputStream(hm.get(onLineUserId).getSocket().getOutputStream());</span><br><span class="line">                                oos.writeObject(message);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MessageType.MESSAGE_FILE_MES: &#123;</span><br><span class="line">                        <span class="comment">//根据getter id 获取到对应的线程 ，将message对象转发</span></span><br><span class="line">                        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(ManageClientThreads</span><br><span class="line">                                .getServerConnectClientThread(message.getGetter()).getSocket().getOutputStream());</span><br><span class="line">                        <span class="comment">//转发</span></span><br><span class="line">                        oos.writeObject(message);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> MessageType.MESSAGE_CLIENT_EXIT:</span><br><span class="line">                        <span class="comment">//客户端退出</span></span><br><span class="line">                        System.out.println(message.getSender() + <span class="string">&quot; 退出&quot;</span>);</span><br><span class="line">                        <span class="comment">//这个客户端从对应线程删除</span></span><br><span class="line">                        ManageClientThreads.removeServerConnectClientThread(message.getSender());</span><br><span class="line">                        socket.close();</span><br><span class="line">                        <span class="keyword">break</span> label;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;其他类型的message,暂时不处理&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>QQServer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> QQServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> QQ服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//创建一个集合，存放多个用户，如果是这些用户登录，就认为是合法</span></span><br><span class="line">    <span class="comment">//这里我们也可以使用 ConcurrentHashMap, 可以处理并发的集合，没有线程安全</span></span><br><span class="line">    <span class="comment">//HashMap 没有处理线程安全，因此在多线程情况下是不安全</span></span><br><span class="line">    <span class="comment">//ConcurrentHashMap 处理的线程安全,即线程同步处理, 在多线程情况下是安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, User&gt; validUsers = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//private static ConcurrentHashMap&lt;String, ArrayList&lt;Message&gt;&gt; offLineDb = new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">//在静态代码块，初始化 validUsers</span></span><br><span class="line"></span><br><span class="line">        validUsers.put(<span class="string">&quot;100&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        validUsers.put(<span class="string">&quot;200&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;200&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        validUsers.put(<span class="string">&quot;300&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;300&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        validUsers.put(<span class="string">&quot;400&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        validUsers.put(<span class="string">&quot;500&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;500&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        validUsers.put(<span class="string">&quot;600&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;600&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证用户是否有效的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkUser</span><span class="params">(String userId, String passwd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = validUsers.get(userId);</span><br><span class="line">        <span class="comment">//过关的验证方式</span></span><br><span class="line">        <span class="comment">//说明userId没有存在validUsers 的key中</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//userId正确，但是密码错误</span></span><br><span class="line">        <span class="keyword">if</span>(!user.getPasswd().equals(passwd)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意：端口可以写在配置文件.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务端在9999端口监听...&quot;</span>);</span><br><span class="line">            <span class="comment">//启动推送新闻的线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SendNewsToAllService()).start();</span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//当和某个客户端连接后，会继续监听, 因此while</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//如果没有客户端连接，就会阻塞在这里</span></span><br><span class="line">                Socket socket = ss.accept();</span><br><span class="line">                <span class="comment">//得到socket关联的对象输入流</span></span><br><span class="line">                ObjectInputStream ois =</span><br><span class="line">                        <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//得到socket关联的对象输出流</span></span><br><span class="line">                ObjectOutputStream oos =</span><br><span class="line">                        <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//读取客户端发送的User对象</span></span><br><span class="line">                User u = (User) ois.readObject();</span><br><span class="line">                <span class="comment">//创建一个Message对象，准备回复客户端</span></span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//验证用户 方法</span></span><br><span class="line">                <span class="comment">//登录通过</span></span><br><span class="line">                <span class="keyword">if</span> (checkUser(u.getUserId(), u.getPasswd())) &#123;</span><br><span class="line">                    message.setMesType(MessageType.MESSAGE_LOGIN_SUCCEED);</span><br><span class="line">                    <span class="comment">//将message对象回复客户端</span></span><br><span class="line">                    oos.writeObject(message);</span><br><span class="line">                    <span class="comment">//创建一个线程，和客户端保持通信, 该线程需要持有socket对象</span></span><br><span class="line">                    ServerConnectClientThread serverConnectClientThread =</span><br><span class="line">                            <span class="keyword">new</span> ServerConnectClientThread(socket, u.getUserId());</span><br><span class="line">                    <span class="comment">//启动该线程</span></span><br><span class="line">                    serverConnectClientThread.start();</span><br><span class="line">                    <span class="comment">//把该线程对象，放入到一个集合中，进行管理.</span></span><br><span class="line">                    ManageClientThreads.addClientThread(u.getUserId(), serverConnectClientThread);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录失败</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;用户 id=&quot;</span> + u.getUserId() + <span class="string">&quot; pwd=&quot;</span> + u.getPasswd() + <span class="string">&quot; 验证失败&quot;</span>);</span><br><span class="line">                    message.setMesType(MessageType.MESSAGE_LOGIN_FAIL);</span><br><span class="line">                    oos.writeObject(message);</span><br><span class="line">                    <span class="comment">//关闭socket</span></span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//如果服务器退出了while，说明服务器端不在监听，因此关闭ServerSocket</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> ss != <span class="keyword">null</span>;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>QQFrame</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQServe.qqframe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqserver.QQServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> QQFrame</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 该类创建QQServer ,启动后台的服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> QQServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-4-2-QQClient"><a href="#7-4-2-QQClient" class="headerlink" title="7.4.2 QQClient"></a>7.4.2 QQClient</h3><p><strong>UserClientService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> UserClientService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 该类完成用户登录验证和用户注册等功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为我们可能在其他地方用使用user信息, 因此作出成员属性</span></span><br><span class="line">    <span class="keyword">private</span> User u = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="comment">//因为Socket在其它地方也可能使用，因此作出属性</span></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据userId 和 pwd 到服务器验证该用户是否合法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUser</span><span class="params">(String userId, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//创建User对象</span></span><br><span class="line">        u.setUserId(userId);</span><br><span class="line">        u.setPasswd(pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到服务端，发送u对象</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//得到ObjectOutputStream对象</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="comment">//发送User对象</span></span><br><span class="line">            oos.writeObject(u);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取从服务器回复的Message对象</span></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            Message ms = (Message) ois.readObject();</span><br><span class="line">            <span class="comment">//登录OK</span></span><br><span class="line">            <span class="keyword">if</span> (ms.getMesType().equals(MessageType.MESSAGE_LOGIN_SUCCEED)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//创建一个和服务器端保持通信的线程-&gt; 创建一个类 ClientConnectServerThread</span></span><br><span class="line">                ClientConnectServerThread clientConnectServerThread =</span><br><span class="line">                        <span class="keyword">new</span> ClientConnectServerThread(socket);</span><br><span class="line">                <span class="comment">//启动客户端的线程</span></span><br><span class="line">                clientConnectServerThread.start();</span><br><span class="line">                <span class="comment">//这里为了后面客户端的扩展，我们将线程放入到集合管理</span></span><br><span class="line">                ManageClientConnectServerThread.addClientConnectServerThread(userId, clientConnectServerThread);</span><br><span class="line">                b = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果登录失败, 我们就不能启动和服务器通信的线程, 关闭socket</span></span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器端请求在线用户列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onlineFriendList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送一个Message , 类型MESSAGE_GET_ONLINE_FRIEND</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setMesType(MessageType.MESSAGE_GET_ONLINE_FRIEND);</span><br><span class="line">        message.setSender(u.getUserId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送给服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从管理线程的集合中，通过userId, 得到这个线程对象</span></span><br><span class="line">            ClientConnectServerThread clientConnectServerThread =</span><br><span class="line">                    ManageClientConnectServerThread.getClientConnectServerThread(u.getUserId());</span><br><span class="line">            <span class="comment">//通过这个线程得到关联的socket</span></span><br><span class="line">            Socket socket = clientConnectServerThread.getSocket();</span><br><span class="line">            <span class="comment">//得到当前线程的Socket 对应的 ObjectOutputStream对象</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="comment">//发送一个Message对象，向服务端要求在线用户列表</span></span><br><span class="line">            oos.writeObject(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写方法，退出客户端，并给服务端发送一个退出系统的message对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setMesType(MessageType.MESSAGE_CLIENT_EXIT);</span><br><span class="line">        <span class="comment">//一定要指定我是哪个客户端id</span></span><br><span class="line">        message.setSender(u.getUserId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送message</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream(ManageClientConnectServerThread.getClientConnectServerThread(u.getUserId()).getSocket().getOutputStream());</span><br><span class="line">            oos.writeObject(message);</span><br><span class="line">            System.out.println(u.getUserId() + <span class="string">&quot; 退出系统 &quot;</span>);</span><br><span class="line">            <span class="comment">//结束进程</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MessageClientService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MessageClientService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 私聊实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageClientService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> senderId 发送者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToAll</span><span class="params">(String content, String senderId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建message</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setMesType(MessageType.MESSAGE_TO_ALL_MES);<span class="comment">//群发消息这种类型</span></span><br><span class="line">        message.setSender(senderId);</span><br><span class="line">        message.setContent(content);</span><br><span class="line">        message.setSendTime(<span class="keyword">new</span> Date().toString());<span class="comment">//发送时间设置到message对象</span></span><br><span class="line">        System.out.println(senderId + <span class="string">&quot; 对大家说 &quot;</span> + content);</span><br><span class="line">        <span class="comment">//发送给服务端</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream(ManageClientConnectServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());</span><br><span class="line">            oos.writeObject(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> senderId 发送用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getterId 接收用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToOne</span><span class="params">(String content, String senderId, String getterId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建message</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        <span class="comment">//普通的聊天消息这种类型</span></span><br><span class="line">        message.setMesType(MessageType.MESSAGE_COMM_MES);</span><br><span class="line">        message.setSender(senderId);</span><br><span class="line">        message.setGetter(getterId);</span><br><span class="line">        message.setContent(content);</span><br><span class="line">        <span class="comment">//发送时间设置到message对象</span></span><br><span class="line">        message.setSendTime(<span class="keyword">new</span> Date().toString());</span><br><span class="line">        System.out.println(senderId + <span class="string">&quot; 对 &quot;</span> + getterId + <span class="string">&quot; 说 &quot;</span> + content);</span><br><span class="line">        <span class="comment">//发送给服务端</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream(ManageClientConnectServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());</span><br><span class="line">            oos.writeObject(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FileClientService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileClientService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 文件传输类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileClientService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src      源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest     把该文件传输到对方的哪个目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> senderId 发送用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getterId 接收用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFileToOne</span><span class="params">(String src, String dest, String senderId, String getterId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取src文件  --&gt;  message</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setMesType(MessageType.MESSAGE_FILE_MES);</span><br><span class="line">        message.setSender(senderId);</span><br><span class="line">        message.setGetter(getterId);</span><br><span class="line">        message.setSrc(src);</span><br><span class="line">        message.setDest(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要将文件读取</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取文件的长度 写入字节数组中</span></span><br><span class="line">        <span class="keyword">byte</span>[] fileBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) <span class="keyword">new</span> File(src).length()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">            <span class="comment">//将src文件读入到程序的字节数组</span></span><br><span class="line">            fileInputStream.read(fileBytes);</span><br><span class="line">            <span class="comment">//将文件对应的字节数组设置message</span></span><br><span class="line">            message.setFileBytes(fileBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提示信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + senderId + <span class="string">&quot; 给 &quot;</span> + getterId + <span class="string">&quot; 发送文件: &quot;</span> + src</span><br><span class="line">                + <span class="string">&quot; 到对方的电脑的目录 &quot;</span> + dest);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos =</span><br><span class="line">                    <span class="keyword">new</span> ObjectOutputStream(ManageClientConnectServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());</span><br><span class="line">            oos.writeObject(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ClientConnectServerThread</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.Message;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.qqcommon.MessageType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ClientConnectServerThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientConnectServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该线程需要持有Socket</span></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器可以接受一个Socket对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientConnectServerThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为Thread需要在后台和服务器通信，因此我们while循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端线程，等待从读取从服务器端发送的消息&quot;</span>);</span><br><span class="line">                ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                <span class="comment">//如果服务器没有发送Message对象,线程会阻塞在这里</span></span><br><span class="line">                Message message = (Message) ois.readObject();</span><br><span class="line">                <span class="comment">//注意，后面我们需要去使用message</span></span><br><span class="line">                <span class="comment">//判断这个message类型，然后做相应的业务处理</span></span><br><span class="line">                <span class="comment">//如果是读取到的是 服务端返回的在线用户列表</span></span><br><span class="line">                <span class="keyword">if</span> (message.getMesType().equals(MessageType.MESSAGE_RET_ONLINE_FRIEND)) &#123;</span><br><span class="line">                    <span class="comment">//取出在线列表信息，并显示</span></span><br><span class="line">                    <span class="comment">//规定</span></span><br><span class="line">                    String[] onlineUsers = message.getContent().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;\n=======当前在线用户列表========&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; onlineUsers.length; i++) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;用户: &quot;</span> + onlineUsers[i]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMesType().equals(MessageType.MESSAGE_COMM_MES)) &#123;<span class="comment">//普通的聊天消息</span></span><br><span class="line">                    <span class="comment">//把从服务器转发的消息，显示到控制台即可</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;\n&quot;</span> + message.getSender()</span><br><span class="line">                            + <span class="string">&quot; 对 &quot;</span> + message.getGetter() + <span class="string">&quot; 说: &quot;</span> + message.getContent());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMesType().equals(MessageType.MESSAGE_TO_ALL_MES)) &#123;</span><br><span class="line">                    <span class="comment">//显示在客户端的控制台</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;\n&quot;</span> + message.getSender() + <span class="string">&quot; 对大家说: &quot;</span> + message.getContent());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.getMesType().equals(MessageType.MESSAGE_FILE_MES)) &#123;<span class="comment">//如果是文件消息</span></span><br><span class="line">                    <span class="comment">//让用户指定保存路径。。。</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;\n&quot;</span> + message.getSender() + <span class="string">&quot; 给 &quot;</span> + message.getGetter()</span><br><span class="line">                            + <span class="string">&quot; 发文件: &quot;</span> + message.getSrc() + <span class="string">&quot; 到我的电脑的目录 &quot;</span> + message.getDest());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//取出message的文件字节数组，通过文件输出流写出到磁盘</span></span><br><span class="line">                    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(message.getDest(), <span class="keyword">true</span>);</span><br><span class="line">                    fileOutputStream.write(message.getFileBytes());</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;\n 保存文件成功~&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;是其他类型的message, 暂时不处理....&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了更方便的得到Socket</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ManageClientConnectServerThread</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ManageClientConnectServerThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 线程客户端管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageClientConnectServerThread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们把多个线程放入一个HashMap集合，key 就是用户id, value 就是线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, ClientConnectServerThread&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将某个线程加入到集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addClientConnectServerThread</span><span class="params">(String userId, ClientConnectServerThread clientConnectServerThread)</span> </span>&#123;</span><br><span class="line">        hm.put(userId, clientConnectServerThread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过userId 可以得到对应线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientConnectServerThread <span class="title">getClientConnectServerThread</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hm.get(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>QQView</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.Intelnet.QQClient.views;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQClient.service.FileClientService;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQClient.service.MessageClientService;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQClient.service.UserClientService;</span><br><span class="line"><span class="keyword">import</span> com.zhuang.Intelnet.QQServe.utils.Utility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> QQView</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> QQ客户端启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/8 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQView</span> </span>&#123;</span><br><span class="line">     <span class="comment">//控制是否显示菜单</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 接收用户的键盘输入</span></span><br><span class="line">    <span class="keyword">private</span> String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//对象是用于登录服务/注册用户</span></span><br><span class="line">    <span class="keyword">private</span> UserClientService userClientService = <span class="keyword">new</span> UserClientService();</span><br><span class="line">    <span class="comment">//对象用户私聊/群聊.</span></span><br><span class="line">    <span class="keyword">private</span> MessageClientService messageClientService = <span class="keyword">new</span> MessageClientService();</span><br><span class="line">    <span class="comment">//该对象用户传输文件</span></span><br><span class="line">    <span class="keyword">private</span> FileClientService fileClientService = <span class="keyword">new</span> FileClientService();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> QQView().mainMenu();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出系统.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示主菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;===========欢迎登录网络通信系统===========&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t 1 登录系统&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t 9 退出系统&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入你的选择: &quot;</span>);</span><br><span class="line">            key = Utility.readString(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据用户的输入，来处理不同的逻辑</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;请输入用户号: &quot;</span>);</span><br><span class="line">                    String userId = Utility.readString(<span class="number">50</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;请输入密  码: &quot;</span>);</span><br><span class="line">                    String pwd = Utility.readString(<span class="number">50</span>);</span><br><span class="line">                    <span class="comment">//需要到服务端去验证该用户是否合法</span></span><br><span class="line">                    <span class="keyword">if</span> (userClientService.checkUser(userId, pwd)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;===========欢迎 (用户 &quot;</span> + userId + <span class="string">&quot; 登录成功) ===========&quot;</span>);</span><br><span class="line">                        <span class="comment">//进入到二级菜单</span></span><br><span class="line">                        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;\n=========网络通信系统二级菜单(用户 &quot;</span> + userId + <span class="string">&quot; )=======&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;\t\t 1 显示在线用户列表&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;\t\t 2 群发消息&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;\t\t 3 私聊消息&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;\t\t 4 发送文件&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;\t\t 9 退出系统&quot;</span>);</span><br><span class="line">                            System.out.print(<span class="string">&quot;请输入你的选择: &quot;</span>);</span><br><span class="line">                            key = Utility.readString(<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                                    <span class="comment">//写一个方法，来获取在线用户列表</span></span><br><span class="line">                                    userClientService.onlineFriendList();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                                    System.out.println(<span class="string">&quot;请输入想对大家说的话: &quot;</span>);</span><br><span class="line">                                    String s = Utility.readString(<span class="number">100</span>);</span><br><span class="line">                                    messageClientService.sendMessageToAll(s, userId);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                                    System.out.print(<span class="string">&quot;请输入想聊天的用户号(在线): &quot;</span>);</span><br><span class="line">                                    String getterId = Utility.readString(<span class="number">50</span>);</span><br><span class="line">                                    System.out.print(<span class="string">&quot;请输入想说的话: &quot;</span>);</span><br><span class="line">                                    String content = Utility.readString(<span class="number">100</span>);</span><br><span class="line">                                    <span class="comment">//编写一个方法，将消息发送给服务器端</span></span><br><span class="line">                                    messageClientService.sendMessageToOne(content, userId, getterId);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                                    System.out.print(<span class="string">&quot;请输入你想把文件发送给的用户(在线用户): &quot;</span>);</span><br><span class="line">                                    getterId = Utility.readString(<span class="number">50</span>);</span><br><span class="line">                                    System.out.print(<span class="string">&quot;请输入发送文件的路径(形式 d:\\xx.jpg)&quot;</span>);</span><br><span class="line">                                    String src = Utility.readString(<span class="number">100</span>);</span><br><span class="line">                                    System.out.print(<span class="string">&quot;请输入把文件发送到对应的路径(形式 d:\\yy.jpg)&quot;</span>);</span><br><span class="line">                                    String dest = Utility.readString(<span class="number">100</span>);</span><br><span class="line">                                    fileClientService.sendFileToOne(src,dest,userId,getterId);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                                    <span class="comment">//调用方法，给服务器发送一个退出系统的message</span></span><br><span class="line">                                    userClientService.logout();</span><br><span class="line">                                    loop = <span class="keyword">false</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//登录服务器失败</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;=========登录失败=========&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-3-简单测试一下"><a href="#7-4-3-简单测试一下" class="headerlink" title="7.4.3 简单测试一下"></a>7.4.3 简单测试一下</h3><p><a href="https://imgtu.com/i/2y3neA"><img src="https://z3.ax1x.com/2021/06/09/2y3neA.png" alt="2y3neA.png"></a><br><a href="https://imgtu.com/i/2y3udI"><img src="https://z3.ax1x.com/2021/06/09/2y3udI.png" alt="2y3udI.png"></a><br><a href="https://imgtu.com/i/2y3eLd"><img src="https://z3.ax1x.com/2021/06/09/2y3eLd.png" alt="2y3eLd.png"></a></p>
<p><strong>总结</strong></p>
<ul>
<li>网络编程有难度，还需要多反复巩固</li>
<li>基础要扎实，项目才能熟练</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaIO流学习笔记</title>
    <url>/2021/01/08/JavaIO%E6%B5%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JavaIO流学习笔记"><a href="#JavaIO流学习笔记" class="headerlink" title="JavaIO流学习笔记"></a>JavaIO流学习笔记</h1><p><strong>写在前面</strong></p>
<p><strong>学习地址：</strong></p>
<p><a href="https://www.bilibili.com/video/BV15B4y1u7Rn">【韩顺平讲Java】Java IO流专题</a></p>
<p><strong>感谢韩老师的讲解视频，十分感谢！！！</strong></p>
<p><strong>先上思维导图</strong></p>
<p><strong>流的分类一览</strong></p>
<p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/mind.jpg" alt="mind"></p>
<h1 id="1-文件的基本概念"><a href="#1-文件的基本概念" class="headerlink" title="1. 文件的基本概念"></a>1. 文件的基本概念</h1><h2 id="1-1-文件流"><a href="#1-1-文件流" class="headerlink" title="1.1 文件流"></a>1.1 文件流</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-30-42.png"></p>
<h1 id="2-创建文件"><a href="#2-创建文件" class="headerlink" title="2. 创建文件"></a>2. 创建文件</h1><h2 id="2-1通过三个方法创建文件"><a href="#2-1通过三个方法创建文件" class="headerlink" title="2.1通过三个方法创建文件"></a>2.1通过三个方法创建文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileCreate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示创建文件的3种方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 19:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCreate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//  create01();</span></span><br><span class="line">        create03();</span><br><span class="line">      <span class="comment">//  create02();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式1 new File(String pathname)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\a.txt&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////方式 2 new File(File parent,String child) //根据父目录文件+子路径构建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File parentFile = <span class="keyword">new</span> File(<span class="string">&quot;f:\\&quot;</span>);</span><br><span class="line">        String fileName=<span class="string">&quot;b.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(parentFile, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式 3 new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File parentPath = <span class="keyword">new</span> File(<span class="string">&quot;f:\\&quot;</span>);</span><br><span class="line">        String fileName=<span class="string">&quot;c.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(parentPath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-获取文件的信息"><a href="#2-2-获取文件的信息" class="headerlink" title="2.2 获取文件的信息"></a>2.2 获取文件的信息</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-35-33.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileInformation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取文件的相关信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 19:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInformation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先创建文件对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;f:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line">        <span class="comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录=&quot;</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="comment">//F</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-IO流原理及流的分类"><a href="#3-IO流原理及流的分类" class="headerlink" title="3. IO流原理及流的分类"></a>3. IO流原理及流的分类</h1><h2 id="3-1-JavaIO流原理"><a href="#3-1-JavaIO流原理" class="headerlink" title="3.1 JavaIO流原理"></a>3.1 JavaIO流原理</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-38-26.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-38-42.png" alt="Snipaste_2021-05-29_21-38-42"></p>
<h2 id="3-2-流的分类"><a href="#3-2-流的分类" class="headerlink" title="3.2 流的分类"></a>3.2 流的分类</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-39-06.png"></p>
<h1 id="4-IO流体系图-常用的类"><a href="#4-IO流体系图-常用的类" class="headerlink" title="4. IO流体系图-常用的类"></a>4. IO流体系图-常用的类</h1><h1 id="5-FileInputStream"><a href="#5-FileInputStream" class="headerlink" title="5.FileInputStream"></a>5.FileInputStream</h1><p>FileInputStream 读取 a.txt 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileInputStream_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示 FileInputStream 的使用(字节输入流 文件--&gt; 程序)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 20:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStream_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//  readFile01();</span></span><br><span class="line">        readFile02();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建fileInputStream对象 用于读取文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从该输入流读取一个字节的数据，如果没有输入可用，返回-1 表示读取完毕</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) readData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用 read(byte[] b) 读取文件，提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String filePath = <span class="string">&quot;f:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从输入流最多读取b.length字节的数据到字节数组  返回-1 读取完毕</span></span><br><span class="line"><span class="comment">            读取正常 返回实际读取的字节数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> String(buf, <span class="number">0</span>, readData));<span class="comment">//显示</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="6-FileOutputStream"><a href="#6-FileOutputStream" class="headerlink" title="6. FileOutputStream"></a>6. FileOutputStream</h1><h2 id="6-1-用FileOutputStream读取文件"><a href="#6-1-用FileOutputStream读取文件" class="headerlink" title="6.1 用FileOutputStream读取文件"></a>6.1 用FileOutputStream读取文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileOutputStream01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示使用 FileOutputStream 将数据写到文件中, * 如果该文件不存在，则创建该文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 20:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStream01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        writeFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\d.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span></span><br><span class="line">           <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span></span><br><span class="line">            fileOutputStream=<span class="keyword">new</span> FileOutputStream(filePath,<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//写入一个字节</span></span><br><span class="line">            fileOutputStream.write(<span class="string">&#x27;K&#x27;</span>);</span><br><span class="line">            <span class="comment">//写入字符串</span></span><br><span class="line">            String str=<span class="string">&quot;kangxiaozhuang&quot;</span>;</span><br><span class="line">            <span class="comment">//转为字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">//按照编码的形式写入文件中</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            write(byte[] b, int off, int len)</span></span><br><span class="line"><span class="comment">            将 len 字节从位于偏移量 off 的指定字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;写入文件成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;写入文件失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-文件拷贝"><a href="#6-2-文件拷贝" class="headerlink" title="6.2 文件拷贝"></a>6.2 文件拷贝</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileCopy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 文件拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 20:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        copyFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建输入流和输出流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String srcFilePath = <span class="string">&quot;f:\\1.jpg&quot;</span>;</span><br><span class="line">        String desFilePath = <span class="string">&quot;f:\\2.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFilePath);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(desFilePath);</span><br><span class="line">            <span class="comment">//定义字节数组 提高读取效果</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> readLen=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((readLen=fis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//一边读一边写</span></span><br><span class="line">                fos.write(buf, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件拷贝成功！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-FileReader-和-FileWriter"><a href="#7-FileReader-和-FileWriter" class="headerlink" title="7. FileReader 和 FileWriter"></a>7. FileReader 和 FileWriter</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-55-47.png"></p>
<h2 id="7-1-FileReader方法"><a href="#7-1-FileReader方法" class="headerlink" title="7.1 FileReader方法"></a>7.1 FileReader方法</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-57-54.png"></p>
<h2 id="7-2-FileWriter方法"><a href="#7-2-FileWriter方法" class="headerlink" title="7.2 FileWriter方法"></a>7.2 FileWriter方法</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_21-58-01.png"></p>
<h2 id="7-3-FileReader读取文件"><a href="#7-3-FileReader读取文件" class="headerlink" title="7.3 FileReader读取文件"></a>7.3 FileReader读取文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileReader_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FileReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 21:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReader_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">// readFile01();</span></span><br><span class="line">        readFile02();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\d.txt&quot;</span>;</span><br><span class="line">        FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. 创建 FileReader 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">        <span class="comment">//循环读取 使用 read, 单个字符读取</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符数组读取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===readFile02===&quot;</span>);</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\d.txt&quot;</span>;</span><br><span class="line">        FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> readLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//1. 创建 FileReader 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">        <span class="comment">//循环读取 使用 read(buf), 返回的是实际读取到的字符数</span></span><br><span class="line">        <span class="comment">//如果返回-1, 说明到文件结束</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> String(buf, <span class="number">0</span>, readLen));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## 7.4 FileWriter写入文件</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> FileWriter_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 20:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriter_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\note.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建 FileWriter 对象</span></span><br><span class="line">        FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(filePath);<span class="comment">//默认是覆盖写入</span></span><br><span class="line">        <span class="comment">// 3) write(int):写入单个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        <span class="comment">// 4) write(char[]):写入指定数组</span></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line">        <span class="comment">// 5) write(char[],off,len):写入指定数组的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;康小庄2333&quot;</span>.toCharArray(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 6) write（string）：写入整个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot; 你好北京~&quot;</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;风雨之后，定见彩虹&quot;</span>);</span><br><span class="line">            <span class="comment">// 7) write(string,off,len):写入字符串的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海天津&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//在数据量大的情况下，可以使用循环操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;写入文件成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//一定要关闭流 才能写入数据</span></span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="8-节点流和处理流"><a href="#8-节点流和处理流" class="headerlink" title="8. 节点流和处理流"></a>8. 节点流和处理流</h1><h2 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_22-03-47.png"></p>
<h2 id="8-2-节点流和处理流一览图"><a href="#8-2-节点流和处理流一览图" class="headerlink" title="8.2 节点流和处理流一览图"></a>8.2 节点流和处理流一览图</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/JavaIO%E6%B5%81%E5%9B%BE%E7%89%87/Snipaste_2021-05-29_22-04-45.png"></p>
<h2 id="8-3-节点流和处理流的区别和联系"><a href="#8-3-节点流和处理流的区别和联系" class="headerlink" title="8.3 节点流和处理流的区别和联系"></a>8.3 节点流和处理流的区别和联系</h2><ul>
<li>节点流是底层流/低级流，直接跟数据源相接</li>
<li>处理流(包装流)包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li>
</ul>
<h2 id="8-4-处理流的功能"><a href="#8-4-处理流的功能" class="headerlink" title="8.4 处理流的功能"></a>8.4 处理流的功能</h2><ul>
<li><p>1．性能的提高:主要以增加缓冲的方式来提高输入输出的效率。</p>
</li>
<li><p>2．操作的便捷:处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便</p>
</li>
</ul>
<h1 id="9-处理流-BufferedReader-和-BufferedWriter"><a href="#9-处理流-BufferedReader-和-BufferedWriter" class="headerlink" title="9. 处理流-BufferedReader 和 BufferedWriter"></a>9. 处理流-BufferedReader 和 BufferedWriter</h1><h2 id="9-1-BufferedReader的使用"><a href="#9-1-BufferedReader的使用" class="headerlink" title="9.1 BufferedReader的使用"></a>9.1 BufferedReader的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BufferedReader_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> * 演示 bufferedReader 使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 20:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReader_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\note.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BufferedReader</span></span><br><span class="line">        BufferedReader  bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//按行读取 效率高</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="comment">//1. bufferedReader.readLine() 是按行读取文件</span></span><br><span class="line">            <span class="comment">//2. 当返回 null 时，表示文件读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">// 关闭流, 这里注意，只需要关闭 BufferedReader ，因为底层会自动的去关闭 节点流</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-2-BufferedWriter的使用"><a href="#9-2-BufferedWriter的使用" class="headerlink" title="9.2 BufferedWriter的使用"></a>9.2 BufferedWriter的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BufferedWriter_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示 BufferedWriter 的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 21:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriter_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\ok.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建 BufferedWriter</span></span><br><span class="line">        <span class="comment">//说明:</span></span><br><span class="line">        <span class="comment">//1. new FileWriter(filePath, true) 表示以追加的方式写入</span></span><br><span class="line">        <span class="comment">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(filePath));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, 康小庄!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个和系统相关的换行</span></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello2, 康小庄!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello3, 康小庄!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;写入文件成功！&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-拷贝文件"><a href="#9-3-拷贝文件" class="headerlink" title="9.3 拷贝文件"></a>9.3 拷贝文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BufferedCopy_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/29 21:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedCopy_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String srcFilePath = <span class="string">&quot;f:\\1.jpg&quot;</span>;</span><br><span class="line">        String desFilePath=<span class="string">&quot;f:\\3.jpg&quot;</span>;</span><br><span class="line">        BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//定义行</span></span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(srcFilePath));</span><br><span class="line">            bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(desFilePath));</span><br><span class="line">            <span class="keyword">while</span> ((line= br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                bw.write(line);</span><br><span class="line">                <span class="comment">//插入新的换行</span></span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用BufferedOutputStream写入文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BufferedCopy2_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  演示使用 BufferedOutputStream 和 BufferedInputStream 使用 完成文件的拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 14:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedCopy2_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String srcFilePath = <span class="string">&quot;f:\\a.txt&quot;</span>;</span><br><span class="line">        String destFilePath = <span class="string">&quot;f:\\a2.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建 BufferedOutputStream 对象 BufferedInputStream 对象</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//因为 FileInputStream 是 InputStream 子类</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFilePath));</span><br><span class="line">         bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFilePath));</span><br><span class="line">        <span class="comment">//循环的读取文件，并写入到 destFilePath</span></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readLen = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件拷贝完毕~~~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-对象流-ObjectInputStream-和-ObjectOutputStream"><a href="#10-对象流-ObjectInputStream-和-ObjectOutputStream" class="headerlink" title="10. 对象流-ObjectInputStream 和 ObjectOutputStream"></a>10. 对象流-ObjectInputStream 和 ObjectOutputStream</h1><p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531170403674.png" alt="image-20210531170403674"></p>
<h2 id="10-1-对象流的介绍"><a href="#10-1-对象流的介绍" class="headerlink" title="10.1 对象流的介绍"></a>10.1 对象流的介绍</h2><p>功能：提供了对基本类型或对象类型的序列化和反序列化的方法 </p>
<ul>
<li><p>ObjectOutputStream 提供 序列化功能 </p>
</li>
<li><p>ObjectInputStream 提供 反序列化功能</p>
</li>
</ul>
<p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531170512989.png" alt="image-20210531170512989"></p>
<p><strong>实现序列化的操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ObjectOutStream_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ObjectOutStream实现序列化操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 14:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutStream_</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span></span><br><span class="line">        String filePath = <span class="string">&quot;f:\\data.dat&quot;</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(filePath));</span><br><span class="line">        <span class="comment">//序列化数据到 f:\data.dat</span></span><br><span class="line">        oos.writeInt(<span class="number">100</span>);<span class="comment">// int -&gt; Integer (实现了 Serializable)</span></span><br><span class="line">        oos.writeBoolean(<span class="keyword">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了 Serializable)</span></span><br><span class="line">        oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了 Serializable)</span></span><br><span class="line">        oos.writeDouble(<span class="number">9.5</span>);<span class="comment">// double -&gt; Double (实现了 Serializable)</span></span><br><span class="line">        oos.writeUTF(<span class="string">&quot;康小庄&quot;</span>);<span class="comment">//String</span></span><br><span class="line">        <span class="comment">//保存一个 dog 对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Dog(<span class="string">&quot;旺财&quot;</span>, <span class="number">10</span>, <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;白色&quot;</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据保存完毕(序列化形式)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现反序列化的操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ObjectInputStream_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ObjectInputStream实现反序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 15:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建流对象</span></span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;f:\\data.dat&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.读取， 注意顺序</span></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readBoolean());</span><br><span class="line">        System.out.println(ois.readChar());</span><br><span class="line">        System.out.println(ois.readDouble());</span><br><span class="line">        System.out.println(ois.readUTF());</span><br><span class="line">        <span class="comment">// 3.关闭</span></span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;以反序列化的方式读取(恢复)ok~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作注意事项</strong></p>
<p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531170735820.png" alt="image-20210531170735820"></p>
<h1 id="11-转换流-InputStreamReader-和-OutputStreamWriter"><a href="#11-转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="11. 转换流-InputStreamReader 和 OutputStreamWriter"></a>11. 转换流-InputStreamReader 和 OutputStreamWriter</h1><p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531170838279.png" alt="image-20210531170838279"></p>
<p><strong>使用InputStreamReader读取内容 并指定编码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> InputStreamReader_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> InputStreamReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 15:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReader_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 把 FileInputStream 转成 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2. 指定编码 gbk</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span></span><br><span class="line">        <span class="comment">//3. 把 InputStreamReader 传入 BufferedReader</span></span><br><span class="line">        <span class="comment">//BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        <span class="comment">//将 2 和 3 合在一起</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        <span class="comment">//4. 读取</span></span><br><span class="line">        String s = br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容=&quot;</span> + s);</span><br><span class="line">        <span class="comment">//5. 关闭外层流</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="12-打印流-PrintStream-和-PrintWriter"><a href="#12-打印流-PrintStream-和-PrintWriter" class="headerlink" title="12. 打印流-PrintStream 和 PrintWriter"></a>12. 打印流-PrintStream 和 PrintWriter</h1><p><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531171119302.png" alt="image-20210531171119302"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> PrintStream_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 演示 PrintStream （字节打印流/输出流）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 15:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStream_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintStream out = System.out;</span><br><span class="line">        <span class="comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span></span><br><span class="line">        out.println(<span class="string">&quot;zk666&quot;</span>);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="13-Properties类"><a href="#13-Properties类" class="headerlink" title="13. Properties类"></a>13. Properties类</h1><p><strong>我们一般用xxx.properties用作配置文件 是以K-V键值对的形式</strong></p>
<p><strong>常用方法</strong><br><img src="http://qtwu22ub9.hn-bkt.clouddn.com/img/image-20210531171526982.png" alt="image-20210531171526982"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Properties01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Properties类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 16:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//读取 mysql.properties 文件，并得到 ip, user 和 pwd</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;f:\\mysql.properties&quot;</span>));</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">//循环读取</span></span><br><span class="line">            String[] split = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们要求指定的 ip 值</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;ip&quot;</span>.equals(split[<span class="number">0</span>])) &#123;</span><br><span class="line">                System.out.println(split[<span class="number">0</span>] + <span class="string">&quot;值是: &quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>来读取文件并显示出来</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Properties02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Properties02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 16:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用 Properties 类来读取 mysql.properties 文件</span></span><br><span class="line"><span class="comment">//1. 创建 Properties 对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;f:\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//3. 把 k-v 显示控制台</span></span><br><span class="line">        properties.list(System.out);</span><br><span class="line"><span class="comment">//4. 根据 key 获取对应的值</span></span><br><span class="line">        String user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String pwd = properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        String ip = properties.getProperty(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;IP是=&quot;</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="14-练习"><a href="#14-练习" class="headerlink" title="14. 练习"></a>14. 练习</h1><h2 id="14-1-练习1"><a href="#14-1-练习1" class="headerlink" title="14.1 练习1"></a>14.1 练习1</h2><blockquote>
<p>判断是否存在目录 不存在就创建 并在目录中创建文件 ，写入一点数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HomeWork01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 16:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeWork01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String dirPath = <span class="string">&quot;f:\\mytemp&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.mkdirs()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建&quot;</span> + dirPath + <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建&quot;</span> + dirPath + <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String filePath = dirPath + <span class="string">&quot;\\hello.txt&quot;</span>;</span><br><span class="line">        file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">                BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</span><br><span class="line">                bw.write(<span class="string">&quot;哈哈哈！！！&quot;</span>);</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(filePath + <span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已经存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-2-练习2"><a href="#14-2-练习2" class="headerlink" title="14.2 练习2"></a>14.2 练习2</h2><blockquote>
<p>写一个properties文件 ，读取文件的内容，并将文件的内容序列化到任意文件中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.HomeWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HomeWork02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HomeWork02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/31 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeWork02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;f:\\dog.properties&quot;</span>;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line"></span><br><span class="line">        String name = (String) properties.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(properties.get(<span class="string">&quot;age&quot;</span>)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        String color = (String) properties.get(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(name, age, color);</span><br><span class="line">        System.out.println(dog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将信息序列化进文件中</span></span><br><span class="line">        String filePath2=<span class="string">&quot;f:\\a2.txt&quot;</span>;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(filePath2));</span><br><span class="line">        oos.writeObject(dog);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;写入文件成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>纸上得来终觉浅，绝知此事要躬行</strong></p>
<p><strong>若有错误，还请各位指出错误，及时更改！</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2021/01/05/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p><strong>写在前面</strong></p>
<p><strong>学习地址：</strong></p>
<p><strong><a href="https://www.bilibili.com/video/BV1YA411T76k">[韩顺平讲Java]Java集合专题 </a></strong></p>
<p><strong>感谢韩老师的讲解视频，十分感谢！！！</strong></p>
<p><strong>先上思维导图</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/mind.jpg"></p>
<h1 id="1-集合的种类"><a href="#1-集合的种类" class="headerlink" title="1. 集合的种类"></a>1. 集合的种类</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-13-01.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-13-06.png" alt="Snipaste_2021-05-24_22-13-06"></p>
<ul>
<li>集合主要是两组(单列集合 , 双列集合)</li>
<li>Collection 接口有两个重要的子接口 List Set , 他们的实现子类都是单列集合 </li>
<li>Map 接口的实现子类 是双列集合，存放的 K-V</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 认识集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 20:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        arrayList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(<span class="string">&quot;NO1&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;NO2&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(arrayList.toString());</span><br><span class="line">        System.out.println(hashMap.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-集合常用方法"><a href="#2-集合常用方法" class="headerlink" title="2. 集合常用方法"></a>2. 集合常用方法</h1><p>这里讲解常用的方法 具体的方法可以参考Java API</p>
<ul>
<li>add()</li>
<li>remove()</li>
<li>contains()</li>
<li>size()</li>
<li>isEmpty()</li>
<li>addAll()</li>
<li>containsAll()</li>
<li>removeAll()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> CollectionMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 集合常用的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">// add:添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// remove:删除指定元素</span></span><br><span class="line">        <span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">        list.remove(<span class="keyword">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// contains:查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line">        <span class="comment">// size:获取元素个数</span></span><br><span class="line">        System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line">        <span class="comment">// isEmpty:判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line">        <span class="comment">// clear:清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// addAll:添加多个元素</span></span><br><span class="line">        ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// containsAll:查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line">        <span class="comment">// removeAll：删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-17-45.png"></p>
<h1 id="3-迭代器的使用"><a href="#3-迭代器的使用" class="headerlink" title="3. 迭代器的使用"></a>3. 迭代器的使用</h1><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-18-24.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-18-42.png" alt="Snipaste_2021-05-24_22-18-42"></p>
<p>常用方法</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-19-31.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.print.Book;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> CollectionIterator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 迭代器的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Book(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object obj =  iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span>+obj);</span><br><span class="line">        &#125;</span><br><span class="line">                iterator = list.iterator();<span class="comment">//注意 第二次遍历 需要重新获取iteartor</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===第二次遍历===&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String author;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, String author, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.author = author;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> author;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.author = author;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-21-58.png"></p>
<p><strong>增强for循环遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> CollectionExercise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 集合练习</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionExercise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> Dog(<span class="string">&quot;小黑&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Dog(<span class="string">&quot;大黄&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Dog(<span class="string">&quot;大壮&quot;</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;增强for遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object item : list) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;迭代器遍历&quot;</span>);</span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object next =  iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-25-18.png"></p>
<h1 id="4-List的常用方法"><a href="#4-List的常用方法" class="headerlink" title="4. List的常用方法"></a>4. List的常用方法</h1><ul>
<li>add 方法 往集合末尾添加一个元素</li>
<li>void add(int index, Object ele):在 index 位置插入 ele 元素</li>
<li>boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</li>
<li>Object get(int index):获取指定 index 位置的元素</li>
<li>int indexOf(Object obj):返回 obj 在集合中首次出现的位置</li>
<li>int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</li>
<li>Object remove(int index):移除指定 index 位置的元素，并返回此元素</li>
<li>Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ListMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> List集合常用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//add 方法 往集合末尾添加一个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;曹操&quot;</span>);</span><br><span class="line">        <span class="comment">// void add(int index, Object ele):在 index 位置插入 ele 元素</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;康小庄&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</span></span><br><span class="line">        ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="string">&quot;诸葛亮&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;关羽&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Object get(int index):获取指定 index 位置的元素</span></span><br><span class="line">        <span class="comment">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;曹操&quot;</span>));<span class="comment">//2</span></span><br><span class="line"><span class="comment">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span></span><br><span class="line">        list.add(<span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;吴用&quot;</span>));</span><br><span class="line"><span class="comment">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换. list.set(1, &quot;玛丽&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-26-49.png"></p>
<h2 id="4-1-List三种遍历方式"><a href="#4-1-List三种遍历方式" class="headerlink" title="4.1 List三种遍历方式"></a>4.1 List三种遍历方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ListFor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> List集合三种遍历方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;水浒传&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===迭代器===&quot;</span>);</span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object next =  iterator.next();</span><br><span class="line">            System.out.println(next.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===增强for===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===普通for循环===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-40-34.png"></p>
<p><strong>练习 遍历按照书的价格排序 使用冒泡排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ListExercise02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> List集合练习</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListExercise02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//List list = new ArrayList();</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List list = new Vector();</span></span><br><span class="line">        list.add(<span class="keyword">new</span> CollectionIterator.Book(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> CollectionIterator.Book(<span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;吴承恩&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> CollectionIterator.Book(<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;施耐庵&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> CollectionIterator.Book(<span class="string">&quot;三国&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">80</span>));</span><br><span class="line">        <span class="comment">//如何对集合进行排序</span></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====排序前====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;====排序后====&quot;</span>);</span><br><span class="line">        sort(list);</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="comment">//价格要求是从小到大  冒泡排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> listSize = list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; listSize - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//取出对象 Book</span></span><br><span class="line">                CollectionIterator.Book book1 = (CollectionIterator.Book) list.get(j);</span><br><span class="line">                CollectionIterator.Book book2 = (CollectionIterator.Book) list.get(j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (book1.getPrice() &gt; book2.getPrice()) &#123;<span class="comment">//交换</span></span><br><span class="line">                    list.set(j, book2);</span><br><span class="line">                    list.set(j + <span class="number">1</span>, book1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-ArrayList底层源码和结构"><a href="#5-ArrayList底层源码和结构" class="headerlink" title="5. ArrayList底层源码和结构"></a>5. ArrayList底层源码和结构</h1><h2 id="5-1-ArrayList的注意事项"><a href="#5-1-ArrayList的注意事项" class="headerlink" title="5.1 ArrayList的注意事项"></a>5.1 ArrayList的注意事项</h2><ul>
<li>ArrayList可以加入多个元素 可以添加<code>null</code></li>
<li>ArrayList是有数组来实现数据存储</li>
<li>ArrayList基本等同于<code>Vector</code> 除了<strong>ArrayList是线程不安全！</strong></li>
</ul>
<h2 id="5-2-ArrayList的底层机制源码分析"><a href="#5-2-ArrayList的底层机制源码分析" class="headerlink" title="5.2 ArrayList的底层机制源码分析"></a>5.2 ArrayList的底层机制源码分析</h2><ul>
<li>ArrayList中维护了一个Object类型的数组<code>elementData</code></li>
<li>当创建ArrayList对象<ul>
<li>使用无参构造，初始<code>elementData</code>容量为0，第一次添加，扩容的<code>elementData</code>为10，<strong>如果需要再次扩容，扩容的<code>elementData</code>为1.5倍</strong></li>
<li>使用指定大小的构造器，初始化<code>elementData</code>为指定大小，<strong>如果需要扩容，直接扩容<code>elementData</code>的1.5倍</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ArrayListSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ArrayList源码分析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 21:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用无参构造器创建 ArrayList 对象</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//ArrayList list = new ArrayList(8);</span></span><br><span class="line">        <span class="comment">//使用 for 给 list 集合添加 1-10 数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用 for 给 list 集合添加 11-15 数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">11</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>debug一把 断点位置</strong></p>
<p><strong>进入方法依次看到下列重要的方法</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-54-19.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-11-34.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-54-56.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_21-56-54.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-00-20.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-00-51.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-02-53.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-05-35.png"></p>
<p><strong>如果指定参数大小的容量</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-24_22-09-32.png"></p>
<h1 id="6-Vector集合"><a href="#6-Vector集合" class="headerlink" title="6. Vector集合"></a>6. Vector集合</h1><h2 id="6-1-Vector集合的基本介绍"><a href="#6-1-Vector集合的基本介绍" class="headerlink" title="6.1 Vector集合的基本介绍"></a>6.1 Vector集合的基本介绍</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-03-03.png"></p>
<p>写个示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Vector_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Vector集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/26 20:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里指定大小为8</span></span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来探究一下源码 debug走起！</p>
<p><strong>断点位置 如下</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-05-04.png"></p>
<ul>
<li>首先是初始化大小</li>
<li>然后是判断容量是否够<ul>
<li>不够就用算法扩容</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_20-55-44.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_20-56-51.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_20-57-24.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_20-58-07.png"></p>
<p><strong>这里扩容的大小是原来的2倍</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-01-55.png"></p>
<h2 id="6-2-Vector-和-ArrayList-的比较"><a href="#6-2-Vector-和-ArrayList-的比较" class="headerlink" title="6.2 Vector 和 ArrayList 的比较"></a>6.2 Vector 和 ArrayList 的比较</h2><table>
<thead>
<tr>
<th></th>
<th>底层结构</th>
<th>版本</th>
<th>线程安全同步(效率)</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td>可变数组</td>
<td>jdk1.2</td>
<td>不安全，效率高</td>
</tr>
<tr>
<td>Vector</td>
<td>可变数组Object[]</td>
<td>jdk1.0</td>
<td>安全，效率不高</td>
</tr>
</tbody></table>
<p><strong>扩容倍数</strong></p>
<ul>
<li>ArrayList<ul>
<li>如果有参构造1.5倍</li>
<li>如果是无参构造<ul>
<li>第一次10</li>
<li>第二次开始按照1.5倍扩容</li>
</ul>
</li>
</ul>
</li>
<li>Vector<ul>
<li>如果是无参 默认是10 满后 按照2倍开始扩容</li>
<li>指定大小，每次按照2倍扩容</li>
</ul>
</li>
</ul>
<h1 id="7-LinkedList集合"><a href="#7-LinkedList集合" class="headerlink" title="7. LinkedList集合"></a>7. LinkedList集合</h1><h2 id="7-1-LinkedList基本介绍"><a href="#7-1-LinkedList基本介绍" class="headerlink" title="7.1 LinkedList基本介绍"></a>7.1 LinkedList基本介绍</h2><ul>
<li>LinkedList底层实现了双向链表和双端队列特点</li>
<li>可以添加任意元素 可以重复，包括null</li>
<li>线程不安全，没有实现同步</li>
</ul>
<h2 id="7-2-LinkedList的底层操作机制"><a href="#7-2-LinkedList的底层操作机制" class="headerlink" title="7.2 LinkedList的底层操作机制"></a>7.2 LinkedList的底层操作机制</h2><ul>
<li>LinkedList底层维护了一个双向链表</li>
<li>LinkedList中维护了两个属性first和last分别指向 首节点和尾节点</li>
<li>每个节点 Node对象 里面又维护了pre next item 三个属性 通过pre指向前一个 通过next指向后一个节点，最终实现双向链表</li>
<li>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-49-16.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> LinkedList01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> LinkedList例子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/26 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟一个简单的双向链表</span></span><br><span class="line">        Node jack = <span class="keyword">new</span> Node(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        Node tom = <span class="keyword">new</span> Node(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        Node kang = <span class="keyword">new</span> Node(<span class="string">&quot;kang&quot;</span>);</span><br><span class="line">        <span class="comment">//连接三个结点，形成双向链表</span></span><br><span class="line">        <span class="comment">//jack -&gt; tom -&gt; kang</span></span><br><span class="line">        jack.next = tom;</span><br><span class="line">        tom.next = kang;</span><br><span class="line">        <span class="comment">//kang -&gt; tom -&gt; jack</span></span><br><span class="line">        kang.pre = tom;</span><br><span class="line">        tom.pre = jack;</span><br><span class="line">        <span class="comment">//让 first 引用指向 jack,就是双向链表的头结点</span></span><br><span class="line">        Node first = jack;</span><br><span class="line">        <span class="comment">//让 last 引用指向 kang,就是双向链表的尾结点</span></span><br><span class="line">        Node last = kang;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===从头到尾进行遍历===&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            <span class="comment">//头节点指向下一个</span></span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====从尾到头的遍历====&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//输出 last 信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新加一个node节点</span></span><br><span class="line">        Node jerry=<span class="keyword">new</span> Node(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jerry.next=tom;</span><br><span class="line">        jerry.pre = jack;</span><br><span class="line">        tom.pre=jerry;</span><br><span class="line">        jack.next=jerry;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让 first 再次指向 jack</span></span><br><span class="line">        first = jack;<span class="comment">//让 first 引用指向 jack,就是双向链表的头结点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        last=kang;</span><br><span class="line">        System.out.println(<span class="string">&quot;===从头到尾进行遍历===&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            <span class="comment">//头节点指向下一个</span></span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====从尾到头的遍历====&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出 last 信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个 Node 类，Node 对象 表示双向链表的一个结点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Object item; <span class="comment">//真正存放数据</span></span><br><span class="line">        <span class="keyword">public</span> Node next; <span class="comment">//指向后一个结点</span></span><br><span class="line">        <span class="keyword">public</span> Node pre; <span class="comment">//指向前一个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Node name&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;item=&quot;</span> + item +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-27-10.png"></p>
<p>探究下源码 <strong>看看增删的操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> LinkedListCRUD</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 链表的增删改查</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/26 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListCRUD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        linkedList.add(<span class="number">1</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>);</span><br><span class="line">        linkedList.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span> + linkedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示一个删除结点的</span></span><br><span class="line">        <span class="comment">// 这里默认删除的是第一个结点</span></span><br><span class="line">        linkedList.remove();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span> + linkedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改某个结点对象</span></span><br><span class="line">        linkedList.set(<span class="number">1</span>, <span class="number">999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span> + linkedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到某个结点对象</span></span><br><span class="line">        <span class="comment">//get(1) 是得到双向链表的第二个对象</span></span><br><span class="line"></span><br><span class="line">        Object o = linkedList.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o);<span class="comment">//999</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为 LinkedList 是 实现了 List 接口, 遍历方式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===LinkeList 遍历迭代器====&quot;</span>);</span><br><span class="line">        Iterator iterator = linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object next = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;next=&quot;</span> + next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===LinkeList 遍历增强 for====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o1 : linkedList) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o1=&quot;</span> + o1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===LinkeList 遍历普通 for====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">            System.out.println(linkedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-51-19.png"></p>
<p>debug断点位置</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-50-14.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-36-43.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-38-48.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-39-26.png" alt="Snipaste_2021-05-26_21-39-26"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-40-07.png" alt="Snipaste_2021-05-26_21-40-07"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-40-46.png" alt="Snipaste_2021-05-26_21-40-46"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-26_21-41-37.png" alt="Snipaste_2021-05-26_21-41-37"></p>
<h2 id="7-3-ArrayList和LinkedList比较"><a href="#7-3-ArrayList和LinkedList比较" class="headerlink" title="7.3 ArrayList和LinkedList比较"></a>7.3 ArrayList和LinkedList比较</h2><table>
<thead>
<tr>
<th></th>
<th>底层结构</th>
<th>增删的效率</th>
<th>改查的效率</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td>可变数组</td>
<td>较低 数组扩容</td>
<td>较高</td>
</tr>
<tr>
<td>LinkedList</td>
<td>双向链表</td>
<td>较高 通过链表追加</td>
<td>较低</td>
</tr>
</tbody></table>
<p><strong>如何选择两者中？</strong></p>
<ul>
<li>改查操作多，选择ArrayList</li>
<li>增删操作多，选择LinkedList</li>
</ul>
<h1 id="8-Set集合"><a href="#8-Set集合" class="headerlink" title="8. Set集合"></a>8. Set集合</h1><h2 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h2><ul>
<li>无序，<strong>没有索引</strong></li>
<li>不允许重复元素，所以最多包含一个null</li>
<li>实现类有<ul>
<li>TreeSet</li>
<li>HashSet</li>
</ul>
</li>
</ul>
<h2 id="8-2-常用方法"><a href="#8-2-常用方法" class="headerlink" title="8.2 常用方法"></a>8.2 常用方法</h2><p>和List接口一样 Set接口也是Collection子接口，常用方法和Collection接口一样</p>
<p><strong>遍历方式</strong></p>
<ul>
<li>可以使用迭代器</li>
<li>增强for</li>
<li>不能使用索引的方式来获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SetMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Set集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/26 21:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法</span></span><br><span class="line">        <span class="comment">//2. set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null</span></span><br><span class="line">        <span class="comment">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span></span><br><span class="line">       <span class="comment">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定.</span></span><br><span class="line">    Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//重复</span></span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;zk&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">null</span>);</span><br><span class="line">        set.add(<span class="keyword">null</span>);<span class="comment">//再次添加 null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====使用迭代器====&quot;</span>);</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//方式 2: 增强 for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====增强 for====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//set 接口对象，不能通过索引来获取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="9-HashSet集合"><a href="#9-HashSet集合" class="headerlink" title="9. HashSet集合"></a>9. HashSet集合</h1><h2 id="9-1-HashSet集合基本介绍"><a href="#9-1-HashSet集合基本介绍" class="headerlink" title="9.1 HashSet集合基本介绍"></a>9.1 HashSet集合基本介绍</h2><ul>
<li>HashSet实际是Set接口</li>
<li>HashSet实际是HashMap 看源码图</li>
<li>可以存放null值，但是只能一个null</li>
<li>HashSet不保证元素是有序的，取决于hash后，再确定索引的结果 <strong>即 不保证存放的元素和取出顺序一致</strong></li>
<li>不能有重复的元素/对象，在前面Set接口中提到过</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashSet_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HashSet集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/27 21:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        hashSet.add(<span class="keyword">null</span>);</span><br><span class="line">        hashSet.add(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hashSet=&quot;</span> + hashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出的值为 null</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-40-46.png"></p>
<p>由源码可见 <strong>HashSet就是HashMap</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashSet01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/27 21:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 在执行 add 方法后，会返回一个 boolean 值</span></span><br><span class="line">        <span class="comment">//2. 如果添加成功，返回 true, 否则返回 false</span></span><br><span class="line">        <span class="comment">//3. 可以通过 remove 指定删除哪个对象</span></span><br><span class="line">        <span class="comment">//4. 元素不能重复</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//T</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;lucy&quot;</span>));<span class="comment">//T</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//F</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;Rose&quot;</span>));<span class="comment">//T</span></span><br><span class="line">        set.remove(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);<span class="comment">//3 个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);<span class="comment">//添加成功</span></span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);<span class="comment">//加入不了</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Dog(<span class="string">&quot;tom&quot;</span>));<span class="comment">//OK</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Dog(<span class="string">&quot;tom&quot;</span>));<span class="comment">//Ok</span></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; <span class="comment">//定义了 Dog 类</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-49-03.png"></p>
<h2 id="9-2-HashSet的底层机制源码分析"><a href="#9-2-HashSet的底层机制源码分析" class="headerlink" title="9.2 HashSet的底层机制源码分析"></a>9.2 HashSet的底层机制源码分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashSetSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HashSet的源码探究</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/27 21:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//到此位置，第 1 次 add 分析完毕. hashSet.add(&quot;php&quot;);//到此位置，第 2 次 add 分析完毕</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + hashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>debug 一把 断点位置</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_10-53-37.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_22-02-33.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-40-46.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-53-41.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-54-05.png" alt="Snipaste_2021-05-27_21-54-05"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-55-50.png" alt="Snipaste_2021-05-27_21-55-50"></p>
<p><strong>由于该方法太长 单独拿出来分析 核心源码！</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-59-35.png" alt="image-20210527220005260"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义了辅助变量</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//table 就是 HashMap的一个数组 类型是 Node[]</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if语句表示如果当前的table 是null 或者大小为0</span></span><br><span class="line"><span class="comment">    就是第一次扩容 16个空间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    (1)根据 key，得到 hash 去计算该 key 应该存放到 table 表的哪个索引位置并把这个位置的对象，赋给 p</span></span><br><span class="line"><span class="comment">	(2)判断 p 是否为 null</span></span><br><span class="line"><span class="comment">	(2.1) 如果 p 为 null, 表示还没有存放元素, 就创建一个 Node (key=&quot;java&quot;,value=PRESENT)</span></span><br><span class="line"><span class="comment">	(2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样</span></span><br><span class="line"><span class="comment">            并且满足下面两个条件之一</span></span><br><span class="line"><span class="comment">            1.准备加入的key和p指向的Node节点的key是同一个对象</span></span><br><span class="line"><span class="comment">            2.p指向的Node节点的key的equals和准备加入的key比较后相同就不能加入 这就是不允许重复的值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            再判断p是不是一颗红黑树</span></span><br><span class="line"><span class="comment">            如果是红黑树，就调用putTreeVal，进行添加</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">	    	如果 table 对应索引位置，已经是一个链表, 就使用 for 循环比较</span></span><br><span class="line"><span class="comment">		(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后注意在把元素添加到链表后，</span></span><br><span class="line"><span class="comment">		立即判断 该链表是否已经达到 8 个结点，达到8个结点，	</span></span><br><span class="line"><span class="comment">		就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)</span></span><br><span class="line"><span class="comment">		注意，在转成红黑树时，要进行判断, 判断条件</span></span><br><span class="line"><span class="comment">		if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))</span></span><br><span class="line"><span class="comment">		resize();</span></span><br><span class="line"><span class="comment"> 		如果上面条件成立，先 table 扩容. // 只有上面条件不成立时，才进行转成红黑树</span></span><br><span class="line"><span class="comment">		(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接 break</span></span><br><span class="line"><span class="comment">				*/</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    	<span class="comment">//size 就是我们每加入一个结点 Node(k,v,h,next), </span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize(); <span class="comment">//扩容的方法</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_10-55-09.png"></p>
<p><strong>扩容机制</strong></p>
<blockquote>
<ul>
<li><p>HashSet 底层是 HashMap, 第一次添加时，table 数组扩容到 16，</p>
<pre><code>    临界值(threshold)是 16*加载因子(loadFactor)是 0.75 = 12
    如果 table 数组使用到了临界值 12,就会扩容到 16 * 2 = 32
    新的临界值就是 32*0.75 = 24, 依次类推
</code></pre>
</li>
<li><p>在 Java8 中, 如果一条链表的元素个数到达 TREEIFY_THRESHOLD(默认是 8 )，</p>
<pre><code>并且 table 的大小 &gt;= MIN_TREEIFY_CAPACITY(默认 64),就会进行树化(红黑树),
否则仍然采用数组扩容机制
</code></pre>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashSetIncrement</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 扩容源码探究</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/27 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetIncrement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">            hashSet.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         HashSet 底层是 HashMap, 第一次添加时，table 数组扩容到 16，</span></span><br><span class="line"><span class="comment">        临界值(threshold)是 16*加载因子(loadFactor)是 0.75 = 12</span></span><br><span class="line"><span class="comment">        如果 table 数组使用到了临界值 12,就会扩容到 16 * 2 = 32</span></span><br><span class="line"><span class="comment">        新的临界值就是 32*0.75 = 24, 依次类推</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        在 Java8 中, 如果一条链表的元素个数到达 TREEIFY_THRESHOLD(默认是 8 )，</span></span><br><span class="line"><span class="comment">        并且 table 的大小 &gt;= MIN_TREEIFY_CAPACITY(默认 64),就会进行树化(红黑树),</span></span><br><span class="line"><span class="comment">        否则仍然采用数组扩容机制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-HashSet练习"><a href="#9-3-HashSet练习" class="headerlink" title="9.3 HashSet练习"></a>9.3 HashSet练习</h2><blockquote>
<p>定义一个 Employee 类，该类包含：private 成员属性 name,age </p>
<p>要求: 创建 3 个 Employee 对象放入 HashSet 中 当 name 和 age 的值相同时，认为是相同员工, 不能添加到 HashSet 集合中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashSetExercise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Hash练习</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 9:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> Employee(<span class="string">&quot;milan&quot;</span>, <span class="number">18</span>));<span class="comment">//ok</span></span><br><span class="line">        hashSet.add(<span class="keyword">new</span> Employee(<span class="string">&quot;smith&quot;</span>, <span class="number">28</span>));<span class="comment">//ok</span></span><br><span class="line">        hashSet.add(<span class="keyword">new</span> Employee(<span class="string">&quot;milan&quot;</span>, <span class="number">18</span>));<span class="comment">//加入不成功.</span></span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Employee employee = (Employee) o;</span><br><span class="line">            <span class="keyword">return</span> age == employee.age &amp;&amp; Objects.equals(name, employee.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_09-46-11.png"></p>
<h1 id="10-LinkedHashSet集合"><a href="#10-LinkedHashSet集合" class="headerlink" title="10. LinkedHashSet集合"></a>10. LinkedHashSet集合</h1><h2 id="10-1-LinkedHashSet基础介绍"><a href="#10-1-LinkedHashSet基础介绍" class="headerlink" title="10.1 LinkedHashSet基础介绍"></a>10.1 LinkedHashSet基础介绍</h2><ul>
<li>LinkedHashSet是HashSet的子类</li>
<li>LinkedHashSet底层是一个LinkedHashMap,底层维护了一个数组+双向链表</li>
<li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，同时使用链表维护元素的次序，使得元素看起来是插入顺序保存的</li>
<li>LinkedHashSet不允许添加重复元素</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-02-34.png"></p>
<h2 id="10-2-LinkedHashSet练习"><a href="#10-2-LinkedHashSet练习" class="headerlink" title="10.2 LinkedHashSet练习"></a>10.2 LinkedHashSet练习</h2><blockquote>
<p>Car 类(属性:name,price)， 如果 name 和 price 一样， 则认为是相同元素，就不能添加。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> LinkedHashSetExercise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> LinkedHashSet练习</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 9:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetExercise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashSet linkedHashSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;奥拓&quot;</span>, <span class="number">1000</span>));<span class="comment">//OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));<span class="comment">//OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;法拉利&quot;</span>, <span class="number">10000000</span>));<span class="comment">//OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));<span class="comment">//加入不了</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;保时捷&quot;</span>, <span class="number">70000000</span>));<span class="comment">//OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> Car(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));<span class="comment">//加入不了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedHashSet=&quot;</span> + linkedHashSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;\nCar&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写 equals 方法 和 hashCode</span></span><br><span class="line">        <span class="comment">//当 name 和 price 相同时， 就返回相同的 hashCode 值, equals 返回 true</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Car car = (Car) o;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(car.price, price) == <span class="number">0</span> &amp;&amp; Objects.equals(name, car.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(name, price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_09-51-06.png"></p>
<h1 id="11-Map接口"><a href="#11-Map接口" class="headerlink" title="11.Map接口"></a>11.Map接口</h1><h2 id="11-1-Map接口基本介绍"><a href="#11-1-Map接口基本介绍" class="headerlink" title="11.1 Map接口基本介绍"></a>11.1 Map接口基本介绍</h2><ul>
<li>Map与Collection并列存在，用于保存具有映射关系的数据：Key-Value</li>
<li>Map中的key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中</li>
<li>Map中的key不允许重复</li>
<li>Map中的value可以重复</li>
<li>Map的key可以为null，value也可以为null，key为null，只能一个，value为null，可以多个</li>
<li>key和value之间存在单向一对一关系，通过指定的key总能找到对应的value</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-11-56.png"></p>
<h2 id="11-2-Map接口常用方法"><a href="#11-2-Map接口常用方法" class="headerlink" title="11.2 Map接口常用方法"></a>11.2 Map接口常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MapMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Map的常用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 9:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;java&quot;</span>, <span class="number">100</span>));<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;二号&quot;</span>);<span class="comment">//替换-&gt; 一会分析源码</span></span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;三号&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;四号&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;5&quot;</span>, <span class="keyword">null</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="string">&quot;空&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;六号&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;七号&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove:根据键删除映射关系</span></span><br><span class="line">        map.remove(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line">        <span class="comment">// get：根据键获取值</span></span><br><span class="line">        Object val = map.get(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;val=&quot;</span> + val);</span><br><span class="line">        <span class="comment">// size:获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;k-v=&quot;</span> + map.size());</span><br><span class="line">        <span class="comment">// isEmpty:判断个数是否为 0</span></span><br><span class="line">        System.out.println(map.isEmpty());<span class="comment">//F</span></span><br><span class="line">        <span class="comment">// clear:清除 k-v</span></span><br><span class="line">        <span class="comment">//map.clear();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line">        <span class="comment">// containsKey:查找键是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;结果=&quot;</span> + map.containsKey(<span class="string">&quot;6&quot;</span>));<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.num = num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_10-04-53.png"></p>
<h2 id="11-3-Map接口遍历方法"><a href="#11-3-Map接口遍历方法" class="headerlink" title="11.3 Map接口遍历方法"></a>11.3 Map接口遍历方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> MapFor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Map集合遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 10:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;一号&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;二号&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;三号&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;四号&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一组：先取出 所有的 Key ,通过 Key 取出对应的 Value</span></span><br><span class="line">        Set keyset = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 增强 for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----第一种方式-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keyset) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----第二种方式--------&quot;</span>);</span><br><span class="line">        Iterator iterator = keyset.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Object key = iterator.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二组: 把所有的 values 取出</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        <span class="comment">//这里可以使用所有的 Collections 使用的遍历方法</span></span><br><span class="line">        <span class="comment">//(1) 增强 for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的 value 增强 for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的 value 迭代器----&quot;</span>);</span><br><span class="line">        Iterator iterator2 = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            Object value = iterator2.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三组: 通过 EntrySet 来获取 k-v</span></span><br><span class="line">        Set entrySet = map.entrySet();<span class="comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line">        <span class="comment">//(1) 增强 for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用 EntrySet 的 for 增强(第 3 种)----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">        <span class="comment">//将 entry 转成 Map.Entry</span></span><br><span class="line">            Map.Entry m = (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用 EntrySet 的 迭代器(第 4 种)----&quot;</span>);</span><br><span class="line">        Iterator iterator3 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">            Object entry = iterator3.next();</span><br><span class="line">        <span class="comment">//System.out.println(next.getClass());//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)</span></span><br><span class="line">        <span class="comment">//向下转型 Map.Entry</span></span><br><span class="line">            Map.Entry m = (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="11-4-HashMap小结"><a href="#11-4-HashMap小结" class="headerlink" title="11.4 HashMap小结"></a>11.4 HashMap小结</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-15-57.png"></p>
<h2 id="11-5-HashMap-底层机制及源码剖析"><a href="#11-5-HashMap-底层机制及源码剖析" class="headerlink" title="11.5 HashMap 底层机制及源码剖析"></a>11.5 HashMap 底层机制及源码剖析</h2><p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-16-59.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-17-09.png" alt="Snipaste_2021-05-28_11-17-09"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> HashMapSource1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HashMap源码探究</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 10:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapSource1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;php&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>);<span class="comment">//替换 value</span></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>断点位置 如下 debug一把</strong></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-17-56.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-27_21-59-35.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义辅助变量</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果底层的table数组为null，或者length=0，就扩容到16</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//取出hash值对应的table索引位置的Node，如果为null 就直接加入 k-v </span></span><br><span class="line">    <span class="comment">// 创建一个Node,加入该位置即可</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//辅助变量</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果table的索引位置的key的hash相同和新的key的hash值相同</span></span><br><span class="line"><span class="comment">            并满足(table现有的节点的key和准备添加的key是同一个对象 ||equals返回真)</span></span><br><span class="line"><span class="comment">            就认为不能加入新的 k-v</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//如果当前的table的已有的Node是红黑树，就按照红黑树的方式处理</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果找到节点，后面是链表，就循环比较</span></span><br><span class="line">                <span class="comment">//死循环</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//如果整个链表，没有和他相同，就添加到该链表最后</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//循环比较过程中，发现有相同，就break，只是替换value</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;<span class="comment">//替换</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//每增加一个Node，就size++</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_10-37-23.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//关于树化 转化成红黑树 </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果table为null，或者大小没到64.暂时不树化，而是进行扩容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="12-HashTable集合"><a href="#12-HashTable集合" class="headerlink" title="12. HashTable集合"></a>12. HashTable集合</h1><h2 id="12-1-HashTable-基本介绍"><a href="#12-1-HashTable-基本介绍" class="headerlink" title="12.1 HashTable 基本介绍"></a>12.1 HashTable 基本介绍</h2><ul>
<li>存放的元素是键值对:即K-V</li>
<li>hashtable的键和值都不能为null，否则会抛出NullPointerException</li>
<li> hashTable使用方法基本上和HashMap一样</li>
<li>hashTable是线程安全的(synchronized)， hashMap是线程不安全的</li>
</ul>
<h2 id="12-2-Hashtable和HashMap-对比"><a href="#12-2-Hashtable和HashMap-对比" class="headerlink" title="12.2 Hashtable和HashMap 对比"></a>12.2 Hashtable和HashMap 对比</h2><table>
<thead>
<tr>
<th></th>
<th>版本</th>
<th>线程安全(同步)</th>
<th>效率</th>
<th>允许null键null值</th>
</tr>
</thead>
<tbody><tr>
<td>HashMap</td>
<td>1.2</td>
<td>不安全</td>
<td>高</td>
<td>可以</td>
</tr>
<tr>
<td>HashTable</td>
<td>1.0</td>
<td>安全</td>
<td>较低</td>
<td>不可以</td>
</tr>
</tbody></table>
<h1 id="13-Properties集合"><a href="#13-Properties集合" class="headerlink" title="13. Properties集合"></a>13. Properties集合</h1><ul>
<li>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种键值对的形式来保存数据。</li>
<li>Properties 还可以用于从xoxx.properties文件中，加载数据到Properties类对象,并进行读取和修改</li>
<li>使用特点和Hashtable类似</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Properties_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用一句话描述类的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. Properties 继承 Hashtable</span></span><br><span class="line">        <span class="comment">//2. 可以通过 k-v 存放数据，当然 key 和 value 不能为 null</span></span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常</span></span><br><span class="line">         <span class="comment">//properties.put(&quot;abc&quot;, null); //抛出 空指针异常</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="number">100</span>);<span class="comment">//k-v</span></span><br><span class="line">        properties.put(<span class="string">&quot;lucy&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">88</span>);<span class="comment">//如果有相同的 key ， value 被替换</span></span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 k 获取对应值</span></span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;lic&quot;</span>));<span class="comment">//88</span></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="string">&quot;约翰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_10-49-44.png"></p>
<h1 id="14-实际应用中如何选择集合实现类"><a href="#14-实际应用中如何选择集合实现类" class="headerlink" title="14. 实际应用中如何选择集合实现类"></a>14. 实际应用中如何选择集合实现类</h1><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行选择，分析如下:</p>
<p>（1)先判断存储的类型(一组对象[单列]或一组键值对[双列)</p>
<p>(2)一组对象[单列]:Collection接口</p>
<ul>
<li>允许重复 List<ul>
<li>增删多:LinkedList[底层维护了一个双向链表]</li>
<li>改查多:ArrayList[底层维护了Object类型的可变数组]</li>
</ul>
</li>
<li>不允许重复:Set<ul>
<li>无序: HashSet[底层是HashMap，维护了一个哈希表即(数组+链表+红黑树)]</li>
<li>排序:TreeSet</li>
<li>插入和取出顺序一致:LinkedHashSet，维护数组+双向链表</li>
</ul>
</li>
</ul>
<p>(3)一组键值对[双列:Map</p>
<ul>
<li><p>键无序: HashMap [底层是:哈希表jdk7:数组+链表，jdk8:数组+链表+红黑树]</p>
</li>
<li><p>键排序:TreeMap</p>
</li>
<li><p>键插入和取出顺序一致:LinkedHashMap</p>
</li>
<li><p>读取文件Properties</p>
</li>
</ul>
<p><strong>比较器的使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> TreeSet_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TreeSet比较器的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 11:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet treeSet = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//下面 调用 String 的 compareTo 方法进行字符串大小比较</span></span><br><span class="line">        <span class="comment">//要求加入的元素，按照长度大小排序</span></span><br><span class="line">        <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);<span class="comment">//3</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;abc&quot;</span>);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;treeSet=&quot;</span> + treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="15-工具类"><a href="#15-工具类" class="headerlink" title="15 工具类"></a>15 工具类</h1><ul>
<li> Collections是一个操作Set、List和 Map等集合的工具类</li>
<li>Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-56-00.png"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-55-49.png" alt="Snipaste_2021-05-28_11-55-49"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuang.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Collections_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Collections工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/28 11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by dell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 ArrayList 集合，用于测试.</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="comment">// reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Collections.shuffle(list);</span><br><span class="line">            System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序后&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line">        <span class="comment">//我们希望按照 字符串的长度大小排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以加入校验代码.</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度大小排序=&quot;</span> + list);</span><br><span class="line">        <span class="comment">// swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line">        Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后的情况&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        <span class="comment">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));</span><br><span class="line">        <span class="comment">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line">        <span class="comment">//比如，我们要返回长度最大的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如，我们要返回长度最大的元素</span></span><br><span class="line">        Object maxObject = Collections.max(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度最大的元素=&quot;</span> + maxObject);</span><br><span class="line">        <span class="comment">//Object min(Collection)</span></span><br><span class="line">        <span class="comment">//Object min(Collection，Comparator)</span></span><br><span class="line">        <span class="comment">//上面的两个方法，参考 max 即可</span></span><br><span class="line">        <span class="comment">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tom 出现的次数=&quot;</span> + Collections.frequency(list, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line">        <span class="comment">//void copy(List dest,List src)：将 src 中的内容复制到 dest 中</span></span><br><span class="line">        ArrayList dest = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//为了完成一个完整拷贝，我们需要先给 dest 赋值，大小和 list.size()一样</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            dest.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;dest=&quot;</span> + dest);</span><br><span class="line">        <span class="comment">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line">        <span class="comment">//如果 list 中，有 tom 就替换成 汤姆</span></span><br><span class="line">        Collections.replaceAll(list, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list 替换后=&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture-2/raw/master/Java%E9%9B%86%E5%90%88%E5%9B%BE%E7%89%87/Snipaste_2021-05-28_11-52-40.png"></p>
<p><strong>写在最后：用韩老师的一句话来鞭策自己”我亦无他，惟手熟尔！”</strong></p>
<p><strong>若有错误，还请各位指出错误，及时更改！</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
