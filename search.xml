<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>4.05</title>
    <url>/2021/04/05/4-05/</url>
    <content><![CDATA[<h2 id="今天天气真好"><a href="#今天天气真好" class="headerlink" title="今天天气真好"></a>今天天气真好</h2><h2 id="适合出去嗨！"><a href="#适合出去嗨！" class="headerlink" title="适合出去嗨！"></a>适合出去嗨！</h2><hr>
]]></content>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2021/04/05/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h2><ul>
<li>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含<br>运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</li>
</ul>
<h3 id="1-Docker镜像加载原理"><a href="#1-Docker镜像加载原理" class="headerlink" title="1.Docker镜像加载原理"></a>1.Docker镜像加载原理</h3><ul>
<li>UnionFS（联合文件系统）</li>
</ul>
<blockquote>
<p>UnionFS（联合文件系统）：<strong>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统</strong>，<br>它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系<br>统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基<br>础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br>特性：<strong>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件</strong><br><strong>系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</strong></p>
</blockquote>
<ul>
<li>Docker镜像加载原理</li>
</ul>
<blockquote>
<p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启<br>动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是<br>一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已<br>由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标<br>准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>
</blockquote>
<ul>
<li>分层镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis  #拉取redis</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152500153.png" alt="image-20210306152500153"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect redis:latest # 查看镜像分层的方式</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152556075.png" alt="image-20210306152556075"></p>
<ul>
<li>为什么Docker镜像采用分层的结构</li>
</ul>
<blockquote>
<p>资源共享  比如有多个镜像都从相同的Base镜像构建而来，那么宿主机<br>只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服<br>务了，而且镜像的每一层都可以被共享。</p>
</blockquote>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>所有的 Docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之<br>上，创建新的镜像层。<br>举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果<br>在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就<br>会创建第三个镜像层。<br>该镜像当前已经包含 3 个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152903863.png" alt="image-20210306152903863"></p>
<p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了<br>一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152919748.png" alt="image-20210306152919748"></p>
<p>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有 6 个文件，这是因为最上层中的文件<br>7 是文件 5 的一个更新版本。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306152937874.png" alt="image-20210306152937874"></p>
<p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新<br>镜像层添加到镜像当中。<br>Docker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统<br>一的文件系统。<br>Linux 上可用的存储引擎有 AUFS、Overlay2、Device Mapper、Btrfs 以及 ZFS。顾名思义，每种存储<br>引擎都基于 Linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。<br>Docker 在 Windows 上仅支持 windowsfilter 一种存储引擎，该引擎基于 NTFS 文件系统之上实现了分<br>层和 CoW[1]。<br>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306153005448.png" alt="image-20210306153005448"></p>
<ul>
<li>特点</li>
</ul>
<p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！<br>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p>
<h3 id="2-镜像Commit"><a href="#2-镜像Commit" class="headerlink" title="2.镜像Commit"></a>2.镜像Commit</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit # 从容器创建一个新的镜像</span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、从Docker Hub 下载tomcat镜像到本地并运行 -it 交互终端 -p 端口映射</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：坑爹：docker启动官方tomcat镜像的容器，发现404是因为使用了加速器，而加速器里的tomcat的webapps下没有root等文件！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载tomcat官方镜像，就是这个镜像（阿里云里的tomcat的webapps下没有任何文件）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入tomcat查看<span class="built_in">cd</span>到webapps下发现全部空的，反而有个webapps.dist里有对应文件，cp -r到webapps下！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2.进入到tomcat目录中</span></span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line">/usr/local/tomcat # ce webapps/</span><br><span class="line">/usr/local/tomcat/webapps # ls -l # 查看是否存在 docs文件夹</span><br><span class="line">/usr/local/tomcat/webapps # curl localhost:8080/docs/  # 可以看到 docs 返回的</span><br><span class="line">内容</span><br><span class="line">/usr/local/tomcat/webapps # rm -rf docs # 删除它</span><br><span class="line">/usr/local/tomcat/webapps # curl localhost:8080/docs/  # 再次访问返回404</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、当前运行的tomcat实例就是一个没有docs的容器，我们使用它为模板commit一个没有docs的</span></span><br><span class="line">tomcat新镜像， tomcat02</span><br><span class="line"></span><br><span class="line">docker ps -l  # 查看容器的id</span><br><span class="line"></span><br><span class="line">[root@bogon ~]# docker ps -l</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">46e66e5d6c69        docker.io/tomcat    &quot;catalina.sh run&quot;   10 minutes ago      Up 10 minutes       8080/tcp            focused_khorana</span><br><span class="line">[root@bogon ~]# docker commit -a=&quot;zhuangkang&quot; -m=&quot;no tomcat docs&quot; 46e66e5d6c69 tomcat02:1.1</span><br><span class="line">sha256:a054127ff9bcfbbfad569cfc1cf52a20987774320ba060e4989f412cb7650f60</span><br><span class="line">[root@bogon ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">tomcat02            1.1                 a054127ff9bc        About a minute ago   672 MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、这个时候，我们的镜像都是可以使用的，大家可以启动原来的tomcat，和我们新的tomcat02来</span></span><br><span class="line">测试看看！</span><br><span class="line">[root@kuangshen ~]# docker run -it -p 8080:8080 tomcat02:1.1</span><br><span class="line"></span><br><span class="line">测试 LinuxIP:8080 访问成功！</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306154214974.png" alt="image-20210306154214974"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306155234112.png" alt="image-20210306155234112"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306155710543.png" alt="image-20210306155710543"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306160248850.png" alt="image-20210306160248850"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306160727354.png" alt="image-20210306160727354"></p>
<h2 id="2-容器数据卷"><a href="#2-容器数据卷" class="headerlink" title="2.容器数据卷"></a>2.容器数据卷</h2><h3 id="2-1docker理念回顾"><a href="#2-1docker理念回顾" class="headerlink" title="2.1docker理念回顾"></a>2.1docker理念回顾</h3><p>将应用和运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对于数据的要求，是希望能够<br>持久化的！<br>就好比，你安装一个MySQL，结果你把容器删了，就相当于删库跑路了，这TM也太扯了吧！<br>所以我们希望容器之间有可能可以共享数据，Docker容器产生的数据，如果不通过docker commit 生成<br>新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了！这样是行<br>不通的！<br>为了能保存数据在Docker中我们就可以使用卷！让数据挂载到我们本地！这样数据就不会因为容器删除<br>而丢失了！</p>
<h3 id="2-2作用"><a href="#2-2作用" class="headerlink" title="2.2作用"></a>2.2作用</h3><p>作用：<br>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此<br>能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：<br>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂<br>载的数据卷。</p>
<h3 id="2-3特点"><a href="#2-3特点" class="headerlink" title="2.3特点"></a>2.3特点</h3><p>1、数据卷可在容器之间共享或重用数据<br>2、卷中的更改可以直接生效<br>3、数据卷中的更改不会包含在镜像的更新中<br>4、数据卷的生命周期一直持续到没有容器使用它为止<br><strong>所以：总结一句话： 就是容器的持久化，以及容器间的继承和数据共享！</strong></p>
<h2 id="3-使用数据卷"><a href="#3-使用数据卷" class="headerlink" title="3.使用数据卷"></a>3.使用数据卷</h2><ul>
<li>方式一：容器中 直接用命令来添加</li>
</ul>
<p>挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"># 测试</span><br><span class="line">[root@root~]# docker run -it -v &#x2F;home&#x2F;ceshi:&#x2F;home centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>查看数据卷是否挂载成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure>

<p>测试容器和宿主机之间数据是否共享！</p>
<p>测试容器停止退出后，主机修改数据是否会同步！</p>
<ol>
<li>停止容器</li>
<li>在宿主机上修改文件，增加些内容</li>
<li>启动刚才停止的容器</li>
<li>然后查看对应的文件，发现数据依旧同步！ok</li>
</ol>
<h2 id="4-使用docker安装mysql"><a href="#4-使用docker安装mysql" class="headerlink" title="4.使用docker安装mysql"></a>4.使用docker安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.拉取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3启动容器 -e 环境变量！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意： mysql的数据应该不丢失！先体验下 -v 挂载卷！</span></span><br><span class="line">docker run -d -p 3310:3306 -v</span><br><span class="line">/home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e</span><br><span class="line">MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、使用本地的sqlyog连接测试一下 3310</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、查看本地的 /home/mysql 目录 <span class="built_in">pwd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、删除mysql容器</span></span><br><span class="line">docker rm -f mysql01</span><br></pre></td></tr></table></figure>

<h2 id="5-匿名和具名挂载"><a href="#5-匿名和具名挂载" class="headerlink" title="5.匿名和具名挂载"></a>5.匿名和具名挂载</h2><p>以nginx为例！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">-v 卷名:/容器内路径</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看挂载的路径</span></span><br><span class="line">docker volume inspect nginxconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 怎么判断挂载的是卷名而不是本机目录名？</span></span><br><span class="line">不是/开始就是卷名，是/开始就是目录名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变文件的读写权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro: <span class="built_in">readonly</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rw: readwrite</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器对我们挂载出来的内容的读写权限</span></span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure>

<h2 id="6-DockerFile"><a href="#6-DockerFile" class="headerlink" title="6.DockerFile"></a>6.DockerFile</h2><p>微服务打包成镜像，任何装了Docker的地方，都可以下载使用，极其的方便。<br>流程：开发应用=&gt;DockerFile=&gt;打包为镜像=&gt;上传到仓库（私有仓库，公有仓库）=&gt; 下载镜像 =&gt; 启动<br>运行。</p>
<h3 id="6-1概念"><a href="#6-1概念" class="headerlink" title="6.1概念"></a>6.1概念</h3><p>dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>构建步骤：<br>1、编写DockerFile文件<br>2、docker build 构建镜像<br>3、docker run</p>
<h3 id="6-2DockerFile构建过程"><a href="#6-2DockerFile构建过程" class="headerlink" title="6.2DockerFile构建过程"></a>6.2DockerFile构建过程</h3><h4 id="6-2-1基础知识"><a href="#6-2-1基础知识" class="headerlink" title="6.2.1基础知识"></a>6.2.1基础知识</h4><p>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2、指令按照从上到下，顺序执行<br>3、# 表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p>
<h4 id="6-2-2流程"><a href="#6-2-2流程" class="headerlink" title="6.2.2流程"></a>6.2.2流程</h4><p>1、docker从基础镜像运行一个容器<br>2、执行一条指令并对容器做出修改<br>3、执行类似 docker commit 的操作提交一个新的镜像层<br>4、Docker再基于刚提交的镜像运行一个新容器<br>5、执行dockerfile中的下一条指令直到所有指令都执行完成！</p>
<h4 id="6-2-3说明"><a href="#6-2-3说明" class="headerlink" title="6.2.3说明"></a>6.2.3说明</h4><p>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。<br>DockerFile 是软件的原材料 （代码）<br>Docker 镜像则是软件的交付品 （.apk）<br>Docker 容器则是软件的运行状态 （客户下载安装执行）<br>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可！</p>
<p>DockerFile：需要定义一个DockerFile，DockerFile定义了进程需要的一切东西。DockerFile涉及的内容<br>包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进<br>程和内核进程（当引用进行需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace的权<br>限控制）等等。<br>Docker镜像：在DockerFile 定义了一个文件之后，Docker build 时会产生一个Docker镜像，当运行<br>Docker 镜像时，会真正开始提供服务；<br>Docker容器：容器是直接提供服务的。</p>
<h2 id="7-DockerFile指令"><a href="#7-DockerFile指令" class="headerlink" title="7.DockerFile指令"></a>7.DockerFile指令</h2><h4 id="7-1关键字"><a href="#7-1关键字" class="headerlink" title="7.1关键字"></a>7.1关键字</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM     # 基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line">MAINTAINER  # 镜像维护者的姓名混合邮箱地址</span><br><span class="line">RUN      # 容器构建时需要运行的命令</span><br><span class="line">EXPOSE    # 当前容器对外保留出的端口</span><br><span class="line">WORKDIR    # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span><br><span class="line">ENV      # 用来在构建镜像过程中设置环境变量</span><br><span class="line">ADD      # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span><br><span class="line">COPY     # 类似ADD，拷贝文件和目录到镜像中！</span><br><span class="line">VOLUME    # 容器数据卷，用于数据保存和持久化工作</span><br><span class="line">CMD      # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最</span><br><span class="line">后一个生效！</span><br><span class="line">ENTRYPOINT  # 指定一个容器启动时要运行的命令！和CMD一样</span><br><span class="line">ONBUILD    # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的</span><br><span class="line">ONBUILD被触发</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306162408373.png" alt="image-20210306162408373"></p>
<h3 id="7-2自定义一个centos"><a href="#7-2自定义一个centos" class="headerlink" title="7.2自定义一个centos"></a>7.2自定义一个centos</h3><h4 id="7-2-1-编写DockerFile"><a href="#7-2-1-编写DockerFile" class="headerlink" title="7.2.1.编写DockerFile"></a>7.2.1.编写DockerFile</h4><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306162536380.png" alt="image-20210306162536380"></p>
<p>目的：使我们自己的镜像具备如下：登陆后的默认路径、vim编辑器、查看网络配置ifconfig支持<br>准备编写DockerFlie文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.创建一个目录</span></span><br><span class="line">mkdir dockerfile-test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.编写文件</span></span><br><span class="line">vim mydockerfile-test</span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zhuangkang&lt;2247830091@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local # 默认路径</span><br><span class="line">WORKDIR $MYPATH  # 工作路径</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;----------end--------&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过cat命令查看</span></span><br><span class="line">cat mydockerfile-test</span><br></pre></td></tr></table></figure>

<h4 id="7-2-2-构建"><a href="#7-2-2-构建" class="headerlink" title="7.2.2.构建"></a>7.2.2.构建</h4><p>docker build -f dockerfile地址 -t 新镜像名字:TAG .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 看到下面就是成功！</span></span><br><span class="line">Successfully built 18888023317c</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>

<h4 id="7-2-3-运行"><a href="#7-2-3-运行" class="headerlink" title="7.2.3. 运行"></a>7.2.3. 运行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it 新镜像名字:TAG</span><br></pre></td></tr></table></figure>

<h4 id="7-2-4-列出镜像地的变更历史"><a href="#7-2-4-列出镜像地的变更历史" class="headerlink" title="7.2.4.列出镜像地的变更历史"></a>7.2.4.列出镜像地的变更历史</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker history 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="8-Docker网络"><a href="#8-Docker网络" class="headerlink" title="8.Docker网络"></a>8.Docker网络</h2><p>首先清空所有容器和镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)       # 删除所有容器</span><br><span class="line">docker rmi -f $(docker images -qa)      # 删除全部镜像</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163506426.png" alt="image-20210306163506426"></p>
<p>实际场景中，我们开发了很多微服务项目，那些微服务项目都要连接数据库，需要指定数据库的url地<br>址，通过ip。但是我们用Docker管理的话，假设数据库出问题了，我们重新启动运行一个，这个时候数<br>据库的地址就会发生变化，docker会给每个容器都分配一个ip，且容器和容器之间是可以互相访问的。<br>我们可以测试下容器之间能不能ping通过：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">12: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:acff:fe11:2/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@bogon ~]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.060 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.045 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-1原理"><a href="#8-1原理" class="headerlink" title="8.1原理"></a>8.1原理</h4><ul>
<li><p>1、每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了veth-pair<br>技术！</p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164255054.png" alt="image-20210306164405468"></p>
</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163525959.png" alt="image-20210306163525959"></p>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306163607386.png" alt="image-20210306163607386"></p>
<ul>
<li>2.每启动一个容器，linux主机就会多了一个虚拟网卡。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat02 tomcat	# 再启动一个tomcat2</span><br><span class="line"></span><br><span class="line">docker exec -it tomcat02 ip addr # 查看ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 观察现象：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat --- linux主机 vethc8584ea@if122 ---- 容器内 eth0@if123</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat --- linux主机 veth021eeea@if124 ---- 容器内 eth0@if125</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3.网络模型图</li>
</ul>
<p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164643127.png" alt="image-20210306164643127"></p>
<ul>
<li><p>4.结论</p>
</li>
<li><p>tomcat1和tomcat2共用一个路由器。是的，他们使用的一个，就是docker0。任何一个容器启动<br>默认都是docker0网络。<br>docker默认会给容器分配一个可用ip。</p>
</li>
<li><p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据<br>Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网<br>关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接<br>通信。</p>
</li>
</ul>
<h3 id="8-2所有网络模式"><a href="#8-2所有网络模式" class="headerlink" title="8.2所有网络模式"></a>8.2所有网络模式</h3><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/image-20210306164928025.png" alt="image-20210306164928025"></p>
<h2 id="9-部署Redis集群"><a href="#9-部署Redis集群" class="headerlink" title="9.部署Redis集群"></a>9.部署Redis集群</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动6个容器</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf</span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server</span><br><span class="line">/etc/redis/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入一个redis，注意这里是 sh命令</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379</span><br><span class="line">172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --</span><br><span class="line">cluster-replicas 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接集群</span></span><br><span class="line">redis-cli -c</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> a b</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止到存值的容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再次get a，发现依旧可以获取值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点，发现高可用完全没问题</span></span><br></pre></td></tr></table></figure>

<h2 id="10-IDEA整合Redis"><a href="#10-IDEA整合Redis" class="headerlink" title="10.IDEA整合Redis"></a>10.IDEA整合Redis</h2><ul>
<li>1.创建一个SpringBoot项目</li>
<li>2.创建一个HelloController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.启动测试，确认端口没有冲突</li>
<li>4.用Maven打成jar包</li>
<li>打包镜像</li>
<li>1.在项目下编写 Dockerfile 文件，将打包好的jar包拷贝到Dockerfile同级目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器只有dockerfile和jar在同级目录</span></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器内要暴露的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>2.将Dockerfile 和 项目的 jar 包上传到linux服务器上，构建运行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">docker build -t idea-ks .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">docker run -d -P --name idea-ks idea-ks</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">curl localhost:32779</span><br><span class="line">curl localhost:32779/hello</span><br></pre></td></tr></table></figure>

<h2 id="11-常用命令总结"><a href="#11-常用命令总结" class="headerlink" title="11.常用命令总结"></a>11.常用命令总结</h2><p><img src="https://gitee.com/zhuang-kang/note-picture/raw/master/%E5%9B%BE%E7%89%87/20200526095411.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> attach    Attach to a running container                 <span class="comment"># 当前 shell 下 attach 连接指定运行镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> build     Build an image from a Dockerfile              <span class="comment"># 通过 Dockerfile 定制镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> commit    Create a new image from a container changes   <span class="comment"># 提交当前容器为新的镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp        Copy files/folders from the containers filesystem to the host path   <span class="comment">#从容器中拷贝指定文件或者目录到宿主机中</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> create    Create a new container                        <span class="comment"># 创建一个新的容器，同 run，但不启动容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> diff      Inspect changes on a container<span class="string">&#x27;s filesystem   # 查看 docker 容器变化</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> events    Get real time events from the server          <span class="comment"># 从 docker 服务获取容器实时事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span>      Run a <span class="built_in">command</span> <span class="keyword">in</span> an existing container        <span class="comment"># 在已存在的容器上运行命令</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span>    Stream the contents of a container as a tar archive   <span class="comment"># 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span>   Show the <span class="built_in">history</span> of an image                  <span class="comment"># 展示一个镜像形成历史</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> images    List images                                   <span class="comment"># 列出系统当前镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> import    Create a new filesystem image from the contents of a tarball <span class="comment"># 从tar包中的内容创建一个新的文件系统映像[对应export]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> info      Display system-wide information               <span class="comment"># 显示系统相关信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> inspect   Return low-level information on a container   <span class="comment"># 查看容器详细信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span>      Kill a running container                      <span class="comment"># kill 指定 docker 容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> load      Load an image from a tar archive              <span class="comment"># 从一个 tar 包中加载一个镜像[对应 save]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> login     Register or Login to the docker registry server    <span class="comment"># 注册或者登陆一个 docker 源服务器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">logout</span>    Log out from a Docker registry server          <span class="comment"># 从当前 Docker registry 退出</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> logs      Fetch the logs of a container                 <span class="comment"># 输出当前容器日志信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> port      Lookup the public-facing port <span class="built_in">which</span> is NAT-ed to PRIVATE_PORT    <span class="comment"># 查看映射端口对应的容器内部源端口</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pause     Pause all processes within a container        <span class="comment"># 暂停容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps        List containers                               <span class="comment"># 列出容器列表</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pull      Pull an image or a repository from the docker registry server   <span class="comment"># 从docker镜像源服务器拉取指定镜像或者库镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> push      Push an image or a repository to the docker registry server   <span class="comment"># 推送指定镜像或者库镜像至docker源服务器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> restart   Restart a running container                   <span class="comment"># 重启运行的容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm        Remove one or more containers                 <span class="comment"># 移除一个或者多个容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> rmi       Remove one or more images             <span class="comment"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> run       Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container              <span class="comment"># 创建一个新的容器并运行一个命令</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> save      Save an image to a tar archive                <span class="comment"># 保存一个镜像为一个 tar 包[对应 load]</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> search    Search <span class="keyword">for</span> an image on the Docker Hub         <span class="comment"># 在 docker hub 中搜索镜像</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> start     Start a stopped containers                    <span class="comment"># 启动容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> stop      Stop a running containers                     <span class="comment"># 停止容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tag       Tag an image into a repository                <span class="comment"># 给源中镜像打标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> top       Lookup the running processes of a container   <span class="comment"># 查看容器中运行的进程信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> unpause   Unpause a paused container                    <span class="comment"># 取消暂停容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> version   Show the docker version information           <span class="comment"># 查看 docker 版本号</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">wait</span>      Block until a container stops, <span class="keyword">then</span> <span class="built_in">print</span> its <span class="built_in">exit</span> code   <span class="comment"># 截取容器停止时的退出状态值</span></span></span><br></pre></td></tr></table></figure>
<hr>
]]></content>
  </entry>
</search>
